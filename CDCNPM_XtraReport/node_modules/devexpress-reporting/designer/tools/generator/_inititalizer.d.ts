/**
* DevExpress HTML/JS Reporting (designer\tools\generator\_inititalizer.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { IReportDesignerRootContext, IReportDesignerContext } from './reportDesignerContext';
import { IReportDesignerCustomizationHandler, IReportWizardSettings } from '../../utils/inititalizer';
import { IPreviewCustomizationHandler } from '../../../viewer/utils/initializer';
import { DataBindingModeValue, DefaultCrossTabControlValue } from '../../utils/settings';
import { ReportDialogSettings, PreviewOptions, IReportUriSettings, WizardsInitializerSettings, IReportDesignerGeneratorSettings } from './_settings';
import { ReportMenuSettings } from './_reportMenuSettings';
import { ReportItemsProvider } from '../../internal/reportExplorer/_reportItemsProvider';
import { ISerializationInfoArray, TabInfo, ToolboxItem, TabPanel } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { IActionsProvider, CommonDesignerGenerator, IPropertiesAccessibilityProvider, SelectionSettings, GroupObject, ControlsHelperSettings, ContextActionsSettings, ActionLists, IDesignerPart, InlineTextEdit, ObjectExplorerProvider } from '@devexpress/analytics-core/analytics-internal';
import { IDataSourceWizardConnectionStrings } from '@devexpress/analytics-core/analytics-wizard';
export declare class ReportDesignerInitializer extends CommonDesignerGenerator<IReportDesignerRootContext> {
    private options;
    private _navigation;
    private _selection;
    private _onAfterRenderCallbacks;
    private _sqlDataSourceEditor;
    private _jsonDataSourceEditor;
    private _objectDataSourceEditor;
    private _dataSourceActionProvider;
    private _previewUri;
    private _dataBiningMode;
    private _defaultCrossTabControl;
    private _converters;
    private _parameters;
    private _calculatedFieldsSource;
    private _convertBindingsToExpressions;
    private _reportcontext;
    readonly reportContext: ko.Computed<IReportDesignerContext>;
    private _allowMDI;
    private _callbacks;
    private _customMergeEngine;
    private _accessibilityProvider;
    readonly buildingModel: IReportDesignerRootContext;
    private readonly _designerCallbacks;
    subscribeIncomeReport(report: ko.Observable | ko.Computed, reportUrl?: ko.Observable<string> | ko.Computed<string>, dataSourceRefs?: any[]): this;
    private _addDisposable;
    private _tryAddScriptEditor;
    private _getControls;
    private _createEmptyReportItemsProvider;
    addReportDialogs(func: (settings: ReportDialogSettings) => void): this;
    addErrorPanelViewModel(element: any): this;
    addNavigateToControl(element?: Element): this;
    addFlagsAndInitProperties(element?: Element): this;
    addPreview(options: PreviewOptions): this;
    addReportUrls(subreports: any): this;
    private _wrapActionProvider;
    initializeFieldListActionProviders(func?: () => IActionsProvider[]): this;
    initializeCalculatedFieldsSource(): this;
    initializeFieldListItemsExtenders(): this;
    initializeParameters(): this;
    initializeFieldListProvider(): this;
    initializeReportItemsProvider(): this;
    initializeDataBindingsProvider(): this;
    initializeDisplayNameProvider(): this;
    initializeExpressionDisplayNameProvider(): this;
    initializeDataSourceHelper(): this;
    addSelection(func?: (settings: SelectionSettings) => void): this;
    addToolboxItems(items?: () => ToolboxItem[]): this;
    addGroupedToolboxItems(): this;
    addControlProperties(editors: ISerializationInfoArray, groups: GroupObject, accessibilityProvider?: IPropertiesAccessibilityProvider): this;
    createControlProperties(editors: ISerializationInfoArray, groups: GroupObject, accessibilityProvider?: IPropertiesAccessibilityProvider): import("@devexpress/analytics-core/analytics-internal").ControlProperties;
    addMenu(func?: (settings: ReportMenuSettings) => void): this;
    addControlsHelper(func?: (settings: ControlsHelperSettings) => void): this;
    addSmartTagModel(): this;
    setControlsHelperFilter(filter: (control: any) => boolean): any;
    private _createPropertiesTab;
    private _createExpressionsTab;
    private _createReportExplorerTab;
    private _createFieldListTab;
    addTabPanel(panel?: () => TabPanel, addTabInfo?: () => TabInfo[]): this;
    private _createActionsStorage;
    private _updateCallback;
    addOpenReportMethod(): this;
    addShowPreviewMethod(): this;
    initializeUIEffects(applyBindings: boolean, element: Element): this;
    private _createNewViaWizardAction;
    private _createLocalizationModeAction;
    private _createDesignInReportWizardAction;
    private _createMultiQueryDataSourceWizardAction;
    private _customizeDesignerActions;
    private _patchReportBeforeRedesign;
    private _restoreAfterFail;
    addContextActions(func?: (contextActions: ContextActionsSettings) => void): this;
    addActionList(actionListFunc?: () => ActionLists): this;
    private _createChartDesignerPart;
    private _createWizardPart;
    addParts(func?: (parts: any) => IDesignerPart[]): this;
    addDefaultAddons(addons?: IDesignerPart[]): this;
    tryAddSqlDataSourceEditorAddon(relationsEditor?: ko.Observable<import("@devexpress/analytics-core/queryBuilder-widgets-internal").MasterDetailEditor>): this;
    tryAddScriptEditorAddon(isScriptsDisabled: any): this;
    tryAddInlineRichTextEdit(): this;
    onContextChanged(subreports?: any, func?: (context: IReportDesignerContext) => void): this;
    configurateRtl(rtl: boolean): this;
    configureReportStorageRegistration(reportStorageIsRegister: boolean, allowMDI: boolean): this;
    applyUri(uriSettings: IReportUriSettings): this;
    initBindingMode(dataBiningMode: string, convertBindingsToExpressions: string): this;
    initDefaultCrossTabControl(defaultCrossTabControl: DefaultCrossTabControlValue): this;
    registerControls(dataBindingMode: DataBindingModeValue, reportItemsProvider: ko.Observable<ReportItemsProvider> | ko.Computed<ReportItemsProvider>): this;
    addCallbacks(callbacks: {
        designer?: IReportDesignerCustomizationHandler;
        preview?: IPreviewCustomizationHandler;
    }): this;
    addProcessErrorCallback(processError?: (e: any) => void): this;
    runCustomizeToolboxEvent(customizeToolbox?: (controlsStore: import("../../../dx-reportdesigner").ControlsFactory) => void): this;
    initCultureInfo(cultureInfoList: any): this;
    updateFont(fontSet: string[] | {
        [key: string]: string;
    }): this;
    initFormatStringPatterns(formatStringData: any): this;
    addPopularProperties(controlsFactory: any, accessibilityProvider?: IPropertiesAccessibilityProvider): this;
    addInlineTextEdit(func: () => InlineTextEdit): this;
    addStylesProjection(styles?: ko.PureComputed<ko.ObservableArray<import("../../../dx-reportdesigner").StyleModel>>): this;
    addFormattingRulesProjection(rules?: ko.PureComputed<ko.ObservableArray<import("../../../dx-reportdesigner").FormattingRule>>): this;
    addReportExplorerProvider(reportExplorerProvider?: ObjectExplorerProvider): this;
    addControlsProjection(controlsHelper?: import("@devexpress/analytics-core/analytics-internal").DesignControlsHelper): this;
    addBandsProjection(controlsHelper?: import("@devexpress/analytics-core/analytics-internal").DesignControlsHelper): this;
    addWizardRunner(): this;
    addWizards(connectionStrings: IDataSourceWizardConnectionStrings, wizardSettings: IReportWizardSettings, cusomizeSettingsFunc: (settings: WizardsInitializerSettings) => void): this;
    addLocalizationEditor(): this;
    addStaticContext(): this;
    tryApplyBindings(applyBindings: boolean, element: Element): this;
    dispose(): void;
    constructor(options: IReportDesignerGeneratorSettings);
}
