/**
* DevExpress Analytics (dx-analytics-core-templates.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _svgTemplateEngine_1 = require("./property-grid/widgets/internal/_svgTemplateEngine");
_svgTemplateEngine_1.SvgTemplatesEngine.addTemplates({
    'dxrd-bordereditor': '<div class="dxrd-bordereditor-content"> <!-- ko with: value--> <div class="dxrd-bordereditor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-borders-none" data-bind="template: \'dxrd-svg-properties-borders-none\', css: { \'dxd-state-active\': (!bottom() && !left() && !top() && !right()), \'dxrd-disabled-button\': disabled }, click: function() { setNone() }"></div> <div class="dxrd-bordereditor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-borders-all dxrd-bordereditor-right-margin" data-bind="template: \'dxrd-svg-properties-borders-all\', css: { \'dxd-state-active\': (bottom() && left() && top() && right()), \'dxrd-disabled-button\': disabled  }, click: function() { setAll() }"></div> <div class="dxrd-bordereditor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-borders-left" data-bind="template: \'dxrd-svg-properties-borders-left\', css: { \'dxd-state-active\': left(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'left\') }"></div> <div class="dxrd-bordereditor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-borders-top" data-bind="template: \'dxrd-svg-properties-borders-top\', css: { \'dxd-state-active\': top(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'top\') }"></div> <div class="dxrd-bordereditor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-borders-right" data-bind="template: \'dxrd-svg-properties-borders-right\', css: { \'dxd-state-active\': right(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'right\') }"></div> <div class="dxrd-bordereditor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-borders-bottom" data-bind="template: \'dxrd-svg-properties-borders-bottom\', css: { \'dxd-state-active\': bottom(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'bottom\') }"></div> <p></p> <!-- /ko --></div>',
    'dxrd-borders': '<div class="dxrd-bordereditor" data-bind="dxBorderEditor: { value: value, disabled: disabled }"></div>',
    'dxrd-colorpicker': '<div data-bind="dxColorBox: { value: displayValue, editAlphaChannel: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element), position: { at: \'left bottom\', collision: \'flipfit flipfit\', my: \'left top\', boundary: $root.getPopupContainer($element), of: $element } }, inputAttr: { \'aria-label\': displayName } }"></div>',
    'dxrd-expressionstring': '<!-- ko if: $data.value() --> <div data-bind="dxExpressionEditor: getOptions({ options: value, fieldListProvider: $root.dataBindingsProvider, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() })"></div> <!-- /ko -->',
    'dxrd-field': '<!-- ko displayNameExtender: { path: path, dataMember: value } --> <!-- ko if: visible --> <div data-bind="dxFieldListPicker: { path: path, acceptCustomValue: true, value: value, displayValue: $displayName, itemsProvider: $root.dataBindingsProvider, treeListController: treeListController, disabled: disabled }"></div> <!-- /ko --> <!-- /ko -->',
    'dxrd-filterstring': '<!-- ko if: $data.value() --> <div data-bind="dxFilterEditor: { options: value, fieldListProvider: $root.dataBindingsProvider, getDisplayNameByPath: $root.getDisplayNameByPath, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() }"></div> <!-- /ko -->',
    'dxrd-filterstringgroup': '<!-- ko if: $data.value() --> <div data-bind="dxFilterEditor: { options: value, fieldListProvider: $root.dataBindingsGroupProvider, getDisplayNameByPath: $root.getDisplayNameByPath, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() }"></div> <!-- /ko -->',
    'dxrd-formatstring': '<div data-bind="dxFormatEditor: { value: value, disabled: disabled, actions: $data.actions, customPatterns: $data.customPatterns }"></div>',
    'dxrd-guid': '<div data-bind="dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: (validationRules || []) }"></div>',
    'dxrd-emptyHeader': ' ',
    'dxrd-objectEditorContent': '<!-- ko if: $data.visible() && $data.editorCreated() --> <div data-bind="template: { name: \'dx-propertieseditor\', data: viewmodel }"></div> <!-- /ko -->',
    'dxrd-objectEditor': '<div data-bind="dxPropertyGrid: { target: ko.observable($data), level: $parent.level, textToSearch: $parent.textToSearch }"></div>',
    'dxrd-commonCollectionItem': '<div data-bind="dxPropertyGrid: { target: value, level: editor.level + 1, parentDisabled: editor.disabled }"></div>',
    'dxrd-textalignment': '<div class="dxrd-textalignment-editor" data-bind="dxTextAlignmentEditor: { value: value, disabled: disabled }"></div>',
    'dxrd-objectVisitor': '<!-- ko if: options --> <div data-bind="treelist: options"></div> <!-- /ko -->',
    'dxd-snap-lines-holder': '<div class="dxd-snap-lines-holder"> <div class="dxd-snap-line dxd-snap-line-horizontal" data-bind="style: { transform: snapLineSurfaces[0].transform() }"></div> <div class="dxd-snap-line dxd-snap-line-horizontal" data-bind="style: { transform: snapLineSurfaces[1].transform() }"></div> <div class="dxd-snap-line dxd-snap-line-vertical" data-bind="style: { transform: snapLineSurfaces[2].transform() }"></div> <div class="dxd-snap-line dxd-snap-line-vertical" data-bind="style: { transform: snapLineSurfaces[3].transform() }"></div> </div>',
    'dxrd-surface-template-base': '<!-- ko ifnot: isLoading --> <!-- ko with: surface --> <div class="dxrd-surface-wrapper" data-bind="template: templateName, click: function(_, e) { !$root.selection.disabled() && $root.selection.clickHandler($data, e); e.stopPropagation(); }"> </div> <!-- /ko --> <!-- /ko --> <!-- ko if: isLoading --> <div class="dxrd-surface-wrapper"></div> <!-- /ko -->',
    'dxrd-designer': '<div tabindex="-1" data-bind="cssArray: [surfaceClass($element), { \'dx-accessibility\': $data.accessibilityCompliant } ]"> <div class="dxrd-designer-wrapper dx-editors dxd-surface-back-color dxd-scrollbar-color" data-bind="visible: (!$data.designMode || designMode()), cssArray: [$data.rootStyle, { \'dx-rtl\' : $data.rtl, \'dx-ltr\': !$data.rtl }]"> <!-- ko foreach: parts --> <!-- ko template: { name: templateName, data: model }--> <!-- /ko --> <!-- /ko --> </div> <!-- ko if: ($data.addOns) --> <!-- ko foreach: addOns --> <!-- ko template: { name: templateName, data: model } --> <!-- /ko --> <!-- /ko --> <!-- /ko --> <div id="dxrd-designer-last-focus-item-blank" class="dxrd-visually-hidden" tabindex=\'-1\'></div> </div>',
    'dxrd-textalignment-editor': '<div class="dxrd-textalignment-editor-content"> <!-- ko with: value--> <div> <div class="dxrd-textalignment-editor-label dx-field-label" data-bind="text: verticalString"></div> <div class="dxrd-textalignment-editor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-textAlignment-top" data-bind="template: \'dxrd-svg-properties-textAlignment-top\', css: { \'dxd-state-active\': top(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'top\', \'Vertical\') }"></div> <div class="dxrd-textalignment-editor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-textAlignment-middle" data-bind="template: \'dxrd-svg-properties-textAlignment-middle\', css: { \'dxd-state-active\': middle(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'middle\', \'Vertical\') }"></div> <div class="dxrd-textalignment-editor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-textAlignment-bottom" data-bind="template: \'dxrd-svg-properties-textAlignment-bottom\', css: { \'dxd-state-active\': bottom(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'bottom\', \'Vertical\') }"></div> </div> <div class="dxrd-textalignment-margin-top"> <br/> <div class="dxrd-textalignment-editor-label dx-field-label" data-bind="text: horizontalString"></div> <div class="dxrd-textalignment-editor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-textAlignment-left" data-bind="template: \'dxrd-svg-properties-textAlignment-left\', css: { \'dxd-state-active\': left(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'left\', \'Horizontal\') }"></div> <div class="dxrd-textalignment-editor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-textAlignment-center" data-bind="template: \'dxrd-svg-properties-textAlignment-center\', css: { \'dxd-state-active\': center(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'center\', \'Horizontal\') }"></div> <div class="dxrd-textalignment-editor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-textAlignment-right" data-bind="template: \'dxrd-svg-properties-textAlignment-right\', css: { \'dxd-state-active\': right(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'right\', \'Horizontal\') }"></div> <div class="dxrd-textalignment-editor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-textAlignment-justify" data-bind="template: \'dxrd-svg-properties-textAlignment-justify\', css: { \'dxd-state-active\': justify(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'justify\', \'Horizontal\') }"></div> </div> <!-- /ko --> </div>',
    'dxrd-collectionactions-template': '<div class="dxrd-action-items-container"></div> <div class="dx-treelist-action" data-bind="dxButtonWithTemplate: { onClick: togglePopoverVisible, disabled: disabled, icon: ko.unwrap($data.imageTemplateName), iconClass: ko.unwrap($data.imageClassName) }, attr: { id: id, title: text }"></div> <div data-bind="dxPopup: { width: 235, height: \'auto\', position: { my: $root.rtl ? \'left top\': \'right top\', at: \'bottom\', of: (\'#\' + id) }, showTitle: false, showCloseButton: false, animation: {}, closeOnOutsideClick: true, container: ($data.getContainer || function(_e, selector) { return selector; })($element, \'.dxrd-action-items-container\'), shading: false, visible: popoverVisible }"> <!-- ko if: $data.contentTemplate--> <!-- ko template: contentTemplate--> <!-- /ko --> <!-- /ko --> <!-- ko if: !$data.contentTemplate --> <!-- ko foreach: actions --> <div class="dxrd-action-item dxd-button-back-color dxd-state-normal dxd-back-highlighted" data-bind="dxclick: clickAction, css: { \'dxrd-disabled-button\': disabled }"> <div class="dxrd-action-item-image" data-bind="css: ko.unwrap($data.imageClassName), template: {name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: $data.displayText && $data.displayText() || text }"> </div> </div> <!-- /ko --> <!-- /ko --> </div>',
    'dxrd-drag-helper-source': '<div class="dxrd-drag-helper-source" data-bind="styleunit: { top: $data.top, left: $data.left, width: $data.width, height: $data.height }, css: { \'dxrd-locked\': $data.isLocked }"> <!-- ko foreach: $data.controls() --> <div class="dxrd-drag-helper-control" data-bind="styleunit: { left: $data.left, top: $data.top, width: $data.width, height: $data.height }, css: $data.className"> <!-- ko with: $parent.customData() --> <div data-bind="template: { name: $data.template, data: $data.data }"> </div> <!-- /ko --> </div> <!-- /ko --> </div>',
    'dxrd-menubutton-template-base': '<div class="dxrd-menu-container" style="position:relative; width:0; height:100%"></div> <div class="dxrd-menu-button dxd-toolbox-back-color dxd-border-primary dxd-back-primary2"> <div class="dxrd-menu-place" style="width:54px;"></div> <div class="dxrd-menu-button-image dxd-button-back-color dxd-state-normal dxd-back-highlighted" data-bind="dxclick: function(e) { if(stopPropagation) { stopPropagation = false; } else { toggleAppMenu() } }, template: \'dxrd-svg-menu-menu\', css: {\'dxd-state-active\': appMenuVisible }"></div> <div data-bind="dxPopup: { width: 250, wrapperAttr: { class: \'dxd-menu-back-color dxd-back-primary2\' }, height: \'100%\' , position: $data.rtl ? { my: \'right top\' , at: \'left top\' , offset: \'-10 0\' } : { my: \'left top\' , at: \'right top\' , offset: \'10 0\' }, showTitle: false, showCloseButton: false, container: getMenuPopupContainer($element), target: getMenuPopupTarget($element), animation: {}, closeOnOutsideClick: function(e) { var buttonClassName = \'dxrd-menu-button-image\'; var parentClassList = e.target.parentNode && e.target.parentNode.parentNode && e.target.parentNode.parentNode.classList; stopPropagation = (e.target.classList && e.target.classList.contains(buttonClassName)) || (parentClassList && parentClassList.contains(buttonClassName)); return true; }, shading: false, focusStateEnabled: false, visible: appMenuVisible }"> <div class="dxrd-menu-break dxd-popup-back-color dxd-back-primary2"></div> <!-- ko foreach: actionLists.menuItems --> <div class="dxrd-menu-item dxd-text-primary dxd-list-item-back-color dxd-back-highlighted" data-bind="dxclick: function(e) { if(disabled && !disabled() || !disabled) { $root.toggleAppMenu(); clickAction($root.model(), e); }}, css: { \'dxrd-disabled-button\': disabled }, visible: visible"> <div class="dxrd-menu-item-image" data-bind="css: ko.unwrap($data.imageClassName), template: {name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: $data.displayText && $data.displayText() || text }"> </div> <div class="dxrd-menu-item-text" data-bind="text: $data.displayText && $data.displayText() || text, attr: { title: $data.displayText && $data.displayText() || text}"></div> <div class="dxrd-menu-item-separator" data-bind="visible: $data.hasSeparator"></div> </div> <!-- /ko --> </div> </div>',
    'dxrd-top-grid': '<!-- ko if: popularVisible --> <div class="dx-fieldset"> <div data-bind="dxdAccordion: { collapsed: collapsed }"> <div class="dxrd-group-header dx-accordion-header" data-bind="css: { \'dxrd-group-header-collapsed dxd-border-primary\': collapsed() }"> <div class="dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }" style="display:inline-block;"></div> <span class="dxrd-group-header-text" data-bind="text: $root.actionsGroupTitle()"></span> </div> <div class="dx-accordion-content dxd-back-primary"> <!-- ko foreach: (contextActions || []) --> <!-- ko if: $data.templateName --> <!-- ko template: templateName  --> <!-- /ko --> <!-- /ko --> <!-- ko if: !$data.templateName --> <div class="dxrd-properties-grid-action" data-bind="dxclick: function() { if($data.disabled && !$data.disabled() || !$data.disabled) { clickAction($root.editableObject()); } }, css: { \'dxrd-disabled-button\': $data.disabled && $data.disabled() }, visible: (ko.unwrap($data.visible) == undefined) || ko.unwrap($data.visible)"> <div class="dxrd-properties-grid-action-image dxd-button-back-color dxd-state-normal dxd-back-highlighted" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: $data.displayText && $data.displayText() || text }"></div> </div> <!-- /ko --> <!-- /ko --> <!-- ko with: popularProperties --> <div style="position: relative" data-bind="template: { name: \'dx-propertieseditor\', data: $data }"></div> <!-- /ko --> </div> </div> </div> <!-- /ko -->',
    'dxrd-group-actions': '<div class="dxd-back-primary2 dxrd-property-grid-actions-group"> <!-- ko foreach: (groupActions || []) --> <div class="dxd-border-primary dxrd-properties-grid-actions-group-content" data-bind="visible: items.some(x => !x.visible || ko.unwrap(x.visible))"> <div class="dxd-text-primary dxrd-properties-grid-action-name" data-bind="text: group"></div> <!-- ko foreach: (items || []) --> <!-- ko template: { name: $data.templateName, if: $data.templateName }  --> <!-- /ko --> <!-- ko if: !$data.templateName --> <div class="dxrd-properties-grid-action" data-bind="dxclick: function() { if($data.disabled && !$data.disabled() || !$data.disabled) { clickAction($root.editableObject()); } }, css: { \'dxrd-disabled-button\': $data.disabled && $data.disabled() }, visible: (ko.unwrap($data.visible) == undefined) || ko.unwrap($data.visible)"> <div class="dxrd-properties-grid-action-image dxd-button-back-color dxd-state-normal dxd-back-highlighted" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: $data.displayText && $data.displayText() || text }"> </div> </div> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> </div>',
    'dx-propertygrid-searchbox': '<div class="dx-property-grid-search-group dx-property-gread-search-collapsed" data-bind="css: { \'dx-property-gread-search-collapsed\': !isSearching() }"> <div class="dx-property-grid-sorting-action dxd-button-back-color dxd-state-normal dxd-back-highlighted dxd-back-primary2" data-bind="css: { \'dxd-state-active\': isSearching }, dxButtonWithTemplate: { onClick: switchSearchBox, icon: \'dxrd-svg-properties-search\', iconClass: \'image-search\' }, attr: { title: $root.getLocalization(\'Search\', \'ASPxReportsStringId.SearchDialog_Header\') }"> </div> <div class="dx-property-grid-search-box" data-bind="dxTextBox: { value: textToSearch, valueChangeEvent: \'keyup\', placeholder: searchPlaceholder(), showClearButton: true }, cacheElement: { action: function(element) { searchBox(element); } }"></div> </div>',
    'dxrd-propertiestab': '<div class="dxrd-properties-wrapper" data-bind="visible: active() && visible()"> <div style="height:100%" class="dxd-text-primary"> <div class="dxrd-right-panel-header"> <span data-bind="text: text"></span> </div> <!-- ko with: model --> <!-- ko if: $root.controlsStore.visible() --> <div class="dx-property-grid-header"> <div class="dx-property-grid-header-content"> <div class="dx-property-grid-sorting-actions-group" data-bind="css: { \'dx-property-gread-search-collapsed\': isSearching }"> <div class="dxrd-properties-focused-item" data-bind="dxSelectBox: { dataSource: $root.controlsStore.dataSource, value: focusedItem, displayExpr: displayExpr, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true }"></div> <div class="dx-property-grid-sorting-actions-container"> <div class="dx-property-grid-sorting-action dxd-button-back-color dxd-state-normal dxd-back-highlighted dxd-back-primary2" data-bind="css: { \'dxd-state-active dxd-state-no-hover\': !isSortingByGroups() }, dxButtonWithTemplate: { onClick: function() { $data.isSortingByGroups(false); }, icon: \'dxrd-svg-properties-sortingbyalphabet\', iconClass: \'image-sortingbyalphabet\' }"></div> <div class="dx-property-grid-sorting-action dxd-button-back-color dxd-state-normal dxd-back-highlighted dxd-back-primary2" data-bind="css: { \'dxd-state-active dxd-state-no-hover\': isSortingByGroups }, dxButtonWithTemplate: { onClick: function() { $data.isSortingByGroups(true); }, icon: \'dxrd-svg-properties-sortingbygroups\', iconClass: \'image-sortingbygroups\' }"></div> </div> </div> <!-- ko template: \'dx-propertygrid-searchbox\' --> <!-- /ko --> </div> </div> <!-- /ko --> <div class="dxrd-properties-grid dxd-border-primary" data-bind="dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true }, styleunit: { top: $root.controlsStore.visible() ? 80 : 40 }"> <!-- ko template: { name: \'dxrd-group-actions\', data: { groupActions: $root.contextGroupActions } } --> <!-- /ko --> <!-- ko template: { name: \'dxrd-top-grid\', data: { contextActions: $root.contextActions, popularProperties: $root.popularProperties, collapsed: ko.observable(false), popularVisible: $root.popularVisible() && isSortingByGroups(), actionsGroupTitle: $root.actionsGroupTitle } } --> <!-- /ko --> <div data-bind="visible: isSortingByGroups"> <!-- ko foreach: groups --> <div class="dx-fieldset" data-bind="visible: visible"> <div data-bind="dxdAccordion: { collapsed: collapsed }"> <div class="dxrd-group-header dx-accordion-header" data-bind="css: { \'dxrd-group-header-collapsed dxd-border-primary\': collapsed() }"> <div class="dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }" style="display:inline-block;"></div> <span class="dxrd-group-header-text" data-bind="text: displayName()"></span> </div> <div class="dx-accordion-content dxd-back-primary"> <!-- ko ifnot: editorsCreated --> <div class="dx-accordion-content-loading-panel"> <div data-bind="dxLoadIndicator: { visible: !editorsCreated() }"></div> </div> <!-- /ko --> <!-- ko if: $data.editorsRendered() --> <div data-bind="visible: editorsCreated"> <div class="dx-editors"> <!-- ko foreach: editors --> <!-- ko template: editorTemplate --> <!-- /ko --> <!-- ko if: ($index() === $parent.editors().length - 1 && $parent.editorsCreated(true)) --> <!-- /ko --> <!-- /ko --> </div> </div> <!-- /ko --> </div> </div> </div> <!-- /ko --> </div> <div class="dx-fieldset dxd-back-primary" data-bind="visible: !isSortingByGroups()"> <div data-bind="dxLoadIndicator: { visible: !allEditorsCreated() }"></div> <!-- ko if: $data.editorsRendered() --> <div data-bind="visible: allEditorsCreated"> <div class="dx-editors"> <!-- ko foreach: $data.getEditors() --> <!-- ko template: editorTemplate --> <!-- /ko --> <!-- ko if: ($index() === $parent._editors().length - 1 && $parent.allEditorsCreated(true)) --> <!-- /ko --> <!-- /ko --> </div> </div> <!-- /ko --> </div> <!-- ko template: \'dx-propertygrid-popupservice\' --> <!-- /ko --> </div> <!-- /ko --> </div> </div>',
    'dx-propertygrid-popupservice': '<div data-bind="dxPopup: { width: 250, height: \'auto\', position: $data.rtl ? { my: \'left top\', at: \'right top\', of: popupService.target, collision: \'flipfit\' } : { my: \'right top\', at: \'left top\', of: popupService.target, collision: \'flipfit\' }, container: $root.getPopupContainer($element), target: popupService.target, showTitle: false, showCloseButton: false, animation: {}, closeOnOutsideClick: true, shading: false, visible: popupService.visible }"> <div data-options="dxTemplate: { name: \'content\' }"> <div class="dxrd-editor-menu-caption dxd-text-primary" data-bind="text: popupService.title, visible: popupService.title"></div> <div class="dxd-button-back-color" data-bind="dxMenu: { wrapperAttr: { class: \'dxd-button-back-color\' }, disabled: popupService.disabled, dataSource: popupService.actions, displayExpr: \'title\', cssClass: \'dxrd-editor-menu\', orientation: \'vertical\', showFirstSubmenuMode: \'onHover\', onSubmenuShowing: function(e) { e.submenu._overlay.option(\'container\', $root.getPopupContainer($element)) } }"> <div class="dxrd-editor-menu-item dxd-back-highlighted dxd-state-normal" data-options="dxTemplate: { name: \'item\' }" data-bind="dxclick: action"> <span class="dxd-text-primary dx-menu-item-text" data-bind="attr: { title: title }, text: title"></span> <div class="dx-menu-item-popout-container" data-bind="visible: $data.items && $data.items.length"><div class="dx-menu-item-popout"></div></div> <!--ko if: $data.customTemplate--> <!--ko template: $data.customTemplate--> <!--/ko--> <!--/ko--> </div> </div> </div> </div>',
    'dx-right-panel-lightweight': '<div class="dxrd-right-panel dx-shadow dx-shadow-right dxd-border-secondary dxd-property-grid-group-header-back-color dxd-back-primary2" data-bind="styleunit: { width: tabPanel.width }, css: tabPanel.cssClasses(), resizable: tabPanel.getResizableOptions($element, 1, 325)"> <!-- ko foreach: tabPanel.tabs --> <!-- ko lazy: { template: $data.template } --> <!-- /ko --> <!-- /ko --> </div>',
    'dxrd-right-panel-template-base': '<!-- ko with: tabPanel --> <div class="dx-shadow dx-shadow-right dxd-border-secondary dxrd-tab-panel-wrapper" data-bind="styleunit: { width: $data.headerWidth }, css: $data.cssClasses({\'dx-tab-panel-collapsed\':$data.collapsed }), accessibilityKeyboardHelper: $data.keyboardHelper"> <div class="dxrd-right-tabs dxd-side-panel-tabs-back-color dxd-back-contrast" data-bind="css: $data.cssClasses()"> <!-- ko foreach: $data.tabs --> <div role="button" class="dxrd-tab-item dx-accessibility-rightpanel-button dxd-side-panel-tab-back-color dxd-back-highlighted dx-accessibility-focus-border-accented" data-bind="dxAction: { model: $data, action: function(s) { $parent.toggleTabVisibility({ model: s }); }}, css: { \'dxd-state-active dxd-state-no-hover\': active, \'dxrd-tab-item-disabled\': disabled }, attr: { title: $data.text, \'aria-label\': $data.text, \'aria-expanded\': $data.active }, visible: visible"> <div class="dxrd-image-padding" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}"> </div> </div> <!-- /ko --> </div> <div class="dxrd-right-panel dxd-property-grid-group-header-back-color dxd-back-primary2" data-bind="styleunit: { width: $data.width }, css: $data.cssClasses(), resizable: $data.getResizableOptions($element, 50, 340)"> <!-- ko foreach: $data.tabs --> <!-- ko lazy: { template: $data.template } --> <!-- /ko --> <!-- /ko --> </div> </div> <!-- /ko -->',
    'dxrd-toolbar-template-base': '<div class="dxrd-toolbar-wrapper dxd-back-secondary-invariant dx-shadow-top"> <div class="dxrd-toolbar" data-bind="template: {name: \'dxrd-toolbar-tmplt\', data: actionLists.toolbarItems }"></div> </div>',
    'dxrd-toolbar-tmplt': '<!-- ko foreach: $data --> <!-- ko if: $data.templateName --> <!-- ko template: { name: $data.templateName, data: $data.contentData || $data } --> <!-- /ko --> <!-- /ko --> <!-- ko if: !$data.templateName --> <div class="dxrd-toolbar-item" data-bind="visible: visible, class: \'dxrd-toolbar-item-\' + $index(), css: {\'dxrd-toolbar-item-with-separator dxd-border-primary\': $data.hasSeparator } "> <div role="button" class="dx-accessibility-toolbar-item dx-accessibility-focus-border-accented" data-bind="attr: { \'aria-label\': $data.displayText && $data.displayText() || text, \'aria-hidden\': ko.unwrap($data.visible) ? \'false\' : \'true\', \'aria-disabled\': ko.unwrap($data.disabled) ? \'true\' : \'false\', \'aria-checked\': $data.selected ? ($data.selected() ? \'true\' : \'false\') : null }" > <div data-bind="template: { name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}, attr: { class: \'dxrd-toolbar-item-image dxd-state-normal dxd-icon-highlighted \' + (ko.unwrap($data.imageClassName) || \'\'), title: $data.displayText && $data.displayText() || text }, }, dxclick: function() { if((typeof $data.disabled === \'function\') && !disabled() || !disabled) { clickAction($root.model && $root.model()); } }, css: {\'dxrd-disabled-button\': disabled, \'dxd-button-back-color dxd-back-highlighted dxd-state-active\': $data.selected }"> </div> <div class="dxrd-toolbar-item-separator dxd-toolbar-separator-color dxd-border-secondary" data-bind="visible: $data.hasSeparator"></div> </div> </div> <!-- /ko --> <!-- /ko -->',
    'dxrd-toolbox-template-base': '<div class="dxrd-toolbox-wrapper dxd-toolbox-back-color dxd-back-primary2 dx-shadow dx-shadow-left" data-bind="dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }"> <!-- ko foreach: toolboxItems --> <div class="dxrd-toolbox-item dxd-icon-highlighted" data-bind="attr: { title: displayName }"> <div class="dxrd-image-padding dx-fontsize-reestablished" data-bind="template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, css: $data.imageClassName, draggable: $root.toolboxDragHandler"> </div> </div> <!-- /ko --> </div>',
    'dxrd-grouped-toolbox-template-base': '<div class="dxrd-toolbox-wrapper dxd-toolbox-back-color dxd-back-primary2-invariant toolbox-grouped dx-shadow dx-shadow-left" data-bind="dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }"> <!-- ko foreach: groupedToolboxItems --> <div class="dxrd-toolbox-group dxd-border-primary"> <!-- ko foreach: items --> <div class="dxrd-toolbox-item dxd-icon-highlighted" data-bind="attr: { title: displayName }"> <div class="dxrd-image-padding dx-fontsize-reestablished" data-bind="template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, css: $data.imageClassName, draggable: $root.toolboxDragHandler"> </div> </div> <!-- /ko --> </div> <!-- /ko --> </div>',
    'dxrd-zoom-select-template': '<div class="dxrd-toolbar-item-zoom" data-bind="visible: visible"> <div class="dxrd-toolbar-item-zoom-editor" data-bind="dxSelectBox: { items: zoomLevels, value: $data.zoom, displayExpr: function(val) { return Math.round((val || this.option(\'value\')) * 100) + \'%\'; }, displayCustomValue: true, acceptCustomValue: true, onCustomItemCreating: onCustomItemCreating, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true }"></div> </div>',
    'dx-editor-addons': '<div class="dxrd-editormenu-boxes"> <!-- ko foreach: $data --> <!-- ko if: $data.visible --> <!-- ko if: !ko.unwrap($data.imageTemplateName) --> <div class="dxrd-editormenu-box dxd-property-grid-menu-box-color dxd-back-contrast" data-bind="dxclick: function(_, element) { showPopup(_, element) }, css: editorMenuButtonCss, attr: { title: hint }"> <div class="dxrd-editormenu-box-inside dxd-back-secondary"></div> </div> <!-- /ko --> <!-- ko if: ko.unwrap($data.imageTemplateName) --> <div class="dxrd-editormenu-box dxd-property-grid-menu-box-color dxrd-editor-box-image" data-bind="dxclick: function(_, element) { showPopup(_, element) }, attr: { title: hint }, css: editorMenuButtonCss"> <div class="dxrd-editor-box-image-content" data-bind="template: { name: $data.imageTemplateName, if: ko.unwrap($data.imageTemplateName) }"></div> </div> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div>',
    'dx-collectioneditor': '<div class="dx-collectioneditor"> <div data-bind="dxdAccordion: { collapsed: collapsed, alwaysShow: alwaysShow }"> <div class="dx-collectioneditor-header dx-accordion-header"> <div class="dx-editor-header"> <div role="tab" class="dx-field dx-accessibility-focus-border-accented dxrd-accessibility-accordion-trigger" data-bind=", attr: {\'aria-expanded\': !collapsed() ? \'true\' : \'false\' }"> <!-- ko if: showButtons--> <div class="dx-collectioneditor-actions-wrapper"> <!-- ko if: isVisibleButton(\'up\') --> <div class="dx-collectioneditor-action dx-accessibility-focus-border-accented" data-bind="dxButtonWithTemplate: { onClick: up, disabled: isDisabledButton(\'up\'), icon: \'dxrd-svg-operations-moveup\', iconClass: \'dx-image-moveup\' }, attr: { title: getDisplayTextButton(\'up\') }"></div> <!-- /ko --> <!-- ko if: isVisibleButton(\'down\') --> <div class="dx-collectioneditor-action dx-accessibility-focus-border-accented" data-bind="dxButtonWithTemplate: { onClick: down, disabled: isDisabledButton(\'down\'), icon: \'dxrd-svg-operations-movedown\', iconClass: \'dx-image-movedown\' }, attr: { title: getDisplayTextButton(\'down\') }"></div> <!-- /ko --> <div class="dx-collectioneditor-action-separator"></div> <!-- ko if: isVisibleButton(\'add\') --> <div class="dx-collectioneditor-action dx-accessibility-focus-border-accented" data-bind="dxButtonWithTemplate: { onClick: add, disabled: isDisabledButton(\'add\'), icon: \'dxrd-svg-operations-add\', iconClass: \'dx-image-add\' }, attr: { title: getDisplayTextButton(\'add\') }"></div> <!-- /ko --> <!-- ko if: isVisibleButton(\'delete\') --> <div class="dx-collectioneditor-action dx-accessibility-focus-border-accented" data-bind="dxButtonWithTemplate: { onClick: remove, disabled: isDisabledButton(\'delete\'), icon: \'dxrd-svg-operations-remove\', iconClass: \'dx-image-remove\' }, attr: { title: getDisplayTextButton(\'delete\') }"></div> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: displayName --> <div class="dx-collectioneditor-header-text dxd-text-primary" data-bind="styleunit: { \'paddingLeft\': padding }"> <div class="propertygrid-editor-collapsed dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }"></div> <div class="dx-group-header-font dxd-text-primary" data-bind="text: displayName, attr: { title: displayName }"></div> </div> <!-- /ko --> </div> </div> </div> <div role="tabpanel" class="dx-accordion-content" data-bind="attr:{\'aria-hidden\': collapsed() ? \'true\' : \'false\'}"> <div data-bind="visible: !disabled(), dxScrollView: { showScrollbar: \'onHover\', disabled: !showScroll, useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }"> <!-- ko if: values().length === 0 && showButtons --> <div class="dx-collectioneditor-empty dxd-empty-area-placeholder-text-color dxd-text-info"> <span class="dx-collectioneditor-empty-text" data-bind="text: getDisplayTextEmptyArray()"></span> </div> <!-- /ko --> <!-- ko if: values().length !== 0 --> <div class="dx-collectioneditor-items" data-bind="foreach: values"> <div data-bind="with: $parent.createCollectionItemWrapper($parents[1], $index, $element)"> <div class="dx-collectioneditor-item-container dxd-button-back-color dxd-state-normal dxd-back-highlighted dx-accessibility-list-item dx-accessibility-focus-border-accented" data-bind="attr: { \'aria-selected\': $parents[1].selectedIndex() === $index() }, dxAction: { model: $data, action: $parents[1].select }, css: { \'dxd-state-selected\' : $parents[1].selectedIndex() === $index() }"> <div class="dx-collection-item"></div> </div> </div> </div> <!-- /ko --> </div> </div> </div> </div>',
    'dx-boolean': '<div class="propertygrid-editor-checkbox" data-bind="dxCheckBox: getOptions({ value: value, disabled: disabled, elementAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: validationRules || [] }"></div>',
    'dx-boolean-select': '<div data-bind="dxLocalizedSelectBox: { dataSource: [ { val: true, text: $root.getLocalization(\'Yes\', \'AnalyticsCoreStringId.ParametersPanel_True\') }, { val: false, text: $root.getLocalization(\'No\', \'AnalyticsCoreStringId.ParametersPanel_False\') }], inputAttr: { \'aria-label\': displayName }, valueExpr: \'val\', displayExpr: \'text\', value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }, dxValidator: { validationRules: validationRules || [] }"></div>',
    'dx-commonCollection': '<div class="dx-editor" data-bind="visible: visible"> <div data-bind="dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info }"> </div> </div>',
    'dx-commonCollectionItem': '<div data-bind="dxPropertyGrid: { target: value, level: editor.level + 1, parentDisabled: editor.disabled }"></div>',
    'item-with-title': '<div class="dx-listitem-with-title" data-bind="text: $data.display, attr: { title: $data.display }"></div>',
    'dx-combobox': '<div data-bind="dxLocalizedSelectBox: { dataSource: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, popupPosition: { boundary: $root.getPopupContainer($element) }, inputAttr: { \'aria-label\': displayName }}, dxValidator: getValidatorOptions($data.validatorOptions || { validationRules: validationRules || [] })"> </div>',
    'dx-combobox-editable': '<div data-bind="dxSelectBox: getOptions({ items: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', disabled: disabled, useItemTextAsTitle: true, placeholder: $root.dx._static.selectPlaceholder(), noDataText: $root.dx._static.noDataText(), acceptCustomValue: true, onCustomItemCreating: function(arg) { return { value: arg.text, displayValue: arg.text }; }, dropDownOptions: { container: $root.getPopupContainer($element) } })"></div>',
    'dx-combobox-undo': '<div data-bind="dxLocalizedSelectBox: { dataSource: values, value: generateValue($root.undoEngine), valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }, dxValidator: getValidatorOptions($data.validatorOptions || { validationRules: validationRules || [] })"> </div>',
    'dx-property-editor': '<div class="dx-editor" data-bind="visible: visible"> <div class="dx-group" data-bind="dxdAccordion: { collapsed: collapsed }"> <div class="dx-editor-header"> <div class="dx-field" data-bind="attr: { role: isComplexEditor && \'tab\', \'id\': isComplexEditor && getIdByDisplayName(\'dxrd-accordion-trigger\'), \'aria-controls\': isComplexEditor && getIdByDisplayName(\'dxrd-accordion-pannel\'), \'aria-expanded\': isComplexEditor && (!collapsed() ? \'true\' : \'false\') }, css: {\'dxrd-accessibility-accordion-trigger dx-accessibility-focus-border-accented\': isComplexEditor}"> <div class="dx-field-label dx-accordion-header dxd-text-primary" data-bind="styleunit: padding, css: { \'dx-accordion-empty\': templateName === \'dx-emptyHeader\' }"> <!-- ko if: isComplexEditor --> <div data-bind="enable: templateName === \'dx-emptyHeader\'"> <div class="propertygrid-editor-collapsed dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }"></div> <!-- ko if: !!$data.textToSearch --> <div class="dx-group-header-font" data-bind="searchHighlighting: { text: displayName, textToSearch: textToSearch }, attr: { \'title\': displayName }"></div> <!-- /ko --> <!-- ko ifnot: !!$data.textToSearch --> <div class="dx-group-header-font" data-bind="text: displayName, attr: { \'title\': displayName }"></div> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: !isComplexEditor --> <!-- ko if: !!$data.textToSearch --> <div class="propertygrid-editor-displayName" data-bind="searchHighlighting: { text: displayName, textToSearch: textToSearch }, attr: { \'title\': displayName }, css: { \'dx-field-label-required\': isRequired }, style: { fontWeight: isPropertyModified() ? \'Bold\' : \'\'}"></div> <!-- /ko --> <!-- ko ifnot: !!$data.textToSearch --> <div class="propertygrid-editor-displayName" data-bind="text: displayName, attr: { \'title\': displayName }, css: { \'dx-property-required\': isRequired }, style: { fontWeight: isPropertyModified() ? \'Bold\' : \'\'}"></div> <!-- /ko --> <!-- /ko --> </div> <div class="dx-field-value" data-bind="css: { \'dxd-border-accented\': $data.isPropertyHighlighted }"> <div data-bind="service: { name: \'createEditorAddOn\' }"></div> <!-- ko if: templateName !== \'dx-emptyHeader\' --> <!-- ko lazy: { innerBindings: { template: templateName }, isResolved: $data.isRendered } --> <!-- /ko --> <!-- /ko --> </div> </div> </div> <!-- ko if: isComplexEditor --> <div class="dx-editor-content dx-accordion-content" role="tabpanel" data-bind="attr:{\'aria-labelledby\': getIdByDisplayName(\'dxrd-accordion-trigger\'), \'id\': getIdByDisplayName(\'dxrd-accordion-pannel\'), \'aria-hidden\': collapsed() ? \'true\' : \'false\' }"> <!-- ko if: (!$data.editorCreated || editorCreated) --> <!-- ko template: contentTemplateName --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> </div> </div>',
    'dx-emptyHeader': ' ',
    'dx-date': '<div class="dx-datebox-container"> <div data-bind=" dxDateBox: getOptions({ value: value, closeOnValueChange: true, type: \'datetime\', disabled: disabled, inputAttr: { \'aria-label\': displayName }, dropDownOptions: { container: $root.getPopupContainer($element), position: { at: \'left bottom\', collision: \'flipfit flip\', my: \'left top\', boundary: $root.getPopupContainer($element), of: $element } } }), dxValidator: { validationRules: validationRules || [] }"></div> </div>',
    'dx-file': '<div data-bind="dxFileImagePicker: { value: value, placeholderId: \'File\', disabled: disabled }"></div>',
    'dx-modificators': '<div class="dx-font-content"> <div class="dx-field"> <div class="dx-field-label dxd-text-primary" data-bind="styleunit: { \'paddingLeft\': padding }"></div> <!-- ko with: value --> <div class="dx-field-value"> <div class="dx-font-styles-content"> <div class="dx-font-style-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dx-image-fontstyle-bold" data-bind="css: { \'dxd-state-active\': bold(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!$parent.disabled()) { bold(!bold()); } }"><!-- ko template: \'dxrd-svg-fontstyle-bold\'--><!-- /ko --></div> <div class="dx-font-style-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dx-image-fontstyle-italic" data-bind="css: { \'dxd-state-active\': italic(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!$parent.disabled()) { italic(!italic()); } }"><!-- ko template: \'dxrd-svg-fontstyle-italic\'--><!-- /ko --></div> <div class="dx-font-style-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dx-image-fontstyle-underline" data-bind="css: { \'dxd-state-active\': underline(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!$parent.disabled()) { underline(!underline()); } }"><!-- ko template: \'dxrd-svg-fontstyle-underline\'--><!-- /ko --></div> <div class="dx-font-style-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dx-image-fontstyle-strikeout" data-bind="css: { \'dxd-state-active\': strikeout(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!$parent.disabled()) { strikeout(!strikeout()); } }"><!-- ko template: \'dxrd-svg-fontstyle-strikeout\'--><!-- /ko --></div> </div> </div> <!-- /ko --> </div> </div>',
    'dx-image': '<div data-bind="dxFileImagePicker: { value: value, placeholderId: \'Image\', accept: \'image/*\', type: \'img\', disabled: disabled }"></div>',
    'dx-numeric': '<div data-bind="dxNumberBox: getOptions({ value:value, showSpinButtons:true, disabled:disabled, inputAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: validationRules || [] }"></div>',
    'dx-number-editor': '<div data-bind="dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: validationRules || [] }"></div>',
    'dx-text': '<!-- ko if: $data.validationRules --> <div data-bind="dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName }}), dxValidator: getValidatorOptions($data.validatorOptions || { validationRules: validationRules || [] })"></div> <!-- /ko --> <!-- ko if: !$data.validationRules --> <div data-bind="dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName }})"></div> <!-- /ko -->',
    'dx-string-array': '<div class="dx-field" data-bind="css: { \'dxd-border-accented\': $data.isPropertyHighlighted }"> <div class="dx-string-array-container dx-texteditor dx-editor-outlined dx-multiline"> <textarea class="dx-string-array-textarea dx-texteditor-input" data-bind="value: value, disable: disabled"></textarea> </div> </div>',
    'dx-propertieseditor': '<div data-bind="css: { \'dx-rtl\' : rtl }"> <div class="dx-editors"> <div class="dx-fieldset"> <!-- ko foreach: getEditors() --> <!-- ko template: editorTemplate --> <!-- /ko --> <!-- /ko --> </div> </div> </div>',
    'dx-objectEditorContent': '<!-- ko if: visible --> <div data-bind="template: { name: \'dx-propertieseditor\', data: viewmodel }"></div> <!-- /ko -->',
    'dx-expressioneditor-main': '<div class="dx-expression-tree"> <!-- ko if: !aceAvailable --> <div class="dx-expressioneditor-textarea dxd-border-secondary dxd-back-primary2" data-bind="dxTextArea: { value: textAreaValue, isValid: isValid, spellcheck: false, onKeyUp: function() { isValid(true); } }"></div> <!-- /ko --> <!-- ko if: aceAvailable --> <div class="dx-expressioneditor-textarea dxd-border-secondary dxd-back-primary2" data-bind="dxAceEditor: { value: textAreaValue, editorContainer: editorContainer, theme: theme, options: aceOptions, additionalOptions: additionalOptions, callbacks: callbacks }"></div> <!-- /ko --> <div class="dx-expressioneditor-tools"> <!-- ko with: tools--> <div class="dx-expressioneditor-tools-tabs"> <!-- ko foreach: toolBox--> <div class="dx-expressioneditor-tools-tab dxd-back-primary2" data-bind="style: { width: width }, visible: visible"> <!-- ko if: $data.templateName --> <!-- ko template: { name: $data.templateName }--> <!-- /ko --> <!-- /ko --> </div> <!-- /ko--> </div> <!-- /ko--> </div> </div>',
    'dx-expressioneditor': '<div> <div class="no-margin-right" data-bind="dxEllipsisEditor: { value: displayValue, buttonAction: function() { popupVisible(true); }, disabled: disabled, isValid: modelValueValid, warningMessage: modelValueWarning }"></div> <!-- ko template: \'dx-expressioneditor-popup\'--> <!--/ko--> </div>',
    'dx-expressioneditor-popup': '<div data-bind="dxPopup: { showTitle: true, wrapperAttr: { class: \'dx-expressioneditor dx-popup-general\' }, title: title(), visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, fullScreen: false, maxHeight: \'600px\', height: \'90%\', width: \'645px\', container: getPopupContainer($element), position: { of: getPopupContainer($element)}, onShowing: onShowing, onHiding: onHiding, onShown: onShown }"> <!-- ko if: popupVisible --> <div data-bind="dxScrollView: { showScrollbar: \'onHover\', height: \'100%\', width: \'100%\' }"> <!-- ko template: "dx-expressioneditor-main" --> <!-- /ko --> </div> <!-- /ko --> </div>',
    'dx-expressioneditor-categories': '<div class="dx-expressioneditor-tools-tab-content-wrapper dxd-border-secondary " data-bind="dxScrollView: { showScrollbar: \'onHover\' }"> <!-- ko foreach: content --> <!-- ko if: $data.templateName --> <!-- ko template: $data.templateName--> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: $data.templateName --> <div class="dx-expressioneditor-tools-tab-category dxd-list-item-back-color dxd-back-highlighted" data-bind="css: {\'dxd-state-selected\': content.isSelected }, text: displayName, dxclick: function() { $parent.click($data.content) }"> </div> <!-- /ko --> <!-- /ko --> </div>',
    'dx-expressioneditor-category-accordion': '<div class="dx-fieldset" style="margin: 0;"> <div data-bind="dxdAccordion: { collapsed: collapsed }"> <div class="dx-accordion-header dx-expressioneditor-tools-tab-accordion-header dxd-list-item-back-color dxd-back-highlighted" data-bind="css: {\'dxd-state-selected\': $data.isSelected }, dxclick: function() { $data.updateContent($data.allItems(), $data.isSelected); $parent.click($data.content) }"> <div class=" dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }" style="display:inline-block;"></div> <span class="dx-expressioneditor-tools-tab-header" data-bind="text: displayName"></span> </div> <div class="dx-accordion-content"> <!-- ko foreach: items--> <div class="dx-expressioneditor-tools-tab-item dxd-text-primary dxd-list-item-back-color dxd-back-highlighted" data-bind="css: {\'dxd-state-selected\': isSelected }, text: $data.display, dxclick: function() { $parent.updateContent($data.data, $data.isSelected); $parents[1].click($parent.content); }"></div> <!-- /ko --> </div> </div> </div>',
    'dx-expressioneditor-description': '<div class="dx-expressioneditor-tools-tab-content-wrapper dxd-border-secondary " data-bind="dxScrollView: { showScrollbar: \'onHover\' }"> <div class="dx-expressioneditor-description dxd-text-primary" data-bind="text: content"></div> </div>',
    'dx-expressioneditor-fields': '<div class="dx-expressioneditor-fields"> <div data-bind="treeListSearchPanel: { controllers: [ ko.unwrap($data.parameters) ? ko.unwrap($data.parameters).treeListController : ko.unwrap($data.parameters), ko.unwrap($data.fields) ? ko.unwrap($data.fields).treeListController : ko.unwrap($data.fields) ] }"> </div> <div class="dx-expressioneditor-tools-tab-content-wrapper dxd-border-secondary " data-bind="dxScrollView: { showScrollbar: \'onHover\' }"> <!-- ko if: fields --> <div class="dx-treelist-wrapper" data-bind="treelist: fields"></div> <!-- /ko --> <!-- ko if: $data.parameters --> <div class="dx-treelist-wrapper" data-bind="treelist: parameters"></div> <!-- /ko --> </div> </div>',
    'dx-ee-treelist-item': '<div class="dx-treelist-item dxd-list-item-back-color dxd-back-highlighted" data-bind="visible: visible, event: { dblclick: function() { actions[0].clickAction($element); }}, styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected\': isSelected }"> <div class="dx-treelist-item-images"> <!-- ko if: hasItems --> <div class="dx-treelist-collapsedbutton" data-bind="css: nodeImageClass, template: \'dxrd-svg-collapsed\', click: toggleCollapsed"></div> <!-- /ko --> <!-- ko ifnot: hasItems --> <div class="dx-treelist-collapsedbutton"></div> <!-- /ko --> <div class="dx-treelist-image" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: text }"> </div> </div> <div class="dx-treelist-caption"> <div class="dx-treelist-selectedcontent" data-bind="click: toggleSelected"> <!-- ko template: { name: \'dx-treelist-item-text-content\' } --> <!-- /ko --> </div> </div> </div>',
    'dx-expressioneditor-selectedcontent': '<!-- ko with: content --> <!-- ko template: $data--> <!-- /ko --> <!-- /ko -->',
    'dx-expressioneditor-collection': '<div class="dx-expressioneditor-tools-tab-content-wrapper dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\' }"> <!-- ko foreach: items --> <div data-bind="attr: { class: \'dx-expressioneditor-tools-tab-item dxd-list-item-back-color dxd-text-primary dxd-back-highlighted \' + ($data.class ? $data.class : \'\') }, text: $data.displayName || $data.text, css: { \'dx-expressioneditor-state-selected dxd-state-selected\': $parent.selectedItem() === $data }, dxclick: function() { $parent.selectedItem($data); $parents[2].click($data); }, event: { dblclick: function() { $parents[2].dblclick($data, $element); } }"></div> <!-- /ko --> </div>',
    'dx-expressioneditor-collection-function': '<div class="dx-expressioneditor-collection-function"> <div class="dx-expressioneditor-collection-function-search"> <div data-bind="dxTextBox: { value: textToSearch, showClearButton: true, valueChangeEvent: \'keyup\', placeholder: $parents[2].searchPlaceholder() }"></div> </div> <div class="dx-expressioneditor-collection-function-items dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\' }"> <!-- ko foreach: availableItems --> <div class="dx-expressioneditor-tools-tab-item dxd-list-item-back-color dxd-text-primary dxd-back-highlighted" data-bind="css: { \'dx-expressioneditor-state-selected dxd-state-selected\': $parent.selectedItem() === $data }, dxclick: function() { $parent.selectedItem($data); $parents[2].click($data); }, event: { dblclick: function() { $parents[2].dblclick($data, $element); } }, searchHighlighting: { text: $data.displayName || $data.text, textToSearch: $parent.textToSearch }"></div> <!-- /ko --> </div> </div>',
    'dx-filtereditor-content': '<div class="dx-filtereditor-tree-container" data-bind="css: { \'advanced\': advancedMode }"> <!-- ko template: \'dx-filtereditor-content-tree\' --> <!-- /ko --> </div> <div class="dx-filtereditor-text-container" data-bind="css: { \'advanced\': advancedMode }, visible: textVisible"> <!-- ko template: \'dx-filtereditor-content-text\'--> <!-- /ko --> </div>',
    'dx-filtereditor-content-plain': '<div class="dx-filtereditor-plain-advanced" data-bind="dxCheckBox: { value: advancedMode, text: advancedModeText }"></div> <div class="dx-filtereditor-plain-content" data-bind="style: { height: plainContentHeightPerc }"> <div class="dx-filtereditor-text-container" data-bind="css: { \'advanced\': advancedMode }, style: { height: textContentHeightPerc }"> <!-- ko template: \'dx-filtereditor-content-text\'--> <!-- /ko --> </div> <div class="dx-filtereditor-tree-container" data-bind="css: { \'advanced\': advancedMode }, style: { height: treeContentHeightPerc }"> <!-- ko template: \'dx-filtereditor-content-tree\' --> <!-- /ko --> </div> </div>',
    'dx-filtereditor-content-text': '<!-- ko if: !aceAvailable --> <div class="dx-filtereditor-text" data-bind="dxTextArea: { value: displayValue, isValid: isValid, onInput: onInput, spellcheck: false }, cacheElement: { action: function(element) { cacheElement(element) } }"></div> <!-- /ko --> <!-- ko if: aceAvailable --> <div class="dx-filtereditor-text dx-texteditor dx-textarea dx-editor-outlined" data-bind="css: {\'dx-invalid\': !$data.isValid(), \'dx-state-focused\': textFocused }"> <div class="dx-texteditor-container"> <div class="dx-filtereditor-ace dxd-back-primary2" data-bind="dxAceEditor: { value: $data.displayValue, theme: helper.aceTheme, editorContainer: editorContainer, options: aceOptions, additionalOptions: additionalOptions }"></div> <div class="dx-texteditor-buttons-container"></div> </div> </div> <!-- /ko -->',
    'dx-filtereditor-content-tree': '<div class="dx-filtereditor-tree dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', direction: \'both\' }"> <!-- ko with: operandSurface --> <!-- ko template: { name: $data.templateName, data: $data, if: $parent.isSurfaceValid }--> <!-- /ko --> <!-- /ko --> </div> <!-- ko ifnot: isSurfaceValid --> <div class="dx-filtereditor-tree-lockscreen" data-bind="dxclick: function() { $data.advancedMode(true); }"> <div class="dx-filtereditor-tree-lockscreen-content"> <div class="dx-filtereditor-tree-lockscreen-content-text" data-bind="text: invalidMessage()"> </div> </div> </div> <!-- /ko -->',
    'dx-filtereditor': '<div> <div class="no-margin-right" data-bind="dxEllipsisEditor: { value: modelDisplayValue, isValid: modelValueIsValid, disabled: disabled, buttonAction: function() { popupVisible(true); } }"></div> <!-- ko template: \'dx-filtereditor-popup\' --> <!-- /ko --> </div>',
    'dx-filtereditor-advanced': '<div class="dx-filtereditor" style="width: 100%; height: 100%;" data-bind="style: { pointerEvents: $data.options().disabled() ? \'none\' : \'\' }"> <!-- ko template: \'dx-filtereditor-content\' --> <!-- /ko --> <!-- ko template: \'dx-filtereditor-content-popups\' --> <!-- /ko --> </div>',
    'dx-filtereditor-plain': '<div class="dx-filtereditor" style="width: 100%; height: 100%;" data-bind="style: { pointerEvents: $data.options().disabled() ? \'none\' : \'\' }"> <!-- ko template: \'dx-filtereditor-content-plain\' --> <!-- /ko --> <!-- ko template: \'dx-filtereditor-content-popups\' --> <!-- /ko --> </div>',
    'dx-filtereditor-aggregate-common': '<!-- ko with: property--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> <div data-bind="service: { name: \'createChangeType\' }"></div> <!-- ko if: $data.aggregatedExpression() --> <div class="criteria-operator-text dxd-filter-editor-text-color">(</div> <!-- ko with: aggregatedExpression--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> <div class="criteria-operator-text dxd-filter-editor-text-color">)</div> <!-- /ko -->',
    'dx-filtereditor-aggregate': '<div class="criteria-operator-group"> <div class="criteria-operator-group-item"> <div class="criteria-operator-action" data-bind="dxclick: function() {  $data.remove && $data.remove(); }"> <div class="criteria-operator-action-image dx-image-filtereditor-remove" data-bind="visible: !!$data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> </div> <!-- ko template: { name: \'dx-filtereditor-aggregate-common\' }--> <!-- /ko --> </div> <div class="criteria-operator-content"> <!-- ko with: condition--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dx-filtereditor-between': '<div class="criteria-operator-group"> <div class="criteria-operator-group-item"> <div class="criteria-operator-action" data-bind="dxclick: function() {  $data.remove && $data.remove(); }"> <div class="criteria-operator-action-image dx-image-filtereditor-remove" data-bind="visible: !!$data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> </div> <!-- ko with: property--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> <div data-bind="service: { name: \'createChangeType\' }"></div> <!-- ko with: begin--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> <div class="criteria-operator-text dxd-filter-editor-text-color">and</div> <!-- ko with: end--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dx-filtereditor-binary': '<div class="criteria-operator-group"> <div class="criteria-operator-group-item"> <div class="criteria-operator-action" data-bind="dxclick: function() {  $data.remove && $data.remove(); }"> <div class="criteria-operator-action-image dx-image-filtereditor-remove" data-bind="visible: !!$data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> </div> <!-- ko with: leftOperand--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> <div data-bind="service: { name: \'createChangeType\' }"></div> <!-- ko with: rightOperand--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dx-filtereditor-common': '<!-- ko template: contentTemplateName --> <!-- /ko --> <!-- ko if: $data.leftPart && $data.leftPart.condition --> <div class="criteria-operator-content"> <!-- ko with: leftPart--> <!-- ko with: condition--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko -->',
    'dx-filtereditor-function-lightweight': '<div class="criteria-operator-text dxd-filter-editor-text-color" data-bind="css: css"> <div class="criteria-operator-text dxd-filter-editor-text-color" data-bind="text: displayType"></div> <div data-bind="service: { name: \'createChangeValueType\' }"></div> </div>',
    'dx-filtereditor-function': '<div class="criteria-operator-group"> <div class="criteria-operator-group-item"> <div class="criteria-operator-action" data-bind="dxclick: function() {  $data.remove && $data.remove(); }"> <div class="criteria-operator-action-image dx-image-filtereditor-remove" data-bind="visible: !!$data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> </div> <!-- ko template: { name: $data.leftPart.templateName, data: $data.leftPart }--> <!-- /ko --> <div data-bind="service: { name: \'createChangeType\' }"></div> <!-- ko foreach: rightPart --> <!-- ko template: { name: $data.templateName, data: $data }--> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dx-filtereditor-group': '<div class="criteria-operator-group"> <div class="criteria-operator-group-item"> <div class="criteria-operator-action" data-bind="dxclick: function() {  $data.remove && $data.remove(); }"> <div class="criteria-operator-action-image dx-image-filtereditor-remove" data-bind="visible: !!$data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> </div> <div class="criteria-operator-item"> <div data-bind="service: { name: \'createChangeType\' }"></div> </div> <div data-bind="service: { name: \'createAddButton\' }"></div> </div> <div class="criteria-operator-content"> <!-- ko foreach: operands --> <!-- ko template: { name: templateName, data: $data } --> <!-- /ko--> <!-- /ko --> </div> </div>',
    'dx-filtereditor-in': '<div class="criteria-operator-group"> <div class="criteria-operator-group-item"> <div class="criteria-operator-action" data-bind="dxclick: function() {  $data.remove && $data.remove(); }"> <div class="criteria-operator-action-image dx-image-filtereditor-remove" data-bind="visible: !!$data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> </div> <!-- ko with: criteriaOperator--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> <div data-bind="service: { name: \'createChangeType\' }"></div> <!-- ko if: $data.operands().length > 1--> <div class="criteria-operator-item criteria-operator-text dxd-filter-editor-text-color">(</div> <div class="criteria-operator-item"> <!-- ko foreach: $data.operands() --> <!-- ko template: { name: $data.templateName, data: $data }--> <!-- /ko --> <div class="criteria-operator-item criteria-operator-text dxd-filter-editor-text-color">,</div> <!-- /ko --> </div> <div class="criteria-operator-item criteria-operator-text dxd-filter-editor-text-color">)</div> <!-- /ko --> <!-- ko if: $data.operands().length == 1--> <!-- ko template: { name: $data.operands()[0].templateName, data: $data.operands()[0] }--> <!-- /ko --> <!-- /ko --> <div class="criteria-operator-action" data-bind="dxclick: addValue"> <div class="criteria-operator-action-image dx-image-filtereditor-add"><!-- ko template: \'dxrd-svg-filtereditor-add\' --><!-- /ko --></div> </div> </div> </div>',
    'dx-filtereditor-parameter': '<div class="criteria-operator-text dxd-filter-editor-text-color" data-bind="css: css"> <div data-bind="service: { name: \'createChangeParameter\' }"></div> <!-- ko if: $data.canChange --> <div data-bind="service: { name: \'createChangeValueType\' }"></div> <!-- /ko --> </div>',
    'dx-filtereditor-property': '<div class="criteria-operator-text dxd-filter-editor-text-color" data-bind="css: css"> <div data-bind="service: { name: \'createChangeProperty\' }"></div> <!-- ko if: $data.canChange --> <div data-bind="service: { name: \'createChangeValueType\' }"></div> <!-- /ko --> </div>',
    'dx-filtereditor-unary': '<!-- ko if: $data.operand().reverse --> <!-- ko template: {name: $data.operand().templateName, data: $data.operand() }--> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: $data.operand().reverse --> <div class="criteria-operator-group"> <div class="criteria-operator-group-item"> <div class="criteria-operator-action" data-bind="dxclick: function() {  $data.remove && $data.remove(); }"> <div class="criteria-operator-action-image dx-image-filtereditor-remove" data-bind="visible: !!$data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> </div> <!-- ko with: operand--> <div class="criteria-operator-item"> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> </div> <!-- /ko --> <div data-bind="service: { name: \'createChangeType\' }"></div> </div> </div> <!-- /ko -->',
    'dx-filtereditor-not': '<!-- ko with: operand--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko -->',
    'dx-filtereditor-value': '<div class="criteria-operator-item" data-bind="visible: isEditable"> <!-- ko if: $data.items.length === 0 --> <!-- ko if: $data.specifics() === "string" || $data.specifics() === "guid" --> <div class="criteria-operator-item-editor" data-bind="dxTextBox: { value: _value, onFocusOut: function() { isEditable(false); } }, focus: { on: isEditable }"></div> <!-- /ko --> <!-- ko if: $data.specifics() === "bool" --> <div class="criteria-operator-item-editor" data-bind="focus: isEditable, dxLocalizedSelectBox: { dataSource: [ { val: \'True\', text: \'Yes\', localizationId: \'AnalyticsCoreStringId.ParametersPanel_True\' }, { val: \'False\', text: \'No\', localizationId: \'AnalyticsCoreStringId.ParametersPanel_False\' }], valueExpr: \'val\', displayExpr: \'text\', value: _value, onFocusOut: function() { isEditable(false); }, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div> <!-- /ko --> <!-- ko if: $data.specifics() === "date" --> <div class="criteria-operator-item-editor" data-bind="focus: isEditable, dxDateBox: { value: _value, closeOnValueChange: true, type: \'date\', onFocusOut: function() { isEditable(false); }, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div> <!-- /ko --> <!-- ko if: $data.specifics() !== "string" && $data.specifics() !== "bool" && $data.specifics() !== "date" && $data.specifics() !== "guid" --> <div class="criteria-operator-item-editor" data-bind="dxTextBox: getNumberEditorOptions(), focus: { on: isEditable }"></div> <!-- /ko --> <!-- /ko --> <!-- ko if: $data.items.length > 0 && typeof $data.items[0] === "object" --> <div class="criteria-operator-item-editor" data-bind="focus: isEditable, dxSelectBox: { value: _value, dataSource: dataSource, valueExpr: \'value\', displayExpr: \'display\', useItemTextAsTitle: true, searchEnabled: true, onFocusOut: function() { isEditable(false); }}, dropDownOptions: { container: $root.getPopupContainer($element) }"></div> <!-- /ko --> <!-- ko if: $data.items.length > 0 && typeof $data.items[0] !== "object" --> <div class="criteria-operator-item-editor" data-bind="focus: isEditable, dxSelectBox: { value: _value, dataSource: dataSource, acceptCustomValue: true, searchEnabled: true, useItemTextAsTitle: true, onFocusOut: function() { isEditable(false); }, dropDownOptions: { container: $root.getPopupContainer($element) }}"></div> <!-- /ko --> </div> <div class="criteria-operator-text dxd-filter-editor-text-color criteria-operator-item-value dxd-filter-editor-value-back-color" data-bind="visible: !isEditable()"> <div class="criteria-operator-text dxd-filter-editor-text-color clickable" data-bind="text: value, click: function() { isEditable(true); }, css: { \'default\': $data.isDefaultDisplay() } "></div> <div data-bind="service: { name: \'createChangeValueType\' }"></div> </div>',
    'dx-filtereditor-popup': '<div data-bind="dxPopup: { showTitle: true, wrapperAttr: { class: \'dx-filtereditor dx-popup-general\' }, width: \'95%\', height: \'95%\', title: options() && options().title(), visible: popupVisible, onShown: function() { $data.focusText() }, toolbarItems: buttonItems, showCloseButton: true, container: getPopupContainer($element), position: { of: getPopupContainer($element) } }"> <!-- ko template: \'dx-filtereditor-content\' --> <!-- /ko --> </div> <!-- ko template: \'dx-filtereditor-content-popups\' --> <!-- /ko -->',
    'dx-filtereditor-create': '<div class="criteria-operator-action" data-bind="dxclick: showPopup"> <div class="criteria-operator-action-image dx-image-filtereditor-add"><!-- ko template: \'dxrd-svg-filtereditor-add\' --><!-- /ko --></div> </div>',
    'dx-filtereditor-change': '<div class="criteria-operator-text dxd-filter-editor-text-color clickable" data-bind="text: target.displayType, dxclick: showPopup, css: target.css"></div>',
    'dx-filtereditor-changeParameter': '<div class="criteria-operator-text dxd-filter-editor-text-color clickable " data-bind="text: target.parameterName(), dxclick: showPopup, css: { \'dxd-state-selected\': target.isSelected }"></div>',
    'dx-filtereditor-changeProperty': '<div class="criteria-operator-text dxd-filter-editor-text-color clickable" data-bind="text: target.displayName, dxclick: showPopup, css: { \'dxd-state-selected\': target.isSelected }"></div>',
    'dx-filtereditor-changeValueType': '<div class="criteria-operator-action" data-bind="dxclick: showPopup"> <div class="criteria-operator-action-image-edit dx-image-filtereditor-edit"><!-- ko template: \'dxrd-svg-filtereditor-edit\' --><!-- /ko --></div> </div>',
    'dx-filtereditor-content-popups': '<div class="dx-selectbox-popup-wrapper dx-dropdownlist-popup-wrapper dx-filtereditor-criteriaoperator-popup dx-dropdowneditor-overlay" data-bind="dxPopupWithAutoHeight: { minWidth:\'170px\', maxWidth:\'500px\', width: \'auto\', height: \'300px\', wrapperAttr: { class: \'dx-selectbox-popup-wrapper dx-dropdownlist-popup-wrapper dx-filtereditor-criteriaoperator-popup dx-dropdowneditor-overlay\' }, focusStateEnabled: false, position: $data.rtl ? { my: \'right top\', at: \'right bottom\', of: popupService.target} : { my: \'left top\', at: \'left bottom\', of: popupService.target }, container: options().popupContainer, target: popupService.target, showTitle: false, showCloseButton: false, animation: {}, closeOnOutsideClick: true, shading: false, visible: popupService.visible }"> <!-- ko with: popupService--> <!-- ko with: data --> <!-- ko template: template--> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div>',
    'dx-filtereditor-search-panel': '<div class="dx-filtereditor-popup-item dx-filtereditor-search dx-item dx-list-item dxd-list-item-back-color dxd-back-highlighted"> <div class="dx-item-content dxd-border-secondary dxd-text-primary dx-list-item-content" data-bind="dxTextBox: { activeStateEnabled:false, focusStateEnabled:false, hoverStateEnabled:false, placeholder: searchPlaceholder(), value: ($data.value || $data.filterString), height: \'100%\', stylingMode: \'underlined\', valueChangeEvent: \'keyup\' }"> </div> </div>',
    'dx-filtereditor-popup-common': '<!-- ko if: $data.isFiltered --> <div data-bind="template: { name: \'dx-filtereditor-search-panel\', data: $data }"></div> <!-- /ko --> <div class="dx-widget" data-bind="dxScrollView: { showScrollbar: \'onHover\' }, style: {\'height\': $data.height }"> <!-- ko foreach: data --> <!-- ko if: !$data.hidden --> <!-- ko ifnot: $parent.isFiltered --> <div class="dx-filtereditor-popup-item dx-item dx-list-item dxd-list-item-back-color dxd-back-highlighted"> <span class="dx-item-content dx-list-item-content" data-bind="text: $data.displayText || $data.name, click: function() { $parent.click($data); } "></span> </div> <!-- /ko --> <!-- ko if: $parent.isFiltered --> <div class="dx-filtereditor-popup-item dx-item dx-list-item dxd-list-item-back-color dxd-back-highlighted"> <div class="dx-item-content dx-list-item-content" data-bind="searchHighlighting: { text: $data.displayText || $data.name, textToSearch: $parent.filterString }, click: function() { $parent.click($data); } "> </div> </div> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div>',
    'dx-filtereditor-popup-treelist': '<div class="dx-filtereditor-search" data-bind="treeListSearchPanel: { controllers: data().treeListController, template: \'dx-filtereditor-search-panel\' } "></div> <div class="dx-widget" data-bind="dxScrollView: { showScrollbar: \'onHover\' }, style: {\'height\': $data.height} "> <div class="dx-treelist-wrapper" data-bind="treelist: data"></div> </div>',
    'dx-format-string-list': '<div class="dx-format-string-list dxd-format-string-editor-border-color dxd-border-secondary"> <div data-bind="dxList: { items: $data.items, selectedItems: $data.selectedItems, onItemClick: $data.action, selectionMode: \'single\', activeStateEnabled: false }"> <div data-options="dxTemplate: { name: \'item\' }" class="dx-theme-border-color"> <div class="dx-image-filtereditor-remove" data-bind="click: $parent.removeItem, visible: $data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> <div class="dx-format-string-list-item" data-bind="text: $data.displayName"></div> </div> </div> </div>',
    'dx-format-string-edit-area': '<div class="dx-format-string-content-area-title dxd-text-primary" data-bind="text: getDisplayText(\'types\')"></div> <div class="dx-format-string-formats"> <!-- ko template: { name: \'dx-format-string-list\', data: { items: patternList, action: setFormat, removeItem: removeCustomFormat, selectedItems: selectedFormats } } --> <!-- /ko --> <div class="dx-format-string-customization"> <div class="dx-format-string-customization-add" data-bind="dxButton:{ onClick: addCustomFormat, text: getDisplayText(\'add\'), disabled: !canAddCustomFormat() }"></div> <div class="dx-format-string-customization-value dx-format-string-value dxd-back-primary" data-bind="dxTextBox: { value: formatResult, onInput: function(e) { updateInputText(\'formatResult\', e.component); }  }"></div> </div> </div>',
    'dx-format-string-edit-area-general': '<div class="dx-format-string-content-area-title dxd-text-primary" data-bind="text: getDisplayText(\'prefix\')"></div> <div class="dx-format-string-customization-general-value dx-format-string-value" data-bind="dxTextBox: { value: formatPrefix, onInput: function(e) { updateInputText(\'formatPrefix\', e.component); } }"></div> <div class="dx-format-string-content-area-title dxd-text-primary" data-bind="text: getDisplayText(\'suffix\')"></div> <div class="dx-format-string-customization-general-value dx-format-string-value" data-bind="dxTextBox: { value: formatSuffix, onInput: function(e) { updateInputText(\'formatSuffix\', e.component); } }"></div>',
    'dx-format-string': '<div> <div class="no-margin-right" data-bind="dxEllipsisEditor: { value: value, disabled: disabled, buttonAction: function() { popupVisible(true); } }"></div> <div data-bind="dxPopup: { wrapperAttr: { class: \'dx-format-string dx-popup-general\' }, showTitle: true, width: \'95%\', height: \'95%\', minWidth: 650, title: getDisplayText(\'title\'), visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, container: getPopupContainer($element), position: { of: getPopupContainer($element) } }"> <div class="dx-format-string-content"> <div class="dx-format-string-content-area-left"> <div class="dx-format-string-content-area-title dxd-text-primary" data-bind="text: getDisplayText(\'category\')"></div> <!-- ko template: { name: \'dx-format-string-list\', data: { items: types, action: setType, selectedItems: selectedTypes } } --> <!-- /ko --> </div> <div class="dx-format-string-content-area-right"> <!-- ko if: !isGeneralType --> <!-- ko template: \'dx-format-string-edit-area\' --> <!-- /ko --> <!-- /ko --> <!-- ko if: isGeneralType --> <!-- ko template: \'dx-format-string-edit-area-general\' --> <!-- /ko --> <!-- /ko --> <div class="dx-format-string-preview-area" data-bind="css: { \'dx-format-general\': isGeneralType }"> <div class="dx-format-string-preview-area-caption dxd-text-primary" data-bind="text: getDisplayText(\'preview\')"></div> <div class="dx-format-string-preview-value dxd-format-string-editor-border-color dxd-text-primary dxd-back-primary dxd-border-secondary"> <span class="dx-format-string-preview-value-inner" data-bind="text: previewString"></span> </div> </div> </div> </div> </div> </div>',
    'dx-treelist-item-actions': '<!-- ko foreach: actions --> <!-- ko if: $data.templateName --> <!-- ko template: templateName  --> <!-- /ko --> <!-- /ko --> <!-- ko if: !$data.templateName --> <div class="dx-treelist-action" data-bind="dxButtonWithTemplate: { onClick: function() { clickAction($parent); }, icon: ko.unwrap($data.imageTemplateName), iconClass: $data.imageClassName, visible: (ko.unwrap($data.visible) == undefined) || ko.unwrap($data.visible), disabled: $data.disabled && $data.disabled() }, attr: { title: $data.displayText && $data.displayText() || text }"></div> <!-- /ko --> <!-- /ko -->',
    'dx-treelist-edit-action': '<div class="dx-treelist-action-edit dx-accordion-button" data-bind="dxButtonWithTemplate: { icon: \'dxrd-svg-operations-edit\', iconClass: \'dx-image-edit\',  onClick: function() { $parent.collapsed(!$parent.collapsed()); } }, visible: $parent.hasContent, attr: { title: $data.displayText() }"></div>',
    'dx-treelist-item-actions-with-edit': '<!-- ko template: { name: \'dx-treelist-edit-action\', data: treeListEditAction() }  --> <!-- /ko --> <!-- ko template: \'dx-treelist-item-actions\'  --> <!-- /ko -->',
    'dx-treelist-item-ellipsis': '<div class="dx-treelist-item dxd-list-item-back-color dxd-back-highlighted" data-bind="styleunit: padding, click: renderNext"> <div class="dx-treelist-collapsedbutton"></div> <div class="dx-treelist-caption"> <div class="dx-treelist-selectedcontent"> <div class="dx-treelist-text-wrapper"> <div class="dx-treelist-ellipsis-text dxd-text-accented dxd-hyperlink-color" data-bind="text: $data.text()"></div> </div> </div> </div> </div>',
    'dx-treelist-item': '<!-- ko if: visible --> <!-- ko if: hasContent --> <!-- ko template: "dx-treelist-accordion-item" --> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: hasContent --> <!-- ko template: "dx-treelist-header-item" --> <!-- /ko --> <!-- /ko --> <!-- /ko -->',
    'dx-treelist-accordion-item': '<div data-bind="dxdAccordionExt: { collapsed: collapsed, lazyContentRendering: true }"> <!-- ko template: "dx-treelist-header-item" --> <!-- /ko --> <div class="dx-fieldset dx-accordion-content dxd-back-primary"> <!-- ko with: data --> <!-- ko template: { name: contenttemplate } --> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dx-treelist-header-item': '<div role="treeitem" class="dx-treelist-item dxd-list-item-back-color dxd-back-highlighted dx-accessibility-treelist-item dx-accessibility-focus-border-accented" data-bind="event: { dblclick: function() { $data.dblClickHandler ? $data.dblClickHandler($data) : $data.toggleCollapsed() } }, styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected\': isSelected() || isMultiSelected() }, attr: { \'aria-expanded\': (hasItems && (!collapsed() ? \'true\' : \'false\')), \'aria-selected\': (isSelected() || isMultiSelected()) ? \'true\' : \'false\', \'aria-level\':level + 1, \'aria-label\': text, \'aria-setsize\': parent.items().length, \'aria-posinset\': parent.items.indexOf($data) + 1 }"> <!-- ko if: $data.hasItems--> <div class="dx-treelist-collapsedbutton" data-bind="css: nodeImageClass, template: \'dxrd-svg-collapsed\', click: toggleCollapsed"></div> <!-- /ko --> <div class="dx-treelist-caption" data-bind="style: { \'padding-left\': $data.hasItems ? \'0px\': \'18px\' }"> <!-- ko if: actions && actions.length > 0 --> <div class="dx-treelist-action-container" data-bind="visible: isSelected"> <!-- ko template: actionsTemplate() --> <!-- /ko --> </div> <!-- /ko  --> <!-- ko if: isDraggable --> <div class="dx-treelist-selectedcontent" data-bind="click: toggleSelected, draggable: dragDropHandler"> <!-- ko template: { name: \'dx-treelist-header-item-caption-content\' } --> <!-- /ko --> </div> <!-- /ko --> <!-- ko ifnot: isDraggable --> <div class="dx-treelist-selectedcontent" data-bind="click: toggleSelected"> <!-- ko template: { name: \'dx-treelist-header-item-caption-content\' } --> <!-- /ko --> </div> <!-- /ko --> </div> </div>',
    'dx-treelist-item-text-content': '<div class="dx-treelist-text-wrapper"> <!--ko if: treeListController.searchEnabled --> <div class="dx-treelist-text dx-highlighted-search-text" data-bind="searchHighlighting: { text: text, textToSearch: treeListController.textToSearch, searchOptions: treeListController.searchOptions }, attr: { title: text }"></div> <!-- /ko  --> <!--ko ifnot: treeListController.searchEnabled --> <div class="dx-treelist-text" data-bind="text: text, attr: { title: text }"></div> <!-- /ko  --> </div>',
    'dx-treelist-header-item-caption-content': '<div class="dx-treelist-image" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: text }"> </div> <!-- ko template: { name: \'dx-treelist-item-text-content\' } --> <!-- /ko -->',
    'dx-treelist-item-with-hover': '<div data-bind="visible: visible"> <!-- ko if: hasContent --> <!-- ko template: "dx-treelist-accordion-item-with-hover" --> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: hasContent --> <!-- ko template: "dx-treelist-header-item-with-hover" --> <!-- /ko --> <!-- /ko --> </div>',
    'dx-treelist-accordion-item-with-hover': '<div data-bind="dxdAccordionExt: { collapsed: collapsed, lazyContentRendering: true }"> <!-- ko template: "dx-treelist-header-item-with-hover" --> <!-- /ko --> <div class="dx-fieldset dx-accordion-content dxd-back-primary"> <!-- ko with: data --> <!-- ko template: { name: contenttemplate } --> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dx-treelist-header-item-with-hover': '<div class="dx-background-inheritor dxd-back-highlighted dxd-state-selected"> <div class="dx-treelist-item dx-fontsize-reestablished dxd-list-item-back-color" data-bind="event: { dblclick: function() { $data.dblClickHandler ? $data.dblClickHandler($data) : $data.toggleCollapsed() }, mouseenter: mouseenter, mouseleave: mouseleave }, styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected dxd-back-secondary\': isSelected() || isMultiSelected() }"> <div class="dx-treelist-collapsedbutton" data-bind="css: nodeImageClass, template: \'dxrd-svg-collapsed\', click: toggleCollapsed, style: { \'visibility\': hasItems ? \'visible\' : \'hidden\' }"></div> <div class="dx-treelist-caption"> <!-- ko if: actions && actions.length > 0 --> <div class="dx-treelist-action-container" data-bind="visible: $data.isSelected() || $data.isHovered()"> <!-- ko template: actionsTemplate() --> <!-- /ko --> </div> <!-- /ko  --> <div class="dx-treelist-selectedcontent" data-bind="click: toggleSelected,  draggable: isDraggable ? dragDropHandler : null"> <div class="dx-treelist-image" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: text }"> </div> <div class="dx-treelist-text-wrapper"> <div class="dx-treelist-text" data-bind="text: text, attr: { title: text }"></div> </div> </div> </div> </div> </div>',
    'dx-treelist': '<div role="group" class="dx-treelist dxd-text-primary"> <!-- ko template: $data.visibleItems !== undefined ? \'dx-treelist-paginate\' : \'dx-treelist-common\' --> <!-- /ko --> </div>',
    'dx-treelist-search-panel': '<div class="dxrd-treelist-search-panel" data-bind="dxTextBox: { mode: \'search\',  value:value, activeStateEnabled:false, focusStateEnabled:false, hoverStateEnabled:false, valueChangeEvent: \'keyup\', showClearButton: true, placeholder: searchPlaceholder()}"></div>',
    'dx-treelist-common': '<!-- ko foreach: items --> <!-- ko lazy: { resolver: resolver, innerBindings: { template: templateName } } --> <!-- /ko --> <!-- ko if: !$data.collapsed() --> <!-- ko template: { name: \'dx-treelist\', data: $data } --> <!-- /ko --> <!-- /ko --> <!-- /ko -->',
    'dx-treelist-paginate': '<!-- ko foreach: visibleItems --> <!-- ko template: templateName --> <!-- /ko --> <!-- ko if: !$data.collapsed() --> <!-- ko template: { name: \'dx-treelist\', data: $data } --> <!-- /ko --> <!-- /ko --> <!-- /ko -->',
});
