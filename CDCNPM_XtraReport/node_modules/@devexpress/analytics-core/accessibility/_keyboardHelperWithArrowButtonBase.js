/**
* DevExpress Analytics (accessibility\_keyboardHelperWithArrowButtonBase.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _keyboardHelperBase_1 = require("./_keyboardHelperBase");
var KeyboardHelperWithArrowButtonBase = (function (_super) {
    __extends(KeyboardHelperWithArrowButtonBase, _super);
    function KeyboardHelperWithArrowButtonBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.startIndex = 0;
        return _this;
    }
    KeyboardHelperWithArrowButtonBase.prototype.resetTabIndexes = function () {
        this.setTabIndexes('-1');
    };
    KeyboardHelperWithArrowButtonBase.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.resetTabIndexes();
        this.controlElements[this.startIndex] && this.controlElements[this.startIndex].element.setAttribute('tabindex', '0');
    };
    KeyboardHelperWithArrowButtonBase.prototype.changeFocus = function (index, roundTrip) {
        if (roundTrip === void 0) { roundTrip = true; }
        this.resetTabIndexes();
        var nextIndex = _super.prototype.changeFocus.call(this, index, roundTrip);
        this.controlElements[nextIndex].setTabIndex('0');
        this.controlElements[nextIndex].setFocus();
        this.startIndex = nextIndex;
        return nextIndex;
    };
    return KeyboardHelperWithArrowButtonBase;
}(_keyboardHelperBase_1.AccessibilityKeyboardHelperBase));
exports.KeyboardHelperWithArrowButtonBase = KeyboardHelperWithArrowButtonBase;
