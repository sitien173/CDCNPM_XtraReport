/**
* DevExpress Analytics (accessibility\_accordionKeyboardHelper.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _keyboardHelperBase_1 = require("./_keyboardHelperBase");
var AccordionKeyboardHelper = (function (_super) {
    __extends(AccordionKeyboardHelper, _super);
    function AccordionKeyboardHelper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.controlElementClassName = 'dxrd-accessibility-accordion-trigger';
        _this.focusFirstFocusableDescendant = true;
        return _this;
    }
    AccordionKeyboardHelper.prototype._getElementsCount = function () {
        return Array.prototype.slice.call(this.getContainer().querySelectorAll('.' + this.controlElementClassName)).length;
    };
    AccordionKeyboardHelper.prototype._defferedInit = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.controlElements.length !== _this._getElementsCount()) {
                _this.initialize();
            }
        }, 20);
    };
    AccordionKeyboardHelper.prototype._collapseItem = function (item) {
        var collapsed = ko.dataFor(item).collapsed;
        collapsed(!collapsed());
        this._defferedInit();
    };
    AccordionKeyboardHelper.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.setTabIndexes(0);
    };
    AccordionKeyboardHelper.prototype.itemHandleUpArrowKey = function (e, index) {
        this.setFocusToPrevious(index);
        return true;
    };
    AccordionKeyboardHelper.prototype.itemHandleDownArrowKey = function (e, index) {
        this.setFocusToNext(index);
        return true;
    };
    AccordionKeyboardHelper.prototype.itemHandleEnterKey = function (e, index) {
        this._collapseItem(e.target);
        return true;
    };
    AccordionKeyboardHelper.prototype.itemHandleSpaceKey = function (e, index) {
        this._collapseItem(e.target);
        return true;
    };
    AccordionKeyboardHelper.prototype.clickHandler = function (e, index) {
        this._defferedInit();
        _super.prototype.clickHandler.call(this, e, index);
    };
    return AccordionKeyboardHelper;
}(_keyboardHelperBase_1.AccessibilityKeyboardHelperBase));
exports.AccordionKeyboardHelper = AccordionKeyboardHelper;
