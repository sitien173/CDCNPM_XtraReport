/**
* DevExpress Analytics (accessibility\_toolbarKeyboardHelper.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var select_box_1 = require("devextreme/ui/select_box");
var menu_1 = require("devextreme/ui/menu");
var _keyboardHelperWithArrowButtonBase_1 = require("./_keyboardHelperWithArrowButtonBase");
var _controlElementWithParentHighlight_1 = require("./_controlElementWithParentHighlight");
var localization_utils_1 = require("../property-grid/localization/localization_utils");
var ToolbarKeyboardHelper = (function (_super) {
    __extends(ToolbarKeyboardHelper, _super);
    function ToolbarKeyboardHelper(_buttonModels) {
        var _this = _super.call(this) || this;
        _this._buttonModels = _buttonModels;
        _this.controlElementClassName = 'dx-accessibility-toolbar-item';
        _this.liveRegionId = 'dxrd-preview-toolbar-live-region';
        _this._disposables.push(ko.computed(function () {
            _this.buttonModels.forEach(function (button) { ko.unwrap(button.visible); });
            setTimeout(function () { return _this.initialize(); }, 100);
        }));
        return _this;
    }
    ToolbarKeyboardHelper.prototype.createControlElement = function (element, index) {
        if (ko.unwrap(this.buttonModels[index].visible))
            return new ToolbarItemElement(element, this.getContainer(), this.buttonModels[index], this.liveRegion.bind(this));
    };
    ToolbarKeyboardHelper.prototype.itemHandleEnterKey = function (e, index) {
        var item = this.controlElements[index];
        item.actionExecute();
        return true;
    };
    ToolbarKeyboardHelper.prototype.itemHandleSpaceKey = function (e, index) {
        var item = this.controlElements[index];
        item.actionExecute();
        return true;
    };
    ToolbarKeyboardHelper.prototype.itemHandleLeftArrowKey = function (e, index) {
        this.setFocusToPrevious(index);
        return true;
    };
    ToolbarKeyboardHelper.prototype.itemHandleRightArrowKey = function (e, index) {
        this.setFocusToNext(index);
        return true;
    };
    Object.defineProperty(ToolbarKeyboardHelper.prototype, "buttonModels", {
        get: function () {
            return ko.unwrap(this._buttonModels);
        },
        enumerable: true,
        configurable: true
    });
    return ToolbarKeyboardHelper;
}(_keyboardHelperWithArrowButtonBase_1.KeyboardHelperWithArrowButtonBase));
exports.ToolbarKeyboardHelper = ToolbarKeyboardHelper;
var ToolbarItemElement = (function (_super) {
    __extends(ToolbarItemElement, _super);
    function ToolbarItemElement(element, _toolbarElement, _toolbarItemModel, _liveRegion) {
        var _this = _super.call(this, element, _toolbarElement) || this;
        _this.element = element;
        _this._toolbarItemModel = _toolbarItemModel;
        _this._liveRegion = _liveRegion;
        _this._selectBox = select_box_1.default.getInstance(element.children[0]);
        _this._menu = menu_1.default.getInstance(element.children[0]);
        return _this;
    }
    ToolbarItemElement.prototype._complexItem = function () {
        if (this._selectBox || this._menu)
            return true;
        return false;
    };
    ToolbarItemElement.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._menu = null;
        this._selectBox = null;
    };
    ToolbarItemElement.prototype.setFocus = function () {
        if (this._complexItem() && this.element.getAttribute('aria-disabled') !== 'true')
            this._liveRegion().changeText(localization_utils_1.getLocalization('press Enter or Space to activate the editor', 'ASPxReportsStringId.WebDocumentViewer_AriaActivateEditor'), 200);
        else
            this._liveRegion().changeText('');
        return _super.prototype.setFocus.call(this);
    };
    ToolbarItemElement.prototype.actionExecute = function () {
        if (this._complexItem()) {
            this._liveRegion().changeText(localization_utils_1.getLocalization('Press Alt ↓ or Alt  ↑ to navigate the editor. Press Shift Tab to exit navigation mode.', 'ASPxReportsStringId.WebDocumentViewer_AriaEditorKeyboardNavigation'), 500);
        }
        if (this._selectBox) {
            this._selectBox.focus();
            return;
        }
        if (this._menu) {
            this._menu.focus();
            return;
        }
        if (!ko.unwrap(this._toolbarItemModel.disabled))
            this._toolbarItemModel.clickAction();
    };
    return ToolbarItemElement;
}(_controlElementWithParentHighlight_1.ControlElementWithParentHighlight));
