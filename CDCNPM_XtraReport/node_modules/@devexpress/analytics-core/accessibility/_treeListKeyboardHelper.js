/**
* DevExpress Analytics (accessibility\_treeListKeyboardHelper.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _controlElementBase_1 = require("./_controlElementBase");
var _listKeyboardHelper_1 = require("./_listKeyboardHelper");
var TreeListKeyboardHelper = (function (_super) {
    __extends(TreeListKeyboardHelper, _super);
    function TreeListKeyboardHelper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.controlElementClassName = 'dx-accessibility-treelist-item';
        return _this;
    }
    TreeListKeyboardHelper.prototype._setFocusToParentNode = function (item, index) {
        var offset = 1;
        var parentItems = item.parent.items();
        var indexOfParent = parentItems.indexOf(item);
        var getChildCount = function (item, _offset) {
            if (item.hasItems && !item.collapsed()) {
                item.items().forEach(function (element) {
                    _offset += getChildCount(element, 0);
                });
            }
            _offset += 1;
            return _offset;
        };
        for (var i = 0; i < indexOfParent; i++) {
            offset += getChildCount(parentItems[i], 0);
        }
        this.changeFocus(index - offset);
    };
    TreeListKeyboardHelper.prototype._toggleCollapsed = function (item, model) {
        this.startIndex = this.getIndexByElement(item);
        model.toggleCollapsed();
    };
    TreeListKeyboardHelper.prototype._toggleSelected = function (el) {
        this._getItemModel(el).toggleSelected();
    };
    TreeListKeyboardHelper.prototype._getItemModel = function (el) {
        return ko.dataFor(el);
    };
    TreeListKeyboardHelper.prototype.createControlElement = function (element, index) {
        return new _controlElementBase_1.AccessibilityControlElementBase(element);
    };
    TreeListKeyboardHelper.prototype.itemHandleLeftArrowKey = function (e, index) {
        var item = this._getItemModel(e.target);
        if (item.hasItems && !item.collapsed()) {
            this._toggleCollapsed(e.target, item);
        }
        else {
            this._setFocusToParentNode(item, index);
        }
        return true;
    };
    TreeListKeyboardHelper.prototype.itemHandleRightArrowKey = function (e, index) {
        var item = this._getItemModel(e.target);
        if (item.hasItems) {
            if (item.collapsed())
                this._toggleCollapsed(e.target, item);
            else
                this.changeFocus(index + 1, false);
        }
        return true;
    };
    TreeListKeyboardHelper.prototype.itemHandleEnterKey = function (e, index) {
        this._toggleSelected(e.target);
        return true;
    };
    TreeListKeyboardHelper.prototype.itemHandleSpaceKey = function (e, index) {
        this._toggleSelected(e.target);
        return true;
    };
    TreeListKeyboardHelper.prototype.clickHandler = function (e, index) {
        _super.prototype.clickHandler.call(this, e, index);
        this.startIndex = index;
    };
    return TreeListKeyboardHelper;
}(_listKeyboardHelper_1.ListKeyboardHelper));
exports.TreeListKeyboardHelper = TreeListKeyboardHelper;
