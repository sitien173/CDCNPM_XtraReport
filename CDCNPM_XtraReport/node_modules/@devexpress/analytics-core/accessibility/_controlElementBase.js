/**
* DevExpress Analytics (accessibility\_controlElementBase.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../serializer/utils");
var _internal_1 = require("../serializer/_internal");
var AccessibilityControlElementBase = (function (_super) {
    __extends(AccessibilityControlElementBase, _super);
    function AccessibilityControlElementBase(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this._eventListeners = [];
        return _this;
    }
    AccessibilityControlElementBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._eventListeners.forEach(function (item) { item.element.removeEventListener(item.eventType, item.listener); });
        this._eventListeners.length = 0;
        this.element = null;
    };
    AccessibilityControlElementBase.prototype.addListener = function (element, eventType, handler) {
        var _this = this;
        var listener = function (e) {
            handler.call(_this, e);
        };
        element.addEventListener(eventType, listener);
        _internal_1.addDisposeCallback(element, function () {
            element.removeEventListener(eventType, listener);
        });
        this._eventListeners.push({ element: element, eventType: eventType, listener: listener });
    };
    AccessibilityControlElementBase.prototype.setTabIndex = function (index) {
        this.element.setAttribute('tabindex', index);
    };
    AccessibilityControlElementBase.prototype.setFocus = function () {
        this.element.focus();
    };
    return AccessibilityControlElementBase;
}(utils_1.Disposable));
exports.AccessibilityControlElementBase = AccessibilityControlElementBase;
