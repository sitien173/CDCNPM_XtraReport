/**
* DevExpress Analytics (accessibility\_keyboardHelperBase.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _keyboardHelper_1 = require("../core/tools/_keyboardHelper");
var _arrayutils_1 = require("../core/utils/_arrayutils");
var _internal_1 = require("../serializer/_internal");
var _controlElementBase_1 = require("./_controlElementBase");
var AccessibilityKeyboardHelperBase = (function (_super) {
    __extends(AccessibilityKeyboardHelperBase, _super);
    function AccessibilityKeyboardHelperBase() {
        var _this = _super.call(this) || this;
        _this.childrenInitialized = false;
        _this.accessibilityCompliantEnabled = false;
        _this.focusFirstFocusableDescendant = false;
        _this.controlElements = [];
        _this._eventListeners = [];
        _this.setTabIndexes = function (index) {
            _this.controlElements.forEach(function (button) { return button.setTabIndex(index); });
        };
        _this.liveRegion = function () {
            if (!_this.liveRegionId)
                return null;
            if (!_this._liveRegion || !_this._liveRegion.element) {
                _this._liveRegion = {
                    element: document.getElementById(_this.liveRegionId),
                    changeText: function (text, timeout) {
                        if (timeout === void 0) { timeout = 200; }
                        return setTimeout(function () {
                            if (_this._liveRegion.element)
                                _this._liveRegion.element.textContent = text;
                        }, timeout);
                    }
                };
            }
            return _this._liveRegion;
        };
        _this.shortcutMap = {
            Esc: function (e) { return _this.handleEscKey(e); },
            Tab: function (e) {
                var shiftKey = !!(e && e.shiftKey);
                return shiftKey ? _this.handleShiftTabKey(e) : _this.handleTabKey(e);
            },
            Enter: function (e) { return _this.handleEnterKey(e); },
            Space: function (e) { return _this.handleSpaceKey(e); },
            End: function (e) { return _this.handleEndKey(e); },
            Home: function (e) { return _this.handleHomeKey(e); },
            Up: function (e) { return _this.handleUpArrowKey(e); },
            Down: function (e) { return _this.handleDownArrowKey(e); },
            Left: function (e) { return _this.handleLeftArrowKey(e); },
            Right: function (e) { return _this.handleRightArrowKey(e); },
        };
        _this.childrenShortcutMap = {
            Tab: function (e, index) {
                var shiftKey = !!(e && e.shiftKey);
                return shiftKey ? _this.itemHandleShiftTabKey(e, index) : _this.itemHandleTabKey(e, index);
            },
            Enter: function (e, index) { return _this.itemHandleEnterKey(e, index); },
            Space: function (e, index) { return _this.itemHandleSpaceKey(e, index); },
            End: function (e, index) { return _this.itemHandleEndKey(e, index); },
            Home: function (e, index) { return _this.itemHandleHomeKey(e, index); },
            Up: function (e, index) { return _this.itemHandleUpArrowKey(e, index); },
            Down: function (e, index) { return _this.itemHandleDownArrowKey(e, index); },
            Left: function (e, index) { return _this.itemHandleLeftArrowKey(e, index); },
            Right: function (e, index) { return _this.itemHandleRightArrowKey(e, index); },
            Esc: function (e, index) { return _this.itemHandleEscKey(e, index); },
        };
        return _this;
    }
    AccessibilityKeyboardHelperBase.prototype._disposeItems = function () {
        this._eventListeners.forEach(function (item) { item.element.removeEventListener(item.eventType, item.listener); });
        this._eventListeners.length = 0;
        this.disposeArray(this.controlElements);
        this.controlElements.length = 0;
    };
    AccessibilityKeyboardHelperBase.prototype.initialize = function () {
        var _this = this;
        this._disposeItems();
        if (!this._elementContainer)
            return;
        var htmlElements = Array.prototype.slice.call(this._elementContainer.querySelectorAll('.' + this.controlElementClassName));
        if (!htmlElements.length)
            return;
        htmlElements.forEach(function (element, index) {
            var newItem = _this.createControlElement(element, index);
            if (newItem) {
                _this.controlElements.push(newItem);
            }
        });
        this.controlElements.forEach(function (item, index) {
            _this.addListener(item.element, index, 'click', _this.clickHandler);
        });
        this.childrenInitialized = true;
    };
    AccessibilityKeyboardHelperBase.prototype.getIndexByElement = function (htmlElement) {
        return this.controlElements.map(function (element) { return element.element; }).indexOf(htmlElement);
    };
    AccessibilityKeyboardHelperBase.prototype.createControlElement = function (element, index) {
        return new _controlElementBase_1.AccessibilityControlElementBase(element);
    };
    AccessibilityKeyboardHelperBase.prototype.getContainer = function () {
        return this._elementContainer;
    };
    AccessibilityKeyboardHelperBase.prototype.changeFocus = function (index, roundTrip) {
        if (roundTrip === void 0) { roundTrip = true; }
        var elCount = this.controlElements.length - 1;
        if (index < 0)
            index = roundTrip ? elCount : 0;
        if (index > elCount)
            index = roundTrip ? 0 : elCount;
        this.controlElements[index].setFocus();
        return index;
    };
    AccessibilityKeyboardHelperBase.prototype.bindHandler = function (elementContainer) {
        var _this = this;
        this._elementContainer = elementContainer;
        var handlersManager = new _keyboardHelper_1.KeyDownHandlersManager(this._elementContainer);
        this.initialize();
        var handler = function (e) {
            var target = e.target;
            if (_arrayutils_1.findFirstItemMatchesCondition(Object.keys(target.classList), function (key) { return target.classList[key] === _this.controlElementClassName; }) && _this.processChildrenShortcut(e, _this.getIndexByElement(target))
                || _this.processShortcut(e)) {
                e.stopPropagation();
                e.preventDefault();
            }
        };
        handlersManager.bindHandler(this._elementContainer, handler);
    };
    AccessibilityKeyboardHelperBase.prototype.handleEscKey = function (e, index) {
        if (this._prevActiveElement) {
            this._prevActiveElement.focus();
            return true;
        }
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.handleTabKey = function (e) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.handleShiftTabKey = function (e) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.handleEnterKey = function (e) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.handleSpaceKey = function (e) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.handleEndKey = function (e) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.handleHomeKey = function (e) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.handleUpArrowKey = function (e) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.handleDownArrowKey = function (e) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.handleLeftArrowKey = function (e) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.handleRightArrowKey = function (e) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.itemHandleHomeKey = function (e, index) {
        this.changeFocus(0);
        return true;
    };
    AccessibilityKeyboardHelperBase.prototype.itemHandleEndKey = function (e, index) {
        this.changeFocus(this.controlElements.length - 1);
        return true;
    };
    AccessibilityKeyboardHelperBase.prototype.itemHandleLeftArrowKey = function (e, index) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.itemHandleRightArrowKey = function (e, index) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.itemHandleEnterKey = function (e, index) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.itemHandleSpaceKey = function (e, index) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.itemHandleUpArrowKey = function (e, index) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.itemHandleDownArrowKey = function (e, index) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.itemHandleTabKey = function (e, index) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.itemHandleShiftTabKey = function (e, index) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.itemHandleEscKey = function (e, index) {
        return false;
    };
    AccessibilityKeyboardHelperBase.prototype.setFocusToPrevious = function (currentIndex, roundTrip) {
        if (roundTrip === void 0) { roundTrip = true; }
        return this.changeFocus(currentIndex - 1, roundTrip);
    };
    AccessibilityKeyboardHelperBase.prototype.setFocusToNext = function (currentIndex, roundTrip) {
        if (roundTrip === void 0) { roundTrip = true; }
        return this.changeFocus(currentIndex + 1, roundTrip);
    };
    AccessibilityKeyboardHelperBase.prototype.clickHandler = function (e, index) {
        this.changeFocus(index);
    };
    AccessibilityKeyboardHelperBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._disposeItems();
        this._elementContainer = null;
        this._prevActiveElement = null;
    };
    AccessibilityKeyboardHelperBase.prototype.addListener = function (element, index, eventType, handler) {
        var _this = this;
        var listener = function (e) {
            handler.call(_this, e, index);
        };
        element.addEventListener(eventType, listener);
        _internal_1.addDisposeCallback(element, function () {
            element.removeEventListener(eventType, listener);
        });
        this._eventListeners.push({ element: element, eventType: eventType, listener: listener });
    };
    AccessibilityKeyboardHelperBase.prototype.focus = function (prevActiveElement) {
        if (!this.childrenInitialized && !this._elementContainer)
            return;
        this._prevActiveElement = (prevActiveElement || document.activeElement);
        if (this.childrenInitialized && !this.focusFirstFocusableDescendant) {
            this.changeFocus(this.startIndex || 0);
        }
        else {
            var focusable = this._elementContainer.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
            focusable.length && focusable[0].focus();
        }
    };
    AccessibilityKeyboardHelperBase.prototype.lastFocusItem = function () {
        return document.getElementById('dxrd-designer-last-focus-item-blank');
    };
    return AccessibilityKeyboardHelperBase;
}(_keyboardHelper_1.KeyboardHelperBase));
exports.AccessibilityKeyboardHelperBase = AccessibilityKeyboardHelperBase;
