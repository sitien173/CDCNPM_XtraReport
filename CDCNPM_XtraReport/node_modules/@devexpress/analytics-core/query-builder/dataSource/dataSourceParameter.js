/**
* DevExpress Analytics (query-builder\dataSource\dataSourceParameter.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _utils_1 = require("../../widgets/_utils");
var _utils_2 = require("../../property-grid/widgets/internal/_utils");
var dbColumn_1 = require("./dbColumn");
var _localization_1 = require("../../property-grid/localization/_localization");
var utils_1 = require("../../serializer/utils");
var _editorTypeMapper_1 = require("../../core/internal/_editorTypeMapper");
var dataSourceParameterMeta_1 = require("./dataSourceParameterMeta");
var expressionFunctions_1 = require("../widgets/expressionFunctions");
var serializer_1 = require("../../serializer/serializer");
var _utils_3 = require("../../serializer/_utils");
function integerValueConverter(val, defaultVal, type) {
    return _utils_1.integerValueConverter(val, defaultVal, type);
}
function floatValueConverter(val, defaultVal, type) {
    return _utils_1.floatValueConverter(val, defaultVal, type);
}
function expressionValueConverter(val) {
    if (val instanceof Date) {
        var prependZero = function (x) { return (x < 10 ? '0' : '') + x; };
        return _utils_2.formatUnicorn('#{0}/{1}/{2} {3}:{4}#', prependZero(val.getMonth() + 1), prependZero(val.getDate()), val.getFullYear(), prependZero(val.getHours()), prependZero(val.getMinutes()));
    }
    return (val || '').toString();
}
var DataSourceParameterTypeValue = (function () {
    function DataSourceParameterTypeValue(name, defaultValue, _valueConverter, realTypeName) {
        var _this = this;
        this.name = name;
        this.defaultValue = defaultValue;
        this.realTypeName = realTypeName;
        if (_valueConverter)
            this.valueConverter = function (val) { return _valueConverter(val, defaultValue, _this.name); };
    }
    Object.defineProperty(DataSourceParameterTypeValue.prototype, "specifics", {
        get: function () {
            return dbColumn_1.DBColumn.GetSpecific(this.realTypeName || this.name);
        },
        enumerable: true,
        configurable: true
    });
    return DataSourceParameterTypeValue;
}());
var tryParseDate = function (val) {
    var date;
    try {
        date = _localization_1.parseDate(val);
    }
    catch (e) {
        date = dateDefaultValue();
    }
    return date;
};
var dateDefaultValue = function () {
    var date = new Date();
    date.setHours(0, 0, 0, 0);
    return date;
};
var DataSourceParameter = (function (_super) {
    __extends(DataSourceParameter, _super);
    function DataSourceParameter(model, serializer, _serializationsInfo) {
        if (_serializationsInfo === void 0) { _serializationsInfo = dataSourceParameterMeta_1.dsParameterSerializationInfo; }
        var _this = _super.call(this) || this;
        _this._serializationsInfo = _serializationsInfo;
        _this._valueInfo = ko.observable(dataSourceParameterMeta_1.parameterValueSerializationsInfo);
        _this._parametersFunctions = expressionFunctions_1.expressionFunctions;
        _this.isValid = ko.observable(true);
        serializer = serializer || new serializer_1.ModelSerializer();
        serializer.deserialize(_this, _utils_3.extend(model, { '@ItemType': 'Parameter' }));
        _this.name = ko.pureComputed({
            read: function () { return _this._name(); },
            write: function (value) { if (DataSourceParameter.validateName(value))
                _this._name(value); }
        });
        _this._expressionValue = ko.observable({
            value: _this._value,
            functions: _this._parametersFunctions
        });
        _this._disposables.push(_this.type.subscribe(function (val) {
            if (_editorTypeMapper_1.IsDataAccessExpression(val)) {
                _this.resultType(_this._previousResultType);
            }
            else {
                _this.resultType(null);
                _this._previousResultType = val;
            }
            _this._updateValueInfo(val);
        }));
        _this._previousResultType = (_editorTypeMapper_1.IsDataAccessExpression(_this.type.peek()))
            ? _this.resultType()
            : _this.type();
        _this.value = ko.pureComputed({
            read: function () {
                return _editorTypeMapper_1.IsDataAccessExpression(_this.type()) ? _this._expressionValue() : _this._value();
            },
            write: function (val) {
                _this._value(val);
            }
        });
        _this._updateValueInfo(_this.type.peek());
        return _this;
    }
    DataSourceParameter._getTypeValue = function (typeName, resultType) {
        if (resultType === void 0) { resultType = null; }
        var result = DataSourceParameter._typeValues.filter(function (type) { return type.name === typeName; });
        if (result.length > 0) {
            if (resultType && _editorTypeMapper_1.IsDataAccessExpression(typeName))
                result[0].realTypeName = resultType;
            return result[0];
        }
        return { name: typeName, defaultValue: null, specifics: 'String', disableEditor: true };
    };
    DataSourceParameter.prototype._getTypeValue = function (typeName) {
        return DataSourceParameter._getTypeValue(typeName, this.resultType());
    };
    DataSourceParameter.prototype._tryConvertValue = function (value, typeValue) {
        if (!DataSourceParameter._isValueValid(value))
            return typeValue.defaultValue;
        var converter = typeValue.valueConverter || (function (val) { return val; }), newValue = converter(value);
        return DataSourceParameter._isValueValid(newValue) ? newValue : typeValue.defaultValue;
    };
    DataSourceParameter._isValueValid = function (value) {
        return value !== void 0 && value !== null && !isNaN(typeof value === 'string' ? '' : value);
    };
    DataSourceParameter.prototype.getEditorType = function (type) {
        return _editorTypeMapper_1.getEditorType(type);
    };
    DataSourceParameter.prototype._updateValueInfo = function (newType) {
        var _this = this;
        var typeValue = this._getTypeValue(newType);
        var newValue = this._tryConvertValue(this._value(), typeValue);
        var expressionOptions = this._expressionValue.peek();
        this._expressionValue(null);
        this._value(null);
        this._valueInfo(_utils_3.extend({}, dataSourceParameterMeta_1.parameterValueSerializationsInfo, {
            editor: this.getEditorType(typeValue.name),
            disabled: typeValue.disableEditor === true,
            editorOptions: {
                onFocusOut: function (params) {
                    _this.isValid(params.component.option('isValid'));
                }
            }
        }));
        this._expressionValue(expressionOptions);
        this._value(newValue);
    };
    Object.defineProperty(DataSourceParameter.prototype, "specifics", {
        get: function () {
            var realTypeName = (_editorTypeMapper_1.IsDataAccessExpression(this.type.peek()))
                ? this.resultType()
                : this.type();
            var result = DataSourceParameter._typeValues.filter(function (type) { return type.name === realTypeName; });
            if (result.length > 0)
                return result[0].specifics;
            return 'string';
        },
        enumerable: true,
        configurable: true
    });
    DataSourceParameter.validateName = function (nameCandidate) {
        return nameCandidate && !nameCandidate.match(/[~`!"№;%\^:\?*\(\)&\-\+={}\[\]\|\\\/,\.<>'\s]/);
    };
    DataSourceParameter.prototype.getInfo = function () {
        if (this.type) {
            var info = _utils_3.extend(true, [], this._serializationsInfo);
            info.splice(info.indexOf(info.filter(function (prop) { return prop.propertyName === 'value'; })[0]), 1, this._valueInfo());
            return info;
        }
        return this._serializationsInfo;
    };
    DataSourceParameter.prototype.isPropertyVisible = function (propName) {
        if (propName === 'resultType')
            return _editorTypeMapper_1.IsDataAccessExpression(this.type());
        return true;
    };
    DataSourceParameter._typeValues = [
        new DataSourceParameterTypeValue('System.DateTime', dateDefaultValue(), tryParseDate),
        new DataSourceParameterTypeValue('System.String', ''),
        new DataSourceParameterTypeValue('System.SByte', '0', integerValueConverter),
        new DataSourceParameterTypeValue('System.Int16', '0', integerValueConverter),
        new DataSourceParameterTypeValue('System.Int32', '0', integerValueConverter),
        new DataSourceParameterTypeValue('System.Int64', '0', integerValueConverter),
        new DataSourceParameterTypeValue('System.Byte', '0', integerValueConverter),
        new DataSourceParameterTypeValue('System.UInt16', '0', integerValueConverter),
        new DataSourceParameterTypeValue('System.UInt32', '0', integerValueConverter),
        new DataSourceParameterTypeValue('System.UInt64', '0', integerValueConverter),
        new DataSourceParameterTypeValue('System.Decimal', '0', floatValueConverter),
        new DataSourceParameterTypeValue('System.Double', '0', floatValueConverter),
        new DataSourceParameterTypeValue('System.Single', '0', floatValueConverter),
        new DataSourceParameterTypeValue('System.Boolean', false, function (val) { return val !== void 0 ? String(val).toLowerCase() === 'true' : val; }),
        new DataSourceParameterTypeValue('System.Guid', '00000000-0000-0000-0000-000000000000'),
        new DataSourceParameterTypeValue(_editorTypeMapper_1.ExpressionType, '', expressionValueConverter),
        new DataSourceParameterTypeValue('System.Char', ''),
    ];
    return DataSourceParameter;
}(utils_1.Disposable));
exports.DataSourceParameter = DataSourceParameter;
