/**
* DevExpress Analytics (query-builder\dataSource\dbSchemaProvider.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../serializer/utils");
var _dbSchemaProvider_1 = require("./_dbSchemaProvider");
var requestwrapper_1 = require("../utils/requestwrapper");
var _arrayutils_1 = require("../../core/utils/_arrayutils");
var _localization_1 = require("../../property-grid/localization/_localization");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var _utils_1 = require("../../property-grid/widgets/internal/_utils");
var DBSchemaProvider = (function (_super) {
    __extends(DBSchemaProvider, _super);
    function DBSchemaProvider(connection, _requestWrapper) {
        if (_requestWrapper === void 0) { _requestWrapper = new requestwrapper_1.RequestWrapper(); }
        var _this = _super.call(this) || this;
        _this._requestWrapper = _requestWrapper;
        _this._tables = {};
        _this._tableRequests = ko.observableArray([]).extend({ deferred: true });
        _this.connection = connection;
        _this._disposables.push(_this.connection.name.subscribe(function () {
            _this._tables = {};
            _this._dbSchema = null;
            _this._dbStoredProceduresSchema = null;
        }));
        _this._disposables.push(ko.computed(function () {
            var tableRequests = _this._tableRequests();
            if (!tableRequests.length)
                return;
            _this._tableRequests([]);
            var tables = tableRequests.map(function (x) { return x.table; });
            _this._getDBSchema(tables).done(function (dbSchema) {
                tableRequests.forEach(function (tableRequest) {
                    var schemaTable = dbSchema.tables.filter(function (x) { return x.name === tableRequest.table.name; })[0];
                    if (!schemaTable) {
                        tableRequest.deferred.reject();
                        return;
                    }
                    tableRequest.table.columns = schemaTable.columns;
                    tableRequest.deferred.resolve(tableRequest.table);
                });
            }).fail(function () { return tableRequests.forEach(function (request) { return request.deferred.reject(); }); });
        }));
        _this.getItems = function (pathRequest) {
            var deferred = $.Deferred();
            if (!pathRequest.fullPath) {
                _this.getDbSchema().done(function (dbSchema) {
                    deferred.resolve($.map(dbSchema.tables, function (item) {
                        var dataMemberInfo = {
                            name: item.name,
                            displayName: item.name,
                            isList: false,
                            specifics: item.isView ? 'view' : 'table',
                            dragData: { noDragable: false }
                        };
                        return dataMemberInfo;
                    }));
                });
            }
            else {
                deferred.resolve([]);
            }
            return deferred.promise();
        };
        return _this;
    }
    DBSchemaProvider.prototype._getDBSchema = function (tables) {
        return this._getDBSchemaCallback(this.connection, tables);
    };
    DBSchemaProvider.prototype._getDBSchemaCallback = function (connection, tables) {
        return _dbSchemaProvider_1.getDBSchemaCallback(this._requestWrapper, connection, tables);
    };
    DBSchemaProvider.prototype._getDBStoredProcedures = function (connection) {
        return _dbSchemaProvider_1.getDBStoredProceduresCallback(this._requestWrapper, connection);
    };
    DBSchemaProvider.prototype.getDbSchema = function () {
        if (!this._dbSchema || this._dbSchema.state() === 'rejected')
            this._dbSchema = this._getDBSchema();
        return this._dbSchema;
    };
    DBSchemaProvider.prototype.getDbStoredProcedures = function () {
        if (!this._dbStoredProceduresSchema || this._dbStoredProceduresSchema.state() === 'rejected')
            this._dbStoredProceduresSchema = this._getDBStoredProcedures(this.connection);
        return this._dbStoredProceduresSchema;
    };
    DBSchemaProvider.prototype.getDbTable = function (tableName) {
        var _this = this;
        if (!this._tables[tableName]) {
            var deferred = $.Deferred();
            this._tables[tableName] = deferred.promise();
            this.getDbSchema().done(function (dbSchema) {
                var table = _arrayutils_1.findFirstItemMatchesCondition(dbSchema.tables, function (table) { return table.name === tableName; });
                if (!table) {
                    deferred.reject();
                    _localization_1.isCustomizedWithUpdateLocalizationMethod('The schema does not contain the specified table: ') ?
                        localization_utils_1.getLocalization('The schema does not contain the specified table: ') + "'" + tableName + "'." :
                        _utils_1.formatUnicorn(localization_utils_1.getLocalization('The schema does not contain the specified table: "{0}".', 'DataAccessStringId.TableNotInSchemaValidationException'), tableName);
                }
                else if (table.columns.length > 0) {
                    deferred.resolve(table);
                }
                else {
                    _this._tableRequests.push({ table: table, deferred: deferred });
                }
            }).fail(function () { return deferred.reject(); });
        }
        return this._tables[tableName];
    };
    return DBSchemaProvider;
}(utils_1.Disposable));
exports.DBSchemaProvider = DBSchemaProvider;
