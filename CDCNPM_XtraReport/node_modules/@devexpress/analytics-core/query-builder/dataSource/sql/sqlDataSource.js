/**
* DevExpress Analytics (query-builder\dataSource\sql\sqlDataSource.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sqlDataConnection_1 = require("./sqlDataConnection");
var resultSet_1 = require("../resultSet");
var utils_1 = require("../../../serializer/utils");
var utils_2 = require("../utils");
var customSqlQuery_1 = require("./customSqlQuery");
var tableQuery_1 = require("./tableQuery");
var storedProcQuery_1 = require("./storedProcQuery");
var serializer_1 = require("../../../serializer/serializer");
var requestwrapper_1 = require("../../utils/requestwrapper");
var masterDetailRelation_1 = require("./masterDetailRelation");
var connectionOptions_1 = require("./connectionOptions");
var dbSchemaProvider_1 = require("../dbSchemaProvider");
var _utils_1 = require("../../../serializer/_utils");
var sqlDataSourceSerializationInfo = [
    { propertyName: 'name', modelName: '@Name' },
    { propertyName: 'connection', modelName: 'Connection', from: sqlDataConnection_1.SqlDataConnection.from, toJsonObject: sqlDataConnection_1.SqlDataConnection.toJson },
    { propertyName: 'queries', modelName: 'Queries', array: true },
    { propertyName: 'relations', modelName: 'Relations', array: true },
    { propertyName: 'resultSet', modelName: 'ResultSchema', from: resultSet_1.ResultSet.from, toJsonObject: resultSet_1.ResultSet.toJson },
    { propertyName: 'itemType', modelName: '@ItemType' }
];
var SqlDataSource = (function (_super) {
    __extends(SqlDataSource, _super);
    function SqlDataSource(model, serializer, requestWrapper) {
        if (requestWrapper === void 0) { requestWrapper = new requestwrapper_1.RequestWrapper(); }
        var _this = _super.call(this) || this;
        serializer = serializer || new serializer_1.ModelSerializer();
        serializer.deserialize(_this, _utils_1.extend(model, { '@ItemType': 'SqlDataSource' }));
        var deprecateName = _this['_model']['Name'];
        if (deprecateName) {
            if (!_this.name()) {
                _this.name(deprecateName);
            }
            delete _this['_model']['Name'];
        }
        _this.queries = utils_1.deserializeArray(model['Queries'], function (item) {
            return _this.createQuery(item, serializer);
        });
        _this.relations = utils_1.deserializeArray(model['Relations'], function (item) {
            return new masterDetailRelation_1.MasterDetailRelation(item, serializer);
        });
        if (_this.connection && model['ConnectionOptions'])
            _this.connection.options = new connectionOptions_1.ConnectionOptions(model['ConnectionOptions'], serializer);
        _this.dbSchemaProvider = new dbSchemaProvider_1.DBSchemaProvider(_this.connection, requestWrapper);
        _this._disposables.push(_this.connection.name.subscribe(function () {
            _this.queries([]);
            _this.relations([]);
            _this.resultSet = null;
        }));
        return _this;
    }
    SqlDataSource.prototype.getInfo = function () {
        return sqlDataSourceSerializationInfo;
    };
    SqlDataSource.prototype.createQuery = function (item, serializer) {
        if (item['@Type'] === utils_2.SqlQueryType.customSqlQuery) {
            return new customSqlQuery_1.CustomSqlQuery(item, this, serializer);
        }
        else if (item['@Type'] === utils_2.SqlQueryType.tableQuery) {
            return new tableQuery_1.TableQuery(item, this, serializer);
        }
        else if (item['@Type'] === utils_2.SqlQueryType.storedProcQuery) {
            return new storedProcQuery_1.StoredProcQuery(item, this, serializer);
        }
        else {
            throw new Error('Unknown sql query type.');
        }
    };
    return SqlDataSource;
}(utils_1.Disposable));
exports.SqlDataSource = SqlDataSource;
