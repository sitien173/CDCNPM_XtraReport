/**
* DevExpress Analytics (query-builder\dataSource\dataSourceParameterMeta.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dataSourceParameter_1 = require("./dataSourceParameter");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var editorsInfo_1 = require("../../property-grid/widgets/editorsInfo");
var _editorTypeMapper_1 = require("../../core/internal/_editorTypeMapper");
var _utils_1 = require("../../serializer/_utils");
exports.dsParameterNameValidationRules = [{
        type: 'custom',
        validationCallback: function (options) { return dataSourceParameter_1.DataSourceParameter.validateName(options.value); },
        get message() {
            return localization_utils_1.getLocalization('Name is required and should be a valid identifier.', 'AnalyticsCoreStringId.NameIsRequired_Error');
        }
    }];
exports.parameterValueSerializationsInfo = { propertyName: 'value', displayName: 'Value', localizationId: 'DevExpress.DataAccess.Parameter.Value', editor: editorsInfo_1.editorTemplates.getEditor('text') };
var dsParameterName = { propertyName: 'name', displayName: 'Name', localizationId: 'DevExpress.DataAccess.Parameter.Name', validationRules: exports.dsParameterNameValidationRules, editor: editorsInfo_1.editorTemplates.getEditor('text') };
var dsParameterType = {
    propertyName: 'type', displayName: 'Type', localizationId: 'DevExpress.DataAccess.Parameter.Type', modelName: '@Type', editor: editorsInfo_1.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'System.String', displayValue: 'String', localizationId: 'AnalyticsCoreStringId.Parameter_Type_String' },
        { value: 'System.DateTime', displayValue: 'Date', localizationId: 'AnalyticsCoreStringId.Parameter_Type_DateTime' },
        { value: 'System.Int16', displayValue: 'Number (16 bit integer)', localizationId: 'AnalyticsCoreStringId.Parameter_Type_Int16' },
        { value: 'System.Int32', displayValue: 'Number (32 bit integer)', localizationId: 'AnalyticsCoreStringId.Parameter_Type_Int32' },
        { value: 'System.Int64', displayValue: 'Number (64 bit integer)', localizationId: 'AnalyticsCoreStringId.Parameter_Type_Int64' },
        { value: 'System.Single', displayValue: 'Number (floating-point)', localizationId: 'AnalyticsCoreStringId.Parameter_Type_Float' },
        { value: 'System.Double', displayValue: 'Number (double-precision floating-point)', localizationId: 'AnalyticsCoreStringId.Parameter_Type_Double' },
        { value: 'System.Decimal', displayValue: 'Number (decimal)', localizationId: 'AnalyticsCoreStringId.Parameter_Type_Decimal' },
        { value: 'System.Boolean', displayValue: 'Boolean', localizationId: 'AnalyticsCoreStringId.Parameter_Type_Boolean' },
        { value: 'System.Guid', displayValue: 'Guid', localizationId: 'AnalyticsCoreStringId.Parameter_Type_Guid' },
        { value: _editorTypeMapper_1.ExpressionType, displayValue: 'Expression', localizationId: 'DataAccessUIStringId.ParametersColumn_Expression' }
    ]
};
var dsExpressionResultType = {
    propertyName: 'resultType',
    displayName: 'Result Type',
    localizationId: 'DataAccessWebStringId.QueryBuilder_ResultType',
    modelName: '@ResultType',
    editor: editorsInfo_1.editorTemplates.getEditor('combobox'),
    valuesArray: dsParameterType.valuesArray.filter(function (x) { return !_editorTypeMapper_1.IsDataAccessExpression(x.value); })
};
var baseDSParamterSerializationsInfo = [
    { propertyName: '_name', modelName: '@Name' },
    { propertyName: '_value', modelName: '#text' },
    exports.parameterValueSerializationsInfo,
    { propertyName: 'itemType', modelName: '@ItemType' }
];
exports.dsParameterSerializationInfo = [dsParameterName, dsParameterType, dsExpressionResultType].concat(baseDSParamterSerializationsInfo);
var storedProcAdditionValuesArray = [
    { value: 'System.Byte', displayValue: 'Non-negative number (8 bit integer)', localizationId: 'DataAccessStringId.Type_Byte' },
    { value: 'System.SByte', displayValue: 'Number (8 bit integer)', localizationId: 'DataAccessStringId.Type_SByte' },
    { value: 'System.UInt32', displayValue: 'Non-negative number (32 bit integer)', localizationId: 'DataAccessStringId.Type_UInt' },
    { value: 'System.UInt16', displayValue: 'Non-negative number (16 bit integer)', localizationId: 'DataAccessStringId.Type_UShort' },
    { value: 'System.UInt64', displayValue: 'Non-negative number (64 bit integer)', localizationId: 'DataAccessStringId.Type_ULong' },
    { value: 'System.Char', displayValue: 'Char', localizationId: 'DataAccessStringId.Type_Char' },
    { value: 'System.Object', displayValue: 'Object', localizationId: 'DataAccessStringId.Type_Object' },
    { value: 'System.Byte[]', displayValue: 'Byte array', localizationId: 'DataAccessStringId.Type_ByteArray' },
    { value: 'System.TimeSpan', displayValue: 'Time interval', localizationId: 'DataAccessStringId.Type_TimeSpan' },
];
function storedProcParameterSerializationsInfo(type) {
    var copyParamType = _utils_1.extend(true, {}, dsParameterType);
    var newValuesArray = [];
    newValuesArray.push(dsParameterType.valuesArray.filter(function (item) { return item.value === type; })[0] || storedProcAdditionValuesArray.filter(function (item) { return item.value === type; })[0]);
    newValuesArray.push(dsParameterType.valuesArray.filter(function (item) { return _editorTypeMapper_1.IsDataAccessExpression(item.value); })[0]);
    copyParamType.valuesArray = newValuesArray;
    var copyResultType = _utils_1.extend(true, {}, dsExpressionResultType);
    copyResultType.valuesArray = newValuesArray.slice(0, 0);
    copyResultType.disabled = true;
    return [
        _utils_1.extend({ disabled: true }, dsParameterName),
        copyParamType,
        copyResultType
    ].concat(baseDSParamterSerializationsInfo);
}
exports.storedProcParameterSerializationsInfo = storedProcParameterSerializationsInfo;
