/**
* DevExpress Analytics (query-builder\dataSource\json\jsonSource.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../../../serializer/utils");
var serializer_1 = require("../../../serializer/serializer");
var jsonParameter_1 = require("./jsonParameter");
var jsonAuthenticationInfo_1 = require("./jsonAuthenticationInfo");
var JsonSource = (function (_super) {
    __extends(JsonSource, _super);
    function JsonSource(model, serializer) {
        if (model === void 0) { model = {}; }
        var _this = _super.call(this) || this;
        _this.sourceType = ko.observable();
        _this.uri = ko.observable();
        _this.json = ko.observable();
        serializer = serializer || new serializer_1.ModelSerializer();
        serializer.deserialize(_this, model);
        _this._disposables.push(_this.uri.subscribe(function (newUri) {
            newUri && _this.sourceType(JsonSource._URIJSONSOURCE_TYPE);
        }));
        _this._disposables.push(_this.json.subscribe(function (newJsonString) {
            newJsonString && _this.sourceType(JsonSource._CUSTOMJSONSOURCE_TYPE);
        }));
        function _getJsonParametersModelDeserialized(parameterModels, itemType) {
            if (parameterModels && Array.isArray(parameterModels[jsonParameter_1.JsonParameterType[itemType]]) && parameterModels[jsonParameter_1.JsonParameterType[itemType]])
                parameterModels = parameterModels[jsonParameter_1.JsonParameterType[itemType]];
            return utils_1.deserializeArray(parameterModels, function (item) {
                if (!item['@ItemType'])
                    item['@ItemType'] = jsonParameter_1.JsonParameterType[itemType];
                return new jsonParameter_1.JsonParameter(item, serializer);
            });
        }
        _this.queryParameters = _getJsonParametersModelDeserialized(model['QueryParameters'], jsonParameter_1.JsonParameterType.QueryParameter);
        _this.headers = _getJsonParametersModelDeserialized(model['Headers'], jsonParameter_1.JsonParameterType.Header);
        _this.pathParameters = _getJsonParametersModelDeserialized(model['PathParameters'], jsonParameter_1.JsonParameterType.PathParameter);
        return _this;
    }
    JsonSource.from = function (model, serializer) {
        return new JsonSource(model || {}, serializer);
    };
    JsonSource.toJson = function (value, serializer, refs) {
        return serializer.serialize(value, jsonSourceSerializationInfo, refs);
    };
    JsonSource.prototype.getInfo = function () {
        return jsonSourceSerializationInfo;
    };
    JsonSource.prototype.serialize = function (includeRootTag) {
        if (includeRootTag === void 0) { includeRootTag = false; }
        return includeRootTag ? { 'Source': this.serialize() } : (new serializer_1.ModelSerializer()).serialize(this);
    };
    JsonSource.prototype.resetSource = function () {
        this.sourceType('');
        this.json('');
        this.uri('');
    };
    JsonSource._URIJSONSOURCE_TYPE = 'DevExpress.DataAccess.Json.UriJsonSource';
    JsonSource._CUSTOMJSONSOURCE_TYPE = 'DevExpress.DataAccess.Json.CustomJsonSource';
    return JsonSource;
}(utils_1.Disposable));
exports.JsonSource = JsonSource;
var jsonSourceSerializationInfo = [
    { propertyName: 'sourceType', modelName: '@SourceType', defaultVal: '' },
    { propertyName: 'json', modelName: '@Json', defaultVal: '' },
    { propertyName: 'uri', modelName: '@Uri', defaultVal: '' },
    { propertyName: 'authenticationInfo', modelName: 'AuthenticationInfo', from: jsonAuthenticationInfo_1.JsonAuthenticationInfo.from, toJsonObject: jsonAuthenticationInfo_1.JsonAuthenticationInfo.toJson },
    { propertyName: 'headers', modelName: 'Headers', array: true },
    { propertyName: 'queryParameters', modelName: 'QueryParameters', array: true },
    { propertyName: 'pathParameters', modelName: 'PathParameters', array: true }
];
