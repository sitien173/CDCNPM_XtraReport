/**
* DevExpress Analytics (query-builder\dataSource\json\jsonDataSource.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var utils_1 = require("../../../serializer/utils");
var serializer_1 = require("../../../serializer/serializer");
var requestwrapper_1 = require("../../utils/requestwrapper");
var jsonSchemaProvider_1 = require("./jsonSchemaProvider");
var jsonSchemaNode_1 = require("./jsonSchemaNode");
var jsonSource_1 = require("./jsonSource");
var JsonDataSource = (function (_super) {
    __extends(JsonDataSource, _super);
    function JsonDataSource(model, serializer, requestWrapper) {
        if (requestWrapper === void 0) { requestWrapper = new requestwrapper_1.RequestWrapper(); }
        var _this = _super.call(this) || this;
        serializer = serializer || new serializer_1.ModelSerializer();
        serializer.deserialize(_this, model);
        _this.jsonSchemaProvider = new jsonSchemaProvider_1.JsonSchemaProvider(_this, requestWrapper);
        _this.source && _this._disposables.push(_this.source);
        _this._disposables.push(_this.connectionName.subscribe(function () {
            _this.source.resetSource();
        }));
        return _this;
    }
    JsonDataSource.prototype.getInfo = function () {
        return jsonDataSourceSerializationInfo;
    };
    JsonDataSource.prototype.clone = function (serializer) {
        var serializer = serializer || new serializer_1.ModelSerializer();
        var serialized = serializer.serialize(this);
        return new JsonDataSource(serialized);
    };
    JsonDataSource.from = function (model, serializer) {
        return new JsonDataSource(model, serializer);
    };
    JsonDataSource.toJson = function (value, serializer, refs) {
        return serializer.serialize(value, jsonDataSourceSerializationInfo, refs);
    };
    JsonDataSource.prototype.getSchema = function (parameters) {
        var _this = this;
        if (parameters === void 0) { parameters = []; }
        var deferred = $.Deferred();
        this.jsonSchemaProvider.getJsonSchema(parameters)
            .done(function (schema) {
            _this.schema = schema;
            deferred.resolve(schema);
        })
            .fail(function () {
            _this.schema = null;
            deferred.reject();
        });
        return deferred.promise();
    };
    return JsonDataSource;
}(utils_1.Disposable));
exports.JsonDataSource = JsonDataSource;
var jsonDataSourceSerializationInfo = [
    { propertyName: 'name', modelName: '@Name' },
    { propertyName: 'connectionName', modelName: '@ConnectionName' },
    { propertyName: 'rootElement', modelName: '@RootElement', defaultVal: 'root' },
    { propertyName: 'schema', modelName: 'Schema', from: jsonSchemaNode_1.JsonSchemaRootNode.from, toJsonObject: jsonSchemaNode_1.JsonSchemaRootNode.toJson },
    { propertyName: 'source', modelName: 'Source', from: jsonSource_1.JsonSource.from, toJsonObject: jsonSource_1.JsonSource.toJson }
];
