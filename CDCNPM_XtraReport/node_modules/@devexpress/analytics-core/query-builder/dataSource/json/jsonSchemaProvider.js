/**
* DevExpress Analytics (query-builder\dataSource\json\jsonSchemaProvider.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var utils_1 = require("../../../serializer/utils");
var requestwrapper_1 = require("../../utils/requestwrapper");
var _jsonSchemaProvider_1 = require("./_jsonSchemaProvider");
var JsonSchemaProvider = (function (_super) {
    __extends(JsonSchemaProvider, _super);
    function JsonSchemaProvider(jsonDataSource, _requestWrapper) {
        if (_requestWrapper === void 0) { _requestWrapper = new requestwrapper_1.RequestWrapper(); }
        var _this = _super.call(this) || this;
        _this._requestWrapper = _requestWrapper;
        _this._jsonDataSource = jsonDataSource;
        _this._disposables.push(_this._jsonDataSource.source.sourceType.subscribe(function () {
            _this._jsonSchemaPromise = null;
        }));
        _this.getItems = function (pathRequest) {
            var getItemsDeferred = $.Deferred();
            var loadSchemaPromise = !_this._jsonSchema ? _this.getJsonSchema() : $.Deferred().resolve(_this._jsonSchema).promise();
            loadSchemaPromise
                .done(function (jsonSchema) {
                _this._jsonSchema = jsonSchema;
                var schemaByPath = _this.getSchemaByPath(pathRequest, jsonSchema);
                getItemsDeferred.resolve(schemaByPath);
            })
                .fail(getItemsDeferred.reject);
            return getItemsDeferred.promise();
        };
        return _this;
    }
    JsonSchemaProvider.prototype.reset = function () {
        this._jsonSchemaPromise = null;
    };
    JsonSchemaProvider.prototype.mapToDataMemberContract = function (nodes) {
        return $.map((nodes || []), function (node) {
            var dataMemberInfo = {
                name: node.name(),
                displayName: node.displayName || node.name(),
                isSelected: node.selected(),
                isList: node.nodes && node.nodes.length > 0,
                specifics: 'table',
                dragData: { noDragable: false }
            };
            return dataMemberInfo;
        });
    };
    JsonSchemaProvider.prototype.getSchemaByPath = function (pathRequest, jsonSchema) {
        if (!pathRequest.fullPath) {
            return this.mapToDataMemberContract(jsonSchema.nodes);
        }
        else {
            var currentNodes = jsonSchema.nodes;
            for (var i = 0; i < pathRequest.pathParts.length; i++) {
                var pathPart = (currentNodes || []).filter(function (node) { return node.name() == pathRequest.pathParts[i]; })[0];
                if (!pathPart)
                    return [];
                currentNodes = pathPart.nodes;
            }
            return this.mapToDataMemberContract(currentNodes);
        }
    };
    JsonSchemaProvider.prototype.getJsonSchema = function (parameters) {
        if (parameters === void 0) { parameters = []; }
        if (!this._jsonSchemaPromise || this._jsonSchemaPromise.state() === 'rejected')
            this._jsonSchemaPromise = _jsonSchemaProvider_1.getJsonSchemaCallback(this._requestWrapper, this._jsonDataSource, parameters);
        return this._jsonSchemaPromise;
    };
    return JsonSchemaProvider;
}(utils_1.Disposable));
exports.JsonSchemaProvider = JsonSchemaProvider;
