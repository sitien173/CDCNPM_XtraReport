/**
* DevExpress Analytics (query-builder\elements\columnExpression.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var criteriaOperator_1 = require("../../widgets/criteria/operators/criteriaOperator");
var serializer_1 = require("../../serializer/serializer");
var utils_1 = require("../../widgets/criteria/utils");
var property_1 = require("../../widgets/criteria/operators/property");
var _arrayutils_1 = require("../../core/utils/_arrayutils");
var columnExpressionMeta_1 = require("./columnExpressionMeta");
var ColumnExpression = (function () {
    function ColumnExpression(model, query, serializer) {
        var _this = this;
        serializer = serializer || new serializer_1.ModelSerializer();
        serializer.deserialize(this, model);
        this._dependedTables = [];
        if (this.table()) {
            var tableRef = query.getTable(this.table());
            this.table = ko.pureComputed(function () { return tableRef.actualName(); });
            this._dependedTables.push(tableRef);
        }
        else if (this.expression()) {
            try {
                this._criteria = criteriaOperator_1.CriteriaOperator.parse(this.expression());
                utils_1.criteriaForEach(this._criteria, function (operand) {
                    if (operand instanceof property_1.OperandProperty) {
                        var dependedTable = _arrayutils_1.findFirstItemMatchesCondition(query.tables(), function (table) { return operand.propertyName.indexOf(table.actualName() + '.') === 0; });
                        dependedTable && _this._dependedTables.push(dependedTable);
                    }
                });
            }
            catch (e) {
            }
        }
    }
    ColumnExpression.prototype.actualName = function () {
        return this.alias() || this.column();
    };
    ColumnExpression.prototype.getInfo = function () {
        return columnExpressionMeta_1.columnExpressionSerializationsInfo;
    };
    ColumnExpression.prototype.isDepended = function (tableActualName) {
        return !!_arrayutils_1.findFirstItemMatchesCondition(this._dependedTables, function (depended) { return depended.actualName() === tableActualName; });
    };
    return ColumnExpression;
}());
exports.ColumnExpression = ColumnExpression;
