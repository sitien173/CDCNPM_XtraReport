/**
* DevExpress Analytics (query-builder\elements\columnModel.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var queryElementModel_1 = require("./queryElementModel");
var columnModelMeta_1 = require("./columnModelMeta");
var dbColumn_1 = require("../dataSource/dbColumn");
var utils_1 = require("../../diagram/utils");
var _columnExpressionCollectionHelper_1 = require("../utils/_columnExpressionCollectionHelper");
var _utils_1 = require("../../serializer/_utils");
var ColumnViewModel = (function (_super) {
    __extends(ColumnViewModel, _super);
    function ColumnViewModel(model, dbColumn, parent, serializer) {
        var _this = _super.call(this, _utils_1.extend({ '@ControlType': 'Column' }, model), parent, serializer) || this;
        _this.isNotAvailable = ko.observable(false);
        _this._type = ko.observable(dbColumn_1.DBColumnType.Unknown);
        _this._size = ko.observable('');
        if (dbColumn.size)
            _this._size(dbColumn.size);
        if (dbColumn.type)
            _this._type(dbColumn.type);
        _this.displayType = ko.pureComputed(function () {
            return dbColumn_1.DBColumnType[_this._type()] + (_this._size() ? '(' + _this._size() + ')' : '');
        });
        _this.dataType = ko.pureComputed(function () {
            return dbColumn_1.DBColumn.GetType(_this._type());
        });
        _this.actualName = ko.pureComputed(function () {
            return _this.alias() || _this.name();
        });
        var points = parent.getColumnConnectionPoints(_this);
        _this.rightConnectionPoint = {
            side: ko.observable(utils_1.PointSide.East),
            location: points.right
        };
        _this.leftConnectionPoint = {
            side: ko.observable(utils_1.PointSide.West),
            location: points.left
        };
        var query = parent.parentModel();
        var targetColumn = ko.pureComputed(function () { return _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.find(query.columns, parent.actualName(), _this.name()); });
        _this.aggregate = ko.pureComputed({
            read: function () { return targetColumn() ? targetColumn().aggregate() : columnModelMeta_1.AggregationType.None; },
            write: function (value) {
                targetColumn() && targetColumn().aggregate(value);
            }
        });
        _this.alias = ko.pureComputed({
            read: function () { return targetColumn() ? targetColumn().alias() : ''; },
            write: function (value) {
                targetColumn() && targetColumn().alias(value || null);
            }
        });
        var orderByItem = ko.pureComputed(function () { return _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.find(query.sorting, parent.actualName(), _this.name()); });
        _this.sortingType = ko.computed({
            read: function () {
                if (!orderByItem())
                    return 'Unsorted';
                return orderByItem().descending() ? 'Descending' : 'Ascending';
            },
            write: function (newValue) {
                if (newValue !== 'Unsorted') {
                    if (orderByItem()) {
                        orderByItem().descending(newValue === 'Descending');
                    }
                    else {
                        _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.addNew(query, query.sorting, parent.actualName(), _this.name())
                            .descending(newValue === 'Descending');
                    }
                }
                else if (orderByItem()) {
                    _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.remove(query.sorting, parent.actualName(), _this.name());
                }
            }
        });
        _this.sortOrder = ko.computed({
            read: function () {
                var index = query.sorting().indexOf(orderByItem());
                return index < 0 ? undefined : index + 1;
            },
            write: function (newValue) {
                if (!orderByItem())
                    return;
                newValue = Math.min(newValue, query.sorting().length);
                newValue = Math.max(newValue, 1);
                var oldValue = query.sorting().indexOf(orderByItem());
                var item = query.sorting.splice(oldValue, 1);
                query.sorting.splice(newValue - 1, 0, item[0]);
            }
        });
        var groupByItem = ko.computed(function () { return _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.find(query.grouping, parent.actualName(), _this.name()); });
        _this.aggregate.subscribe(function (value) {
            var parentTable = _this.parentModel();
            if (value !== columnModelMeta_1.AggregationType.None) {
                _this.groupBy(false);
                if (!_this.alias() || _this._isAliasAutoGenerated(parentTable.actualName())) {
                    var aggregateAlias = _this.name() + '_' + value;
                    _this.alias(_columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.setUniqueAlias(query.columns, aggregateAlias));
                }
            }
            else if (_this._isAliasAutoGenerated(parentTable.actualName())) {
                _this.alias(null);
            }
        });
        _this.groupBy = ko.computed({
            read: function () { return !!groupByItem(); },
            write: function (value) {
                if (value) {
                    _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.addNew(query, query.grouping, parent.actualName(), _this.name());
                    _this.aggregate(columnModelMeta_1.AggregationType.None);
                }
                else {
                    _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.remove(query.grouping, parent.actualName(), _this.name());
                }
            }
        });
        _this.toggleSelected = function (value, lazy) {
            if (lazy === void 0) { lazy = false; }
            if (!!targetColumn() === value)
                return;
            if (value) {
                _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.addNew(query, query.columns, parent.actualName(), _this.name(), lazy);
            }
            else {
                _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.remove(query.columns, parent.actualName(), _this.name(), lazy);
                _this.groupBy(false);
            }
        };
        _this.selected = ko.pureComputed({
            read: function () { return !!targetColumn(); },
            write: function (value) { return _this.toggleSelected(value); }
        });
        return _this;
    }
    ColumnViewModel.prototype._isAliasAutoGenerated = function (addedTableName) {
        if (addedTableName && this.alias() && this.alias().indexOf(addedTableName + '_') === 0) {
            if (this.alias().substring(addedTableName.length + 1) === this.name())
                return true;
        }
        if (!this.alias() || this.alias().indexOf(this.name() + '_') !== 0)
            return false;
        var funcName = this.alias().substring(this.name().length + 1);
        if (funcName.match(new RegExp('_[0-9]+$')))
            funcName = funcName.substring(0, funcName.indexOf('_'));
        return Object.keys(columnModelMeta_1.AggregationType).indexOf(funcName) > 0;
    };
    ColumnViewModel.prototype.getInfo = function () {
        return columnModelMeta_1.columnSerializationInfo;
    };
    ColumnViewModel.prototype.isPropertyDisabled = function (name) {
        if (this.isNotAvailable())
            return true;
        if (name === 'sortOrder') {
            return this.sortingType() === 'Unsorted';
        }
        else if (name === 'aggregate' || name === 'alias') {
            return !this.selected();
        }
        else if (name === 'groupBy') {
            var query = this.root;
            return this.aggregate() && query.aggregatedColumnsCount() === 1;
        }
        else
            return false;
    };
    Object.defineProperty(ColumnViewModel.prototype, "specifics", {
        get: function () {
            return dbColumn_1.DBColumn.GetSpecific(this.dataType());
        },
        enumerable: true,
        configurable: true
    });
    return ColumnViewModel;
}(queryElementModel_1.QueryElementBaseViewModel));
exports.ColumnViewModel = ColumnViewModel;
