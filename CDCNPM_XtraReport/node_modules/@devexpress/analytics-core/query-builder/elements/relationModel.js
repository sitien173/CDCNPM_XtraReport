/**
* DevExpress Analytics (query-builder\elements\relationModel.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var queryElementModel_1 = require("./queryElementModel");
var utils_1 = require("../../serializer/utils");
var joinConditionModel_1 = require("./joinConditionModel");
var relationModelMeta_1 = require("./relationModelMeta");
var _utils_1 = require("../../serializer/_utils");
var RelationViewModel = (function (_super) {
    __extends(RelationViewModel, _super);
    function RelationViewModel(model, query, serializer) {
        var _this = _super.call(this, _utils_1.extend(model, { '@ControlType': 'Relation', '@ItemType': 'Relation' }), query, serializer) || this;
        _this.parentTable = ko.observable(query.getTable(_this.parentTableName.peek()));
        _this.nestedTable = ko.observable(query.getTable(_this.nestedTableName.peek()));
        _this.parentTableName = ko.pureComputed(function () { return _this.parentTable().actualName(); });
        _this.nestedTableName = ko.pureComputed(function () { return _this.nestedTable().actualName(); });
        _this.conditions = utils_1.deserializeArray(model['KeyColumns'], function (item) {
            return new joinConditionModel_1.JoinConditionViewModel(item, _this, serializer);
        });
        return _this;
    }
    RelationViewModel.prototype._getConditionNumber = function () {
        var result = this.conditions().length + 1;
        var existingNumbers = this.conditions().map(function (_c) { return _c.seriesNumber(); });
        for (var index = 0; index < this.conditions().length; index++) {
            if (existingNumbers.indexOf(index + 1) !== -1)
                continue;
            result = index + 1;
            break;
        }
        return result;
    };
    RelationViewModel.prototype.getInfo = function () {
        return relationModelMeta_1.relationSerializationInfo;
    };
    RelationViewModel.prototype.addChild = function (control) {
        var condition = control;
        if (this.conditions && this.conditions.indexOf(condition) === -1) {
            condition.seriesNumber(this._getConditionNumber());
            condition.parentModel(this);
            this.conditions.push(condition);
        }
    };
    RelationViewModel.prototype.removeChild = function (control) {
        var index = this.conditions().indexOf(control);
        if (index > -1)
            this.conditions.splice(index, 1);
        if (this.conditions().length === 0)
            this.parentModel().removeChild(this);
    };
    return RelationViewModel;
}(queryElementModel_1.QueryElementBaseViewModel));
exports.RelationViewModel = RelationViewModel;
