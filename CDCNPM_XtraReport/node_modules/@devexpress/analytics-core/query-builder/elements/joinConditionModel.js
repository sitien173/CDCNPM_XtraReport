/**
* DevExpress Analytics (query-builder\elements\joinConditionModel.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var routedConnectorModel_1 = require("../../diagram/elements/connectors/routedConnectorModel");
var controlsFactory_1 = require("../utils/controlsFactory");
var utils_1 = require("../../diagram/utils");
var _utils_1 = require("../../serializer/_utils");
var JoinConditionViewModel = (function (_super) {
    __extends(JoinConditionViewModel, _super);
    function JoinConditionViewModel(control, relation, serializer) {
        var _this = _super.call(this, _utils_1.extend(control, { '@ControlType': 'JoinCondition', '@ItemType': 'KeyColumn' }), relation, serializer) || this;
        _this.parentColumn = ko.pureComputed(function () { return relation.parentTable().getColumn(_this.parentColumnName()); });
        _this.nestedColumn = ko.pureComputed(function () { return relation.nestedTable().getColumn(_this.nestedColumnName()); });
        _this.joinType = relation.joinType;
        _this.left = ko.pureComputed(function () { return relation.parentTableName() + '.' + _this.parentColumnName(); });
        _this.right = ko.pureComputed(function () { return relation.nestedTableName() + '.' + _this.nestedColumnName(); });
        _this._disposables.push(ko.computed(function () {
            if (_this.parentColumn() && _this.nestedColumn()) {
                var result = utils_1.determineConnectingPoints(_this.parentColumn(), _this.nestedColumn());
                _this.startPoint().connectingPoint(result.start);
                _this.endPoint().connectingPoint(result.end);
            }
        }));
        return _this;
    }
    JoinConditionViewModel.prototype.getControlFactory = function () {
        return controlsFactory_1.controlsFactory;
    };
    JoinConditionViewModel.prototype.preInitProperties = function () {
        this.startPoint = ko.observable();
        this.endPoint = ko.observable();
    };
    return JoinConditionViewModel;
}(routedConnectorModel_1.RoutedConnectorViewModel));
exports.JoinConditionViewModel = JoinConditionViewModel;
