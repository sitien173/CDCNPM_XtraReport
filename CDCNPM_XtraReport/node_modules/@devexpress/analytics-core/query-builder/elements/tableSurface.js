/**
* DevExpress Analytics (query-builder\elements\tableSurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var ko = require("knockout");
var queryElementSurface_1 = require("./queryElementSurface");
var tableModel_1 = require("./tableModel");
var columnSurface_1 = require("./columnSurface");
var allColumnsSurface_1 = require("./allColumnsSurface");
var _utils_1 = require("../../serializer/_utils");
var TableSurface = (function (_super) {
    __extends(TableSurface, _super);
    function TableSurface(control, context) {
        var _this = _super.call(this, control, context, null) || this;
        _this.contenttemplate = 'dxqb-table';
        _this.template = 'dxqb-table-main';
        _this.toggleSelected = function () {
            _this.getControlModel().toggleSelectedColumns();
        };
        _this.selectedWrapper = ko.pureComputed(function () {
            return _this.getControlModel().allColumnsSelected();
        });
        _this.isInitialized = control.isInitialized;
        _this.columns = ko.pureComputed(function () {
            return control.columns().map(function (columnVewModel) { return new columnSurface_1.ColumnSurface(columnVewModel, context); });
        });
        _this.asterisk = new allColumnsSurface_1.AllColumnsSurface(control.asterisk, context);
        return _this;
    }
    TableSurface.prototype.resizable = function (resizeHandler, element) {
        return _utils_1.extend({}, resizeHandler, {
            handles: 'e, w',
            $selectedNodes: $(element),
            minWidth: tableModel_1.TableViewModel.TABLE_MIN_WIDTH,
        });
    };
    return TableSurface;
}(queryElementSurface_1.QueryElementBaseSurface));
exports.TableSurface = TableSurface;
