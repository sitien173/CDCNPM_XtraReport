/**
* DevExpress Analytics (query-builder\elements\columnSurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var baseSurface_1 = require("../../core/elements/baseSurface");
var _queryBuilderObjectsProvider_1 = require("../widgets/filterEditor/_queryBuilderObjectsProvider");
var _dragDropHandler_1 = require("../../core/dragDrop/_dragDropHandler");
var ColumnSurface = (function (_super) {
    __extends(ColumnSurface, _super);
    function ColumnSurface(control, context) {
        var _this = _super.call(this, control, context, null) || this;
        _this.template = 'dxqb-table-field';
        _this.toggleSelected = function () {
            _this.getControlModel().selected(!_this.getControlModel().selected());
        };
        _this.selectedWrapper = ko.pureComputed(function () {
            return _this.getControlModel().selected();
        });
        _this.isNotAvailable = ko.pureComputed(function () { return _this._control.isNotAvailable(); });
        _this.isAggregate = ko.pureComputed(function () { return _queryBuilderObjectsProvider_1.isAggregatedExpression(_this.getControlModel()); });
        _this.isAscending = ko.pureComputed(function () {
            return _this.getControlModel().sortingType() === 'Ascending';
        });
        _this.isDescending = ko.pureComputed(function () {
            return _this.getControlModel().sortingType() === 'Descending';
        });
        _this.cssClasses = function (query, columnDragHandler, parent) {
            if (!_this._isJoined) {
                _this._isJoined = ko.pureComputed(function () {
                    return query.isJoined(_this) || _this.getControlModel() === columnDragHandler.getDragColumn();
                });
            }
            if (!_this._isHovered) {
                _this._isHovered = ko.pureComputed(function () {
                    var isColumnDragStarted = !!columnDragHandler.getDragColumn();
                    var isCurrentTableNotParentForDraggedColumn = isColumnDragStarted && _this.getControlModel().parentModel() !== columnDragHandler.getDragColumn().parentModel();
                    return _this.underCursor().isOver && (!_dragDropHandler_1.DragDropHandler.started() || isCurrentTableNotParentForDraggedColumn);
                });
            }
            return {
                'dxd-state-invalid': _this.isNotAvailable,
                'dxd-state-active': _this.selected(),
                'dxd-state-joined': _this._isJoined,
                'dxd-state-hovered': _this._isHovered,
            };
        };
        return _this;
    }
    return ColumnSurface;
}(baseSurface_1.SurfaceElementBase));
exports.ColumnSurface = ColumnSurface;
