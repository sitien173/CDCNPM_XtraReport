/**
* DevExpress Analytics (query-builder\utils\requestwrapper.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = require("../../core/utils/_utils");
var initializer_1 = require("../initializer");
var serializer_1 = require("../../serializer/serializer");
var _requestwrapper_1 = require("./_requestwrapper");
var RequestWrapper = (function () {
    function RequestWrapper() {
    }
    RequestWrapper.prototype.sendRequest = function (action, arg) {
        return _utils_1.ajax(initializer_1.HandlerUri(), action, arg);
    };
    RequestWrapper.prototype._sendRequest = function (settings) {
        return _utils_1.ajax(settings);
    };
    RequestWrapper.prototype.getDbSchema = function (connection, tables) {
        var requestModel = {
            connectionJSON: _requestwrapper_1.serializeDataConnection(connection),
            tables: null,
            views: null
        };
        if (tables && tables.length > 0) {
            requestModel.tables = (tables || []).filter(function (x) { return !x.isView; }).map(function (x) { return x.name; });
            requestModel.views = (tables || []).filter(function (x) { return x.isView; }).map(function (x) { return x.name; });
        }
        return this.sendRequest('getDBSchema', encodeURIComponent(JSON.stringify(requestModel)));
    };
    RequestWrapper.prototype.getDbStoredProcedures = function (connection) {
        var requestJson = JSON.stringify({
            connectionJSON: _requestwrapper_1.serializeDataConnection(connection)
        });
        return this.sendRequest('getDBStoredProcedures', encodeURIComponent(requestJson));
    };
    RequestWrapper.prototype.getSelectStatement = function (connection, queryJSON) {
        var requestJson = JSON.stringify({
            connectionJSON: _requestwrapper_1.serializeDataConnection(connection),
            sqlQueryJSON: queryJSON
        });
        return this.sendRequest('getSelectStatement', encodeURIComponent(requestJson));
    };
    RequestWrapper.prototype.getDataPreview = function (connection, queryJSON) {
        var requestJson = JSON.stringify({
            connectionJSON: _requestwrapper_1.serializeDataConnection(connection),
            sqlQueryJSON: queryJSON
        });
        return this.sendRequest('getDataPreview', encodeURIComponent(requestJson));
    };
    RequestWrapper.prototype.rebuildResultSchema = function (dataSource, queryName, relationsEditing) {
        if (relationsEditing === void 0) { relationsEditing = false; }
        var requestJson = JSON.stringify({
            sqlDataSourceJSON: JSON.stringify({ 'SqlDataSource': new serializer_1.ModelSerializer().serialize(dataSource) }),
            queryName: queryName,
            relationsEditing: relationsEditing
        });
        return this.sendRequest('rebuildResultSchema', encodeURIComponent(requestJson));
    };
    RequestWrapper.prototype.validateJsonUri = function (jsonDataSource) {
        var uriJsonSourceJSON = JSON.stringify(jsonDataSource.source.serialize(true));
        var requestJson = JSON.stringify({
            uriJsonSourceJSON: uriJsonSourceJSON
        });
        var ajaxSettings = {
            uri: initializer_1.HandlerUri(),
            action: 'validateJsonEndPoint',
            arg: encodeURIComponent(requestJson),
            ignoreError: function () { return true; }
        };
        return this._sendRequest(ajaxSettings);
    };
    RequestWrapper.prototype.saveJsonSource = function (connectionName, jsonDataSource) {
        var jsonSource = jsonDataSource.source;
        var jsonSourceJSON = JSON.stringify(jsonSource.serialize(true));
        var requestString = JSON.stringify({
            connectionName: connectionName,
            customJson: jsonSource.json(),
            uriJsonSourceJSON: jsonSourceJSON
        });
        return this.sendRequest('saveJsonSource', encodeURIComponent(requestString));
    };
    RequestWrapper.prototype.getJsonSchema = function (jsonDataSource, parameters) {
        var jsonSource = jsonDataSource.source;
        var jsonSourceJSON = JSON.stringify(jsonSource.serialize(true));
        var requestString = JSON.stringify({
            connectionName: jsonDataSource.connectionName(),
            customJson: jsonSource.json(),
            uriJsonSourceJSON: jsonSourceJSON,
            parameters: parameters
        });
        return this.sendRequest('getJsonSchema', encodeURIComponent(requestString));
    };
    RequestWrapper.prototype.getObjectTypeDescriptions = function (context) {
        return this.sendRequest('getObjectSchema', context);
    };
    return RequestWrapper;
}());
exports.RequestWrapper = RequestWrapper;
