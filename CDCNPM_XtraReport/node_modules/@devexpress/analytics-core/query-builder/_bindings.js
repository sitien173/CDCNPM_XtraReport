/**
* DevExpress Analytics (query-builder\_bindings.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
require("jquery-ui/ui/widgets/draggable");
require("jquery-ui/ui/widgets/resizable");
require("jquery-ui/ui/widgets/selectable");
require("jquery-ui/ui/widgets/mouse");
var _localization_1 = require("../property-grid/localization/_localization");
var _internal_1 = require("../serializer/_internal");
var templateUtils_1 = require("../property-grid/widgets/templateUtils");
ko.bindingHandlers['dxdTableView'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var templateHtml = templateUtils_1.getTemplate('dxd-tableview'), $element = $(element).append(templateHtml), $titles, $content, rtl = !!bindingContext.$root.rtl, value = ko.unwrap(valueAccessor());
        var onDataScroll = function (e) {
            if (e.scrollOffset.left >= 0) {
                if (!$titles)
                    $titles = $element.find('.dxd-tableview-titles');
                if (!$content)
                    $content = $element.find('.dxd-tableview-data table');
                $titles.offset({ left: $content.offset().left, top: $titles.offset().top });
            }
        };
        var onDataScrollInitialized = function (e) {
            $content = null;
            if (!rtl)
                return;
            var dxScroll = e.component;
            setTimeout(function () { return dxScroll.scrollTo({ left: dxScroll.scrollWidth(), top: 0 }); }, 1);
        };
        ko.applyBindings({
            onDataScroll: onDataScroll,
            onDataScrollInitialized: onDataScrollInitialized,
            data: value,
            rtl: rtl,
            noDataText: _localization_1.noDataText,
            isImage: function (index) { return value.schema[index].type === 'System.Byte[]'; },
            isImageTooLarge: function (cellValue) { return cellValue[0] === '!'; },
            getImageTooLargeText: function (cellValue) { return 'Image too large (' + cellValue.substring(1) + ' bytes)'; }
        }, $element.children()[0]);
        $element.find('.dxd-tableview-titles .dxd-tableview-resizable').each(function (index, resizable) {
            var $title = $(resizable).find('.dxd-tableview-cell-text');
            var $column = $element.find('.dxd-tableview-data .dxd-tableview-resizable' + index);
            if (index < value.schema.length - 1) {
                $(resizable)['resizable']({
                    handles: 'e',
                    alsoResize: $column.parent(),
                    resize: function (e, ui) {
                        $title.outerWidth(ui.size.width);
                        $column.outerWidth(ui.size.width);
                    }
                });
            }
            var maxWidth = Math.max($title.width(), $column.width());
            $title.width(maxWidth);
            $column.width(maxWidth);
        });
        _internal_1.addDisposeCallback($element.children()[0], function () {
            $element.find('.dxd-tableview-titles .dxd-tableview-resizable').each(function (_, resizable) {
                if ($(resizable).data('ui-resizable'))
                    $(resizable)['resizable']('destroy');
            });
            $element = null;
        });
        return { controlsDescendantBindings: true };
    }
};
