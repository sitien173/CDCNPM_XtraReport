/**
* DevExpress Analytics (query-builder\wizard\pageIterator.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var utils_1 = require("../../serializer/utils");
var wizardPage_1 = require("./pages/wizardPage");
var PageIterator = (function (_super) {
    __extends(PageIterator, _super);
    function PageIterator(pageFactory, stateManager, _onResetPage) {
        if (_onResetPage === void 0) { _onResetPage = function () { return void 0; }; }
        var _this = _super.call(this) || this;
        _this.pageFactory = pageFactory;
        _this.stateManager = stateManager;
        _this._onResetPage = _onResetPage;
        _this._pages = [];
        _this._currentIndex = 0;
        return _this;
    }
    PageIterator.prototype.dispose = function () {
        this._pages.forEach(function (x) { return x.dispose(); });
        this._pages = [];
    };
    PageIterator.prototype.__resetPages = function (fromIndex) {
        if (fromIndex < this._pages.length) {
            for (var index = this._pages.length - 1; index >= fromIndex; index--) {
                this.stateManager.resetPageState(this._pages[index].pageId);
                this._onResetPage(this._pages[index]);
                this._pages[index].dispose();
                this._pages.splice(index, 1);
            }
        }
    };
    PageIterator.prototype._nextPage = function () {
        return this._pages[this._currentIndex + 1];
    };
    PageIterator.prototype._getNextExistingPage = function () {
        this._currentIndex += 1;
        var deferred = $.Deferred();
        deferred.resolve(this._pages[this._currentIndex]);
        return deferred.promise();
    };
    PageIterator.prototype._resetPages = function () {
        this.__resetPages(this._currentIndex + 1);
    };
    PageIterator.prototype._getNextNewPage = function (nextPageId) {
        this._currentIndex += 1;
        var deferred = $.Deferred();
        this.__resetPages(this._currentIndex);
        var pageMetadata = this.pageFactory.getMetadata(nextPageId);
        var newPage = new wizardPage_1._WrappedWizardPage(nextPageId, pageMetadata.create(), pageMetadata.template, pageMetadata.description);
        this._pages.push(newPage);
        deferred.resolve(newPage);
        return deferred.promise();
    };
    PageIterator.prototype._getStartPage = function (pageId) {
        pageId = pageId || this.getNextPageId();
        var pageMetadata = this.pageFactory.getMetadata(pageId);
        var startPage = new wizardPage_1._WrappedWizardPage(pageId, pageMetadata.create(), pageMetadata.template, pageMetadata.description);
        this._pages.push(startPage);
        return startPage;
    };
    PageIterator.prototype._getNextPage = function () {
        var currentPage = this._getCurrentPage();
        if (currentPage.isChanged || !this._nextPage()) {
            var nextPageId = this.getNextPageId(this._getCurrentPage().pageId);
            if (!nextPageId)
                return $.Deferred().reject().promise();
            currentPage.isChanged = false;
            return this._getNextNewPage(nextPageId);
        }
        else
            return this._getNextExistingPage();
    };
    PageIterator.prototype._getPreviousPage = function () {
        var deferred = $.Deferred();
        if (this._currentIndex - 1 < 0) {
            deferred.reject(null);
        }
        else {
            this._currentIndex -= 1;
            deferred.resolve(this._pages[this._currentIndex]);
        }
        return deferred.promise();
    };
    PageIterator.prototype._goToPage = function (pageId) {
        var deferred = $.Deferred();
        var page = this._pages.filter(function (page) { return page.pageId === pageId; })[0];
        if (page) {
            this._currentIndex = this._pages.indexOf(page);
            deferred.resolve(page);
        }
        else {
            deferred.reject(null);
        }
        return deferred.promise();
    };
    PageIterator.prototype._getCurrentPage = function () {
        return this._pages[this._currentIndex];
    };
    PageIterator.prototype._getCurrentState = function () {
        return this.stateManager.getCurrentState();
    };
    PageIterator.prototype.getNextPageId = function (pageId) {
        return '';
    };
    return PageIterator;
}(utils_1.Disposable));
exports.PageIterator = PageIterator;
