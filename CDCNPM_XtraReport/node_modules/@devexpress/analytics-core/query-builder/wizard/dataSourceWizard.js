/**
* DevExpress Analytics (query-builder\wizard\dataSourceWizard.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var pageIterator_1 = require("./pageIterator");
var pageFactory_1 = require("./pageFactory");
var pageId_1 = require("./pageId");
var chooseDataSourceTypePage_1 = require("./pages/chooseDataSourceTypePage");
var popupWizard_1 = require("./popupWizard");
var _utils_1 = require("../../serializer/_utils");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var chooseJsonSourcePage_1 = require("./pages/jsonDataSourceWizard/chooseJsonSourcePage");
var chooseJsonConnectionPage_1 = require("./pages/jsonDataSourceWizard/chooseJsonConnectionPage");
var chooseJsonSchemaPage_1 = require("./pages/jsonDataSourceWizard/chooseJsonSchemaPage");
var configureObjectDataSourceParametersPage_1 = require("./pages/objectDataSourceWizard/configureObjectDataSourceParametersPage");
var configureQueryPage_1 = require("./pages/sqlDataSourceWizard/configureQueryPage");
var chooseSqlConnectionPage_1 = require("./pages/chooseSqlConnectionPage");
var configureParametersPage_1 = require("./pages/sqlDataSourceWizard/configureParametersPage");
var _DataSourceWizardOptionsBase = (function () {
    function _DataSourceWizardOptionsBase() {
        this.connectionStrings = {
            json: ko.observableArray([]),
            sql: ko.observableArray([])
        };
        this.callbacks = {};
        this.rtl = false;
        this.disableCustomSql = false;
        this.wizardSettings = new DataSourceWizardSettings().createDefault();
        this.allowCreateNewJsonConnection = false;
    }
    Object.defineProperty(_DataSourceWizardOptionsBase.prototype, "jsonDataSourceAvailable", {
        get: function () {
            return this.wizardSettings.enableJsonDataSource && (this.allowCreateNewJsonConnection || (ko.unwrap(this.connectionStrings.json) || []).length > 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(_DataSourceWizardOptionsBase.prototype, "sqlDataSourceAvailable", {
        get: function () {
            return this.wizardSettings.enableSqlDataSource && (ko.unwrap(this.connectionStrings.sql) || []).length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(_DataSourceWizardOptionsBase.prototype, "objectDataSourceAvailable", {
        get: function () {
            return this.wizardSettings.enableObjectDataSource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(_DataSourceWizardOptionsBase.prototype, "canCreateDataSource", {
        get: function () {
            return this.jsonDataSourceAvailable || this.sqlDataSourceAvailable || this.objectDataSourceAvailable;
        },
        enumerable: true,
        configurable: true
    });
    return _DataSourceWizardOptionsBase;
}());
exports._DataSourceWizardOptionsBase = _DataSourceWizardOptionsBase;
var _DataSourceWizardOptions = (function (_super) {
    __extends(_DataSourceWizardOptions, _super);
    function _DataSourceWizardOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return _DataSourceWizardOptions;
}(_DataSourceWizardOptionsBase));
exports._DataSourceWizardOptions = _DataSourceWizardOptions;
var DataSourceWizardSettings = (function () {
    function DataSourceWizardSettings() {
    }
    DataSourceWizardSettings.prototype.createDefault = function (settings) {
        var newSettings = { enableJsonDataSource: true, enableSqlDataSource: true, enableObjectDataSource: true };
        if (!settings)
            return newSettings;
        if (settings.enableJsonDataSource !== undefined)
            newSettings.enableJsonDataSource = settings.enableJsonDataSource;
        if (settings.enableSqlDataSource !== undefined)
            newSettings.enableSqlDataSource = settings.enableSqlDataSource;
        if (settings.enableObjectDataSource != undefined)
            newSettings.enableObjectDataSource = settings.enableObjectDataSource;
        return newSettings;
    };
    return DataSourceWizardSettings;
}());
exports.DataSourceWizardSettings = DataSourceWizardSettings;
var DataSourceWizardPageIterator = (function (_super) {
    __extends(DataSourceWizardPageIterator, _super);
    function DataSourceWizardPageIterator(pageFactory, stateManager, _dataSourceWizardOptions) {
        var _this = _super.call(this, pageFactory, stateManager) || this;
        _this._dataSourceWizardOptions = _dataSourceWizardOptions;
        return _this;
    }
    DataSourceWizardPageIterator.prototype.getNextPageId = function (pageId) {
        if (!pageId && this._dataSourceWizardOptions.jsonDataSourceAvailable && this._dataSourceWizardOptions.sqlDataSourceAvailable) {
            return pageId_1.DataSourceWizardPageId.ChooseDataSourceTypePage;
        }
        else if (!pageId) {
            return this.getNextPageId(pageId_1.DataSourceWizardPageId.ChooseDataSourceTypePage);
        }
        else if (pageId === pageId_1.DataSourceWizardPageId.ChooseDataSourceTypePage && this._getCurrentState().dataSourceType === chooseDataSourceTypePage_1.DataSourceType.Sql) {
            return pageId_1.SqlDataSourceWizardPageId.ChooseConnectionPage;
        }
        else if (pageId === pageId_1.DataSourceWizardPageId.ChooseDataSourceTypePage && this._getCurrentState().dataSourceType === chooseDataSourceTypePage_1.DataSourceType.Json && this._dataSourceWizardOptions.connectionStrings.json().length > 0) {
            return pageId_1.JsonDataSourceWizardPageId.ChooseConnectionPage;
        }
        else if (this._dataSourceWizardOptions.allowCreateNewJsonConnection && pageId === pageId_1.DataSourceWizardPageId.ChooseDataSourceTypePage && this._getCurrentState().dataSourceType === chooseDataSourceTypePage_1.DataSourceType.Json) {
            return pageId_1.JsonDataSourceWizardPageId.ChooseJsonSourcePage;
        }
        else if (pageId === pageId_1.JsonDataSourceWizardPageId.ChooseConnectionPage && this._getCurrentState().jsonDataSourceWizard.connectionName) {
            return pageId_1.JsonDataSourceWizardPageId.ChooseJsonSchemaPage;
        }
        else if (this._dataSourceWizardOptions.allowCreateNewJsonConnection && pageId === pageId_1.JsonDataSourceWizardPageId.ChooseConnectionPage && !this._getCurrentState().jsonDataSourceWizard.connectionName) {
            return pageId_1.JsonDataSourceWizardPageId.ChooseJsonSourcePage;
        }
        else if (pageId === pageId_1.JsonDataSourceWizardPageId.ChooseJsonSourcePage) {
            return pageId_1.JsonDataSourceWizardPageId.ChooseJsonSchemaPage;
        }
        else if (pageId === pageId_1.SqlDataSourceWizardPageId.ChooseConnectionPage && this._getCurrentState().sqlDataSourceWizard.name) {
            return pageId_1.SqlDataSourceWizardPageId.ConfigureQueryPage;
        }
        else if (pageId === pageId_1.SqlDataSourceWizardPageId.ConfigureQueryPage && this._getCurrentState().sqlDataSourceWizard.sqlDataSourceJSON) {
            return pageId_1.SqlDataSourceWizardPageId.ConfigureParametersPage;
        }
    };
    return DataSourceWizardPageIterator;
}(pageIterator_1.PageIterator));
exports.DataSourceWizardPageIterator = DataSourceWizardPageIterator;
var DataSourceWizard = (function (_super) {
    __extends(DataSourceWizard, _super);
    function DataSourceWizard(pageFactory, _wizardOptions) {
        var _this = _super.call(this, pageFactory, _wizardOptions.callbacks.finishCallback) || this;
        _this._wizardOptions = _wizardOptions;
        _this._extendCssClass = 'dxrd-sqldatasource-wizard';
        _this.title = localization_utils_1.getLocalization('Data Source Wizard', 'AnalyticsCoreStringId.DSWizard_Title');
        return _this;
    }
    DataSourceWizard.prototype.initialize = function (state, createIterator) {
        var _this = this;
        if (createIterator === void 0) { createIterator = function (pageFactory, stateManager) { return new DataSourceWizardPageIterator(pageFactory, stateManager, _this._wizardOptions); }; }
        if (this._wizardOptions.sqlDataSourceAvailable || !_utils_1.isEmptyObject(state.sqlDataSourceWizard)) {
            state.dataSourceType = chooseDataSourceTypePage_1.DataSourceType.Sql;
        }
        else if (this._wizardOptions.jsonDataSourceAvailable || state.jsonDataSourceWizard.jsonSource) {
            state.dataSourceType = chooseDataSourceTypePage_1.DataSourceType.Json;
        }
        _super.prototype.initialize.call(this, state, createIterator);
    };
    DataSourceWizard.prototype.canRunWizard = function () {
        return this._wizardOptions.jsonDataSourceAvailable || this._wizardOptions.sqlDataSourceAvailable;
    };
    return DataSourceWizard;
}(popupWizard_1.PopupWizard));
exports.DataSourceWizard = DataSourceWizard;
function _registerDataSourceWizardPages(factory, dataSourceWizardOptions) {
    if (factory === void 0) { factory = new pageFactory_1.PageFactory(); }
    chooseDataSourceTypePage_1._registerChooseDataSourceTypePage(factory, dataSourceWizardOptions);
    chooseJsonSourcePage_1._registerChooseJsonSourcePage(factory, dataSourceWizardOptions.requestWrapper, dataSourceWizardOptions.callbacks.getItemsProviderCallback);
    chooseJsonConnectionPage_1._registerChooseJsonConnectionPage(factory, dataSourceWizardOptions);
    chooseJsonSchemaPage_1._registerChooseJsonSchemaPage(factory, dataSourceWizardOptions.requestWrapper, dataSourceWizardOptions.callbacks);
    configureObjectDataSourceParametersPage_1._registerConfigureObjectDataSourceParametersPage(factory, dataSourceWizardOptions.callbacks.getItemsProviderCallback);
    configureQueryPage_1._registerConfigureQueryPage(factory, dataSourceWizardOptions);
    chooseSqlConnectionPage_1._registerChooseSqlConnectionPage(factory, dataSourceWizardOptions.connectionStrings.sql);
    configureParametersPage_1._registerConfigureParametersPage(factory, dataSourceWizardOptions.requestWrapper);
    return factory;
}
exports._registerDataSourceWizardPages = _registerDataSourceWizardPages;
function _createDataSourceWizard(factory, dataSourceWizardOptions) {
    if (factory === void 0) { factory = new pageFactory_1.PageFactory(); }
    factory = _registerDataSourceWizardPages(factory, dataSourceWizardOptions);
    return new DataSourceWizard(factory, dataSourceWizardOptions);
}
exports._createDataSourceWizard = _createDataSourceWizard;
