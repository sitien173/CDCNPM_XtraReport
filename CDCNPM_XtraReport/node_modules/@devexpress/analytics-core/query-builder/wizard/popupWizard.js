/**
* DevExpress Analytics (query-builder\wizard\popupWizard.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var wizard_1 = require("./wizard");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var _utils_1 = require("../../widgets/_utils");
var templateUtils_1 = require("../../property-grid/widgets/templateUtils");
var PopupWizard = (function (_super) {
    __extends(PopupWizard, _super);
    function PopupWizard(pageFactory, finishCallback) {
        var _this = _super.call(this, pageFactory, finishCallback) || this;
        _this.height = ko.observable(505);
        _this.width = ko.observable(690);
        _this._extendCssClass = '';
        _this._container = _utils_1.getParentContainer;
        _this.itemsProvider = ko.observable();
        _this.nextButton = {
            text: localization_utils_1.getLocalization('Next', 'AnalyticsCoreStringId.Wizard_Next'),
            disabled: ko.computed(function () { return !_this.canNext(); }),
            onClick: function () { return _this.nextAction(); }
        };
        _this.cancelButton = {
            text: localization_utils_1.getLocalization('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'),
            onClick: function () { return _this.isVisible(false); }
        };
        _this.previousButton = {
            text: localization_utils_1.getLocalization('Previous', 'AnalyticsCoreStringId.Wizard_Previous'),
            disabled: ko.computed(function () { return _this.isFirstPage(); }),
            onClick: function () { return _this.previousAction(); }
        };
        _this.finishButton = {
            text: localization_utils_1.getLocalization('Finish', 'AnalyticsCoreStringId.Wizard_Finish'),
            disabled: ko.computed(function () {
                return !_this.canFinish();
            }),
            onClick: function () { return _this.finishAction(); }
        };
        _this._titleTemplate = templateUtils_1.getTemplate('dx-wizard-headerNew');
        _this.title = 'Popup Wizard';
        return _this;
    }
    PopupWizard._getLoadPanelViewModel = function (element, observableVisible) {
        var $container = $(element).closest('.dxrd-wizard-content');
        return {
            animation: {
                show: { type: 'fade', from: 0, to: 1, duration: 700 },
                hide: { type: 'fade', from: 1, to: 0, duration: 700 }
            },
            deferRendering: false,
            message: localization_utils_1.getLocalization('Loading...', 'AnalyticsCoreStringId.Loading'),
            visible: observableVisible,
            shading: true,
            shadingColor: 'transparent',
            position: { of: $container },
            container: $container
        };
    };
    PopupWizard.prototype.start = function () {
        _super.prototype.start.call(this);
        this.isVisible(true);
    };
    PopupWizard.prototype._wizardPopupPosition = function (element) {
        return {
            of: _utils_1.getParentContainer(element)
        };
    };
    PopupWizard.prototype._loadPanelViewModel = function (element) {
        return this._getLoadPanelViewModel(element, this.isLoading);
    };
    PopupWizard.prototype._getLoadPanelViewModel = function (element, observableVisible) {
        return PopupWizard._getLoadPanelViewModel(element, observableVisible);
    };
    return PopupWizard;
}(wizard_1.BaseWizard));
exports.PopupWizard = PopupWizard;
