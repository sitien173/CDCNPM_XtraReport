/**
* DevExpress Analytics (query-builder\wizard\chooseAvailablePage.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var wizardPage_1 = require("./pages/wizardPage");
var _utils_1 = require("./internal/_utils");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var ChooseAvailableItemPage = (function (_super) {
    __extends(ChooseAvailableItemPage, _super);
    function ChooseAvailableItemPage(items, canCreateNew) {
        var _a;
        if (canCreateNew === void 0) { canCreateNew = true; }
        var _this = _super.call(this) || this;
        _this.items = items;
        _this.selectedItems = ko.observableArray([]);
        _this.operations = [
            { text: _this.existingOperationText, createNew: false },
            { text: _this.createNewOperationText, createNew: true }
        ];
        _this.selectedOperation = ko.observable(_this.operations[0]);
        _this._createNew = ko.pureComputed(function () { return _this.selectedOperation().createNew; });
        _this.canCreateNew = ko.observable(canCreateNew);
        (_a = _this._disposables).push.apply(_a, _utils_1.subscribeProperties([_this.selectedOperation, _this.selectedItems], function () { return _this._onChange(); }));
        return _this;
    }
    ChooseAvailableItemPage.prototype.canNext = function () {
        return this.selectedItems().length !== 0 || this.selectedOperation().createNew;
    };
    ChooseAvailableItemPage.prototype.initialize = function (state) {
        var item = this._getSelectedItem(state);
        this.selectedItems(item ? [item] : []);
        return $.Deferred().resolve(this).promise();
    };
    ChooseAvailableItemPage.prototype._displayExpr = function (item) {
        return item.description || item.name;
    };
    ChooseAvailableItemPage.prototype._getSelectedItem = function (state) {
        return this.items()[0];
    };
    ChooseAvailableItemPage.prototype.onDblClick = function () {
        this[wizard_1.BaseWizard.__nextActionFunctionName] && this[wizard_1.BaseWizard.__nextActionFunctionName]();
    };
    Object.defineProperty(ChooseAvailableItemPage.prototype, "createNewOperationText", {
        get: function () {
            return localization_utils_1.getLocalization("No, I'd like to create a new data source", 'AnalyticsCoreStringId.Wizard_CreateNewDataSource');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChooseAvailableItemPage.prototype, "existingOperationText", {
        get: function () {
            return localization_utils_1.getLocalization('Yes, let me choose an existing data source from the list', 'AnalyticsCoreStringId.Wizard_ChooseDataSourceFromList');
        },
        enumerable: true,
        configurable: true
    });
    return ChooseAvailableItemPage;
}(wizardPage_1.WizardPageBase));
exports.ChooseAvailableItemPage = ChooseAvailableItemPage;
var wizard_1 = require("./wizard");
