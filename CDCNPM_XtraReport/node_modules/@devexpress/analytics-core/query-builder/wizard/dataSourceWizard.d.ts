/**
* DevExpress Analytics (query-builder\wizard\dataSourceWizard.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { IDataSourceWizardCallbacks } from './internal/_utils';
import { IDataSourceWizardConnectionStrings } from './internal/initializer';
import { RequestWrapper, ISelectStatementResponse } from '../utils/requestwrapper';
import { TableQuery } from '../dataSource/sql/tableQuery';
import { PageIterator } from './pageIterator';
import { PageFactory } from './pageFactory';
import { StateManager } from './stateManager';
import { PopupWizard } from './popupWizard';
import { IDataSourceWizardState } from './dataSourceWizardState';
export declare class _DataSourceWizardOptionsBase<T extends IDataSourceWizardCallbacks> {
    readonly jsonDataSourceAvailable: boolean;
    readonly sqlDataSourceAvailable: boolean;
    readonly objectDataSourceAvailable: boolean;
    readonly canCreateDataSource: boolean;
    connectionStrings: IDataSourceWizardConnectionStrings;
    callbacks: T;
    rtl: boolean;
    requestWrapper: RequestWrapper;
    disableCustomSql: boolean;
    wizardSettings: IDataSourceWizardSettings;
    queryName: string;
    allowCreateNewJsonConnection: boolean;
}
export declare class _DataSourceWizardOptions extends _DataSourceWizardOptionsBase<IDataSourceWizardCallbacks> {
}
export interface IDataSourceWizardSettings {
    enableJsonDataSource?: boolean;
    enableSqlDataSource?: boolean;
    enableObjectDataSource?: boolean;
}
export declare class DataSourceWizardSettings implements IDataSourceWizardSettings {
    createDefault(settings?: IDataSourceWizardSettings): IDataSourceWizardSettings;
    enableJsonDataSource?: boolean;
    enableSqlDataSource?: boolean;
    enableObjectDataSource?: boolean;
}
export interface IRetrieveQuerySqlCallback {
    (query: TableQuery, isInProcess: ko.Observable<boolean>): JQueryPromise<ISelectStatementResponse>;
}
export declare class DataSourceWizardPageIterator extends PageIterator {
    private _dataSourceWizardOptions;
    constructor(pageFactory: PageFactory, stateManager: StateManager, _dataSourceWizardOptions: _DataSourceWizardOptions);
    getNextPageId(pageId: string): any;
}
export declare class DataSourceWizard extends PopupWizard {
    private _wizardOptions;
    constructor(pageFactory: any, _wizardOptions: _DataSourceWizardOptions);
    initialize(state: IDataSourceWizardState, createIterator?: (pageFactory: PageFactory, stateManager: StateManager) => PageIterator): void;
    canRunWizard(): boolean;
    _extendCssClass: string;
    title: any;
}
export declare function _registerDataSourceWizardPages(factory: PageFactory, dataSourceWizardOptions: _DataSourceWizardOptions): PageFactory;
export declare function _createDataSourceWizard(factory: PageFactory, dataSourceWizardOptions: _DataSourceWizardOptions): DataSourceWizard;
