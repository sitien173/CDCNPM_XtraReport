/**
* DevExpress Analytics (query-builder\wizard\internal\_configureParametersUtils.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../../../serializer/utils");
var editorsInfo_1 = require("../../../property-grid/widgets/editorsInfo");
var utils_2 = require("../../dataSource/utils");
var _treelistController_1 = require("../../../widgets/treelist/_treelistController");
var _treelistItem_1 = require("../../../widgets/treelist/_treelistItem");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var ParametersTreeListItemBase = (function (_super) {
    __extends(ParametersTreeListItemBase, _super);
    function ParametersTreeListItemBase(parameter) {
        var _this = _super.call(this) || this;
        _this.editor = editorsInfo_1.editorTemplates.getEditor('commonCollection');
        _this.isList = false;
        _this.contenttemplate = 'dx-treelist-accordion-contenttemplate-custom-with-actions';
        _this.actionsTemplate = 'dx-treelist-item-actions';
        _this.dataSourceParameter = ko.observable(parameter);
        _this._name = parameter.name;
        _this._displayName = parameter.displayName;
        return _this;
    }
    Object.defineProperty(ParametersTreeListItemBase.prototype, "name", {
        get: function () {
            return this._name();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParametersTreeListItemBase.prototype, "displayName", {
        get: function () {
            return this._displayName || this.name;
        },
        enumerable: true,
        configurable: true
    });
    return ParametersTreeListItemBase;
}(utils_1.Disposable));
exports.ParametersTreeListItemBase = ParametersTreeListItemBase;
var ParametersTreeListItem = (function (_super) {
    __extends(ParametersTreeListItem, _super);
    function ParametersTreeListItem(parameter, parent) {
        var _this = _super.call(this, parameter) || this;
        _this.parent = parent;
        return _this;
    }
    ParametersTreeListItem.prototype.query = function () {
        return this.parent.query();
    };
    return ParametersTreeListItem;
}(ParametersTreeListItemBase));
exports.ParametersTreeListItem = ParametersTreeListItem;
var ParametersTreeListRootItemBase = (function () {
    function ParametersTreeListRootItemBase(name) {
        this.isList = true;
        this.specifics = 'List';
        this.visible = ko.observable(true);
        this.name = this.displayName = name;
        this.parameters = ko.observableArray([]);
    }
    ParametersTreeListRootItemBase.prototype.removeChild = function (parameter) {
        this.parameters.remove(parameter);
    };
    return ParametersTreeListRootItemBase;
}());
exports.ParametersTreeListRootItemBase = ParametersTreeListRootItemBase;
var ParametersTreeListRootItem = (function (_super) {
    __extends(ParametersTreeListRootItem, _super);
    function ParametersTreeListRootItem(query) {
        var _this = _super.call(this, query.name()) || this;
        _this._query = query;
        return _this;
    }
    ParametersTreeListRootItem.prototype.query = function () {
        return this._query;
    };
    return ParametersTreeListRootItem;
}(ParametersTreeListRootItemBase));
exports.ParametersTreeListRootItem = ParametersTreeListRootItem;
var ParametersTreeListController = (function (_super) {
    __extends(ParametersTreeListController, _super);
    function ParametersTreeListController(rootItems, createNewParameter) {
        var _this = _super.call(this) || this;
        _this._createNewParameter = createNewParameter;
        _this._rootItems = rootItems;
        return _this;
    }
    ParametersTreeListController.prototype.hasItems = function (item) {
        return item.isList;
    };
    ParametersTreeListController.prototype.getActions = function (treeListItem) {
        var _this = this;
        var actions = [];
        if (!treeListItem.data)
            return actions;
        if (treeListItem.data.query().type() === utils_2.SqlQueryType.storedProcQuery) {
            return treeListItem.data.isList ? [] : [_treelistItem_1.treeListEditAction];
        }
        if (treeListItem.data.isList) {
            var item = treeListItem.data;
            actions.push({
                clickAction: function () {
                    return item.parameters.push(new ParametersTreeListItem(_this._createNewParameter(item.name, item.parameters()), item));
                },
                imageClassName: 'dxrd-image-add',
                imageTemplateName: 'dxrd-svg-operations-add',
                text: localization_utils_1.getLocalization('Add parameter', 'AnalyticsCoreStringId.FieldListActions_AddParameter')
            });
        }
        else {
            var parameter = treeListItem.data;
            actions.push({
                clickAction: function () {
                    parameter.parent.removeChild(parameter);
                },
                imageClassName: 'dxrd-image-recycle-bin',
                imageTemplateName: 'dxrd-svg-operations-recycle_bin',
                text: localization_utils_1.getLocalization('Remove parameter', 'DataAccessUIStringId.Button_Remove'),
            });
            actions.push(_treelistItem_1.treeListEditAction);
        }
        return actions;
    };
    ParametersTreeListController.prototype.canSelect = function (value) {
        return true;
    };
    return ParametersTreeListController;
}(_treelistController_1.TreeListController));
exports.ParametersTreeListController = ParametersTreeListController;
