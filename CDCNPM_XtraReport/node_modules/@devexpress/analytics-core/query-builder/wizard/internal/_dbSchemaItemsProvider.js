/**
* DevExpress Analytics (query-builder\wizard\internal\_dbSchemaItemsProvider.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var _arrayutils_1 = require("../../../core/utils/_arrayutils");
var _treeListNode_1 = require("./_treeListNode");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var _storedProceduresQueryControl_1 = require("./_storedProceduresQueryControl");
var utils_1 = require("../../../serializer/utils");
var DBSchemaItemsProvider = (function (_super) {
    __extends(DBSchemaItemsProvider, _super);
    function DBSchemaItemsProvider(dbSchemaProvider, customQueries, showQbCallBack, disableCustomSql, afterCheckToggled) {
        var _a;
        var _this = _super.call(this) || this;
        _this._callBack = ko.observable({
            deleteAction: function (name) {
                _this._customQueries
                    .remove(_arrayutils_1.findFirstItemMatchesCondition(_this._customQueries(), function (item) { return (item.name() || item.generateName()) === name; }));
            },
            showQbCallBack: null,
            disableCustomSql: false,
        });
        _this._checkedRootNodesCount = ko.pureComputed(function () {
            var count = 0;
            for (var i = 0; i < _this._rootItems.length && count < 2; i++) {
                count += _this._rootItems[i].countChecked();
            }
            return count;
        });
        _this.hasCheckedItems = ko.pureComputed(function () {
            return !(_this._checkedRootNodesCount() === 0);
        });
        _this.nextButtonDisabled = ko.pureComputed(function () {
            if (_this._checkedRootNodesCount() > 1) {
                return false;
            }
            return !_this.hasParametersToEdit();
        });
        _this.hasParametersToEdit = ko.pureComputed(function () {
            for (var i = 0; i < _this._rootItems.length; i++) {
                if (_this._rootItems[i]['hasParamsToEdit'] && _this._rootItems[i]['hasParamsToEdit']())
                    return true;
            }
            return false;
        });
        _this.tables = function () { return _this._tables; };
        _this.views = function () { return _this._views; };
        _this.procedures = function () { return _this._procedures; };
        _this.queries = function () { return _this._queries; };
        _this.customQueries = function () { return _this._customQueries; };
        _this._callBack().showQbCallBack = showQbCallBack;
        _this._callBack().disableCustomSql = disableCustomSql;
        _this._tables = new _treeListNode_1.TreeNode('tables', localization_utils_1.getLocalization('Tables', 'DataAccessStringId.ConfigureMultiQueryPage_TableCategory'), 'list', false, afterCheckToggled);
        _this._views = new _treeListNode_1.TreeNode('views', localization_utils_1.getLocalization('Views', 'DataAccessStringId.ConfigureMultiQueryPage_ViewCategory'), 'list', false, afterCheckToggled);
        _this._procedures = new _treeListNode_1.ParameterTreeNode('procedures', localization_utils_1.getLocalization('Stored Procedures', 'DataAccessStringId.ConfigureMultiQueryPage_SpCategory'), 'list', false, afterCheckToggled);
        _this._queries = new _treeListNode_1.QueriesTreeNode('queries', localization_utils_1.getLocalization('Queries', 'DataAccessStringId.ConfigureMultiQueryPage_QueryCategory'), 'list', false, _this._callBack, afterCheckToggled);
        (_a = _this._disposables).push.apply(_a, [_this._tables, _this._views, _this._procedures, _this._queries]);
        _this._rootItems = [
            _this._tables,
            _this._views,
            _this._procedures,
            _this._queries
        ];
        _this.getItems = function (pathRequest) {
            var result = $.Deferred();
            if (!pathRequest.fullPath) {
                result.resolve(_this._rootItems);
            }
            else if (pathRequest.fullPath === 'tables') {
                dbSchemaProvider.getDbSchema().done(function (dbSchema) {
                    if (_this._tables.children().length === 0) {
                        var tables = [];
                        dbSchema.tables.forEach(function (table) {
                            if (!table.isView) {
                                tables.push(new _treeListNode_1.TreeNode(table.name, table.name, 'table', _this._tables.checked.peek(), afterCheckToggled));
                            }
                        });
                        _this._tables.initializeChildren(tables);
                        result.resolve(tables);
                    }
                    else {
                        result.resolve(_this._tables.children());
                    }
                }).fail(result.reject);
            }
            else if (pathRequest.fullPath === 'views') {
                dbSchemaProvider.getDbSchema().done(function (dbSchema) {
                    if (_this._views.children().length === 0) {
                        var views = [];
                        dbSchema.tables.forEach(function (table) {
                            if (table.isView) {
                                views.push(new _treeListNode_1.TreeNode(table.name, table.name, 'view', _this._views.checked.peek(), afterCheckToggled));
                            }
                        });
                        _this._views.initializeChildren(views);
                        result.resolve(views);
                    }
                    else {
                        result.resolve(_this._views.children());
                    }
                }).fail(result.reject);
            }
            else if (pathRequest.fullPath === 'procedures') {
                dbSchemaProvider.getDbStoredProcedures().done(function (storedProcedures) {
                    if (_this._procedures.children().length === 0) {
                        var procedures = storedProcedures.map(function (proc) {
                            var node = new _treeListNode_1.TreeLeafNode(proc.name, _storedProceduresQueryControl_1.StoredProceduresQueryControl.generateStoredProcedureDisplayName(proc), 'procedure', _this._procedures.checked.peek(), proc.arguments, afterCheckToggled);
                            _this._disposables.push(node);
                            return node;
                        });
                        _this._procedures.initializeChildren(procedures);
                        result.resolve(procedures);
                    }
                    else {
                        result.resolve(_this._procedures.children());
                    }
                }).fail(result.reject);
            }
            else if (pathRequest.fullPath === 'queries') {
                var queries = customQueries().map(function (query) {
                    var name = query.name() || query.generateName();
                    var currentQuery = _this._queries.children().filter(function (q) { return q['query'] === query; })[0];
                    if (currentQuery)
                        return currentQuery;
                    var queryNode = new _treeListNode_1.TreeQueryNode(name, name, 'query', !!currentQuery && currentQuery.checked(), query.parameters, _this._callBack, afterCheckToggled, query);
                    _this._disposables.push(queryNode);
                    queryNode.setObservableName(ko.computed({
                        read: function () { return query.name() || query.generateName(); },
                        write: function (newVal) { return query.name(newVal); }
                    }));
                    return queryNode;
                });
                _this._queries.initializeChildren(queries);
                result.resolve(queries);
            }
            else {
                dbSchemaProvider.getDbTable(pathRequest.path).done(function (table) {
                    var tableTreeNode;
                    if (table.isView) {
                        tableTreeNode = _arrayutils_1.findFirstItemMatchesCondition(_this._views.children(), function (item) { return item.name === table.name; });
                    }
                    else {
                        tableTreeNode = _arrayutils_1.findFirstItemMatchesCondition(_this._tables.children(), function (item) { return item.name === table.name; });
                    }
                    if (tableTreeNode.children().length === 0) {
                        var columns = table.columns.map(function (column) {
                            var node = new _treeListNode_1.TreeLeafNode(column.name, column.name, 'column', tableTreeNode.checked.peek(), null, afterCheckToggled);
                            _this._disposables.push(node);
                            return node;
                        });
                        tableTreeNode.initializeChildren(columns);
                        result.resolve(columns);
                    }
                    else {
                        result.resolve(tableTreeNode.children());
                    }
                }).fail(result.reject);
            }
            return result.promise();
        };
        _this._customQueries = customQueries;
        return _this;
    }
    return DBSchemaItemsProvider;
}(utils_1.Disposable));
exports.DBSchemaItemsProvider = DBSchemaItemsProvider;
