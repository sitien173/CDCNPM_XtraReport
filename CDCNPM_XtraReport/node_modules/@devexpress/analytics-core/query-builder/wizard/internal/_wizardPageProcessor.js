/**
* DevExpress Analytics (query-builder\wizard\internal\_wizardPageProcessor.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../../serializer/utils");
var stateManager_1 = require("../stateManager");
var _wizardPageSectionIterator_1 = require("./_wizardPageSectionIterator");
var eventManager_1 = require("../../../serializer/eventManager");
var wizard_1 = require("../wizard");
var _utils_1 = require("./_utils");
var WizardPageProcessor = (function (_super) {
    __extends(WizardPageProcessor, _super);
    function WizardPageProcessor(pageFactory, _loadingState, _nextAction) {
        var _this = _super.call(this) || this;
        _this.pageFactory = pageFactory;
        _this.events = new eventManager_1.EventManager();
        _this._loadingTimeout = null;
        _this._changeTimeout = null;
        _this.sections = [];
        _this.isLoading = ko.observable(false);
        if (_loadingState)
            _this._loadingState = _loadingState;
        if (_nextAction)
            _this._extendedNextAction = _nextAction;
        _this._disposables.push(_this.events);
        return _this;
    }
    WizardPageProcessor.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.sections.forEach(function (x) { return x.resetPage(); });
        this.sections = [];
    };
    WizardPageProcessor.prototype._createLoadingState = function (page) {
        var _this = this;
        if (!page[WizardPageProcessor.__loadingStateFunctionName]) {
            page[WizardPageProcessor.__loadingStateFunctionName] = function (newVal) { return _this._loadingState(newVal); };
        }
    };
    WizardPageProcessor.prototype._createNextAction = function (page) {
        var _this = this;
        if (!page[wizard_1.BaseWizard.__nextActionFunctionName])
            page[wizard_1.BaseWizard.__nextActionFunctionName] = function () { return _this._extendedNextAction(); };
    };
    WizardPageProcessor.prototype._loadingState = function (active) {
        var _this = this;
        if (active) {
            this._loadingTimeout && clearTimeout(this._loadingTimeout);
            this._loadingTimeout = setTimeout(function () {
                _this.isLoading(true);
            }, 100);
        }
        else {
            this._loadingTimeout && clearTimeout(this._loadingTimeout);
            this.isLoading(false);
        }
    };
    WizardPageProcessor.prototype._extendedNextAction = function () { };
    WizardPageProcessor.prototype._resetPageById = function (pageId) {
        var page = this.getPageById(pageId);
        page.resetPage();
    };
    WizardPageProcessor.prototype.initialize = function (state, createIterator) {
        var _this = this;
        if (createIterator === void 0) { createIterator = function (pageFactory, stateManager) { return new _wizardPageSectionIterator_1.WizardPageSectionIterator(pageFactory, stateManager, function (pageId) { return _this._resetPageById(pageId); }); }; }
        this.events.call('beforeInitialize', { wizard: this, state: state });
        this.stateManager = new stateManager_1.StateManager(state, this.pageFactory);
        this.iterator = createIterator(this.pageFactory, this.stateManager);
        this.sections = [];
        Object.keys(this.pageFactory.metadata).forEach(function (key) {
            _this.sections.push(new _wizardPageSectionIterator_1.WizardPageSection(key, _this.pageFactory.metadata[key]));
        });
        this.sections = this.sections.sort(function (a, b) { return a.metadata.position - b.metadata.position; });
        this.events.call('afterInitialize', { wizard: this });
    };
    WizardPageProcessor.prototype._canNext = function (currentPage) {
        var pageMetadata = !this.isLoading() && currentPage && currentPage.page && this.pageFactory.getMetadata(currentPage.pageId);
        return pageMetadata && pageMetadata.canNext(currentPage.page);
    };
    WizardPageProcessor.prototype._canFinish = function (currentPage) {
        return !this.isLoading() && currentPage && this.pageFactory.getMetadata(currentPage.pageId).canFinish(currentPage.page);
    };
    WizardPageProcessor.prototype._initPage = function (page, force, stateChanged) {
        var _this = this;
        if (force === void 0) { force = false; }
        if (stateChanged === void 0) { stateChanged = false; }
        this._createNextAction(page.page);
        if (page.onChange) {
            page.onChange(function () {
                _this._changeTimeout && clearTimeout(_this._changeTimeout);
                _this._changeTimeout = setTimeout(function () {
                    _this._nextAction(page);
                }, 100);
            });
        }
        else
            throw Error('Page with id ' + page.pageId + ' cannot be used in AutoNavigation, because it does not have method OnChange');
        return page.initialize(this.stateManager.getPageState(page.pageId), force, stateChanged).always(function () { return _this._loadingState(false); });
    };
    WizardPageProcessor.prototype.getPageById = function (pageId) {
        return this.sections.filter(function (x) { return x.pageId === pageId; })[0];
    };
    WizardPageProcessor.prototype.start = function () {
        var _this = this;
        this.events.call('beforeStart', { wizard: this });
        this._loadingState(true);
        var page = this.iterator.getStartPage();
        this.events.call('beforePageInitialize', _utils_1._createBeforeInitializePageEventArgs(page, this));
        this._initPage(page).done(function () {
            var pageSection = _this.getPageById(page.pageId);
            if (pageSection) {
                pageSection.setPage(page);
                _this.events.call('afterPageInitialize', _utils_1._createPageEventArgs(page, _this));
                _this._nextAction(page);
            }
            else {
                throw Error('Page Section with id ' + page.pageId + ' is not found.');
            }
        });
    };
    WizardPageProcessor.prototype.finishAction = function () {
        var _this = this;
        var deferred = $.Deferred();
        var resolved = false;
        for (var i = this.sections.length - 1; i >= 0; i--) {
            if (this.sections[i].page()) {
                this.sections[i].page().commit().done(function (result) {
                    if (_this.sections[i].page().isChanged) {
                        _this.events.call('beforeFinish', { wizardModel: _this, state: _this.stateManager.getCurrentState() });
                        _this.stateManager.setPageState(_this.sections[i].page().pageId, result);
                        _this.events.call('afterFinish', { wizardResult: _this, state: _this.stateManager.getCurrentState() });
                    }
                }).always(function () { return deferred.resolve(); });
                resolved = true;
                break;
            }
        }
        if (!resolved)
            deferred.resolve();
        return deferred.promise();
    };
    WizardPageProcessor.prototype._nextAction = function (currentPage, parentIsChanged) {
        var _this = this;
        if (parentIsChanged === void 0) { parentIsChanged = false; }
        if (!this._canNext(currentPage) && !this._canFinish(currentPage)) {
            currentPage.resetCommitedState();
            return this.iterator.resetNextPages(currentPage.pageId);
        }
        this._loadingState(true);
        currentPage.commit().done(function (result) {
            if (currentPage.isChanged || parentIsChanged || currentPage.page && currentPage.page.changeAlways) {
                _this.stateManager.setPageState(currentPage.pageId, result);
                _this.iterator.getNextPage(currentPage.pageId).done(function (pages) {
                    if (pages && pages.length > 0) {
                        pages.forEach(function (page) {
                            var containedPage = _this.getPageById(page.pageId);
                            var page = containedPage && containedPage.page() || page;
                            _this.events.call('beforePageInitialize', _utils_1._createBeforeInitializePageEventArgs(page, _this));
                            _this._initPage(page, !!containedPage.page(), currentPage.isChanged || parentIsChanged).done(function () {
                                _this.getPageById(page.pageId).setPage(page);
                                _this.events.call('afterPageInitialize', _utils_1._createPageEventArgs(page, _this));
                                _this._nextAction(page, currentPage.isChanged);
                            });
                        });
                    }
                    else
                        _this._loadingState(false);
                    currentPage.isChanged = false;
                }).fail(function () { return _this._loadingState(false); });
            }
            else
                _this._loadingState(false);
        }).fail(function () { return _this._loadingState(false); });
    };
    WizardPageProcessor.__loadingStateFunctionName = '__loadingState';
    return WizardPageProcessor;
}(utils_1.Disposable));
exports.WizardPageProcessor = WizardPageProcessor;
