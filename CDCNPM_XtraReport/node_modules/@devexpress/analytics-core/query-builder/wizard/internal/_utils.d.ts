/**
* DevExpress Analytics (query-builder\wizard\internal\_utils.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { SqlDataConnection } from '../../dataSource/sql/sqlDataConnection';
import { ISelectStatementResponse } from '../../utils/requestwrapper';
import { SqlDataSource } from '../../dataSource/sql/sqlDataSource';
import { ISqlQueryViewModel } from '../../dataSource/utils';
import { IItemsProvider } from '../../../widgets/utils';
import { TreeListItemViewModel, DefaultTreeListItemFactory } from '../../../widgets/treelist/_treelistItem';
import { TreeQueryNode } from './_treeListNode';
import { DataSourceParameter } from '../../dataSource/dataSourceParameter';
import { WizardSectionPosition } from '../fullscreen/pages/fullscreenWizardPage';
import { BaseWizard } from '../wizard';
import { WizardPageProcessor } from './_wizardPageProcessor';
import { _WrappedWizardPage } from '../pages/wizardPage';
import { IBeforeWizardPageInitializeEventArgs, IWizardPageEventArgs } from '../wizardEventManager';
export interface IParameter {
    name: string;
    value: any;
}
export interface IJsonDataSourceWizardCallbacks {
    getParameters?: () => IParameter[];
}
export interface IDataSourceWizardCallbacks extends IJsonDataSourceWizardCallbacks {
    selectStatement?: (connection: SqlDataConnection, queryJSON: string) => JQueryPromise<ISelectStatementResponse>;
    finishCallback?: (wizardModel: any) => JQueryPromise<any>;
    customQueriesPreset?: (dataSource: SqlDataSource) => JQueryPromise<ISqlQueryViewModel[]>;
    customizeQBInitData?: (data: any) => any;
    validateJsonUri?: (data: any) => any;
    getItemsProviderCallback?: () => IItemsProvider;
}
export declare class CustomQueryTreeListItem extends TreeListItemViewModel {
    dispose(): void;
    protected _getTemplateName(): string;
    protected _getCustomizedTemplateName(isEditable: boolean): string;
    queryName: ko.Computed<string>;
    data: TreeQueryNode;
    editingMode: ko.Observable<boolean>;
}
export declare class MultiQueryTreeListItemFactory extends DefaultTreeListItemFactory {
    createItem(options: any, path?: string[], onItemsVisibilityChanged?: any, rtl?: any, resolver?: any): TreeListItemViewModel | CustomQueryTreeListItem;
}
export interface IMultiQueryDataSourceWizardCallbacks extends IDataSourceWizardCallbacks {
    sqlDataSourceResultSchema?: (dataSource: SqlDataSource) => JQueryPromise<{
        resultSchemaJSON: string;
        connectionParameters?: string;
    }>;
}
export interface IParametersViewModelConverter {
    createParameterViewModel(parameter: DataSourceParameter): any;
    getParameterFromViewModel(parameterViewModel: any): DataSourceParameter;
}
export interface IWizardPageStyle {
    top?: any;
    bottom?: any;
    left?: any;
    right?: any;
    width?: any;
    height?: any;
    display?: any;
}
export declare function getSectionStyle(position: WizardSectionPosition, defaultMargin?: number, isVisible?: boolean): IWizardPageStyle;
export declare function subscribeArray<T>(array: ko.ObservableArray<T>, subscribeItem: (value: T, onChange: () => void) => void, onChange: () => void): ko.Subscription;
export declare function subscribeProperties(properties: Array<ko.Observable<any> | ko.Computed<any>>, onChange: (val?: any) => void): any[];
export declare function subscribeObject<T>(object: ko.Observable<T> | ko.Computed<T>, subscribeProperties: (value: T, onChange: () => void) => void, onChange: () => void): ko.Subscription;
export declare function _createBeforeInitializePageEventArgs<TWizard extends BaseWizard | WizardPageProcessor>(page: _WrappedWizardPage, self: TWizard): IBeforeWizardPageInitializeEventArgs<TWizard>;
export declare function _createPageEventArgs<TWizard extends BaseWizard | WizardPageProcessor>(page: _WrappedWizardPage, self: TWizard): IWizardPageEventArgs<TWizard>;
