/**
* DevExpress Analytics (query-builder\wizard\internal\_selectStatementQueryControl.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../dataSource/utils");
var utils_2 = require("../../../serializer/utils");
var _options_1 = require("../../widgets/ace/_options");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var customSqlQuery_1 = require("../../dataSource/sql/customSqlQuery");
var _infoMessageHelpers_1 = require("../../../core/utils/_infoMessageHelpers");
var _ace_available_1 = require("../../../widgets/ace/_ace-available");
var SelectStatementQueryControl = (function (_super) {
    __extends(SelectStatementQueryControl, _super);
    function SelectStatementQueryControl(sqlTextProvider, disableCustomSql) {
        var _this = _super.call(this) || this;
        _this._tableQueryString = ko.observable('');
        _this._query = ko.observable();
        _this._needToCustomizeParameters = ko.pureComputed(function () {
            return _this._query() && (_this._query().type() === utils_1.SqlQueryType.customSqlQuery || _this._query().parameters().length > 0);
        });
        _this.template = 'dxrd-select-control';
        _this.aceOptions = _options_1.createDefaultSQLAceOptions();
        _this.additionalOptions = _options_1.createDefaultSQLAdditionalOptions(function (newVal) { _this.sqlString(newVal); });
        _this.aceAvailable = _ace_available_1.aceAvailable();
        _this.languageHelper = _options_1.createDefaultSQLLanguageHelper();
        _this.caption = function () { return localization_utils_1.getLocalization('SQL string:', 'DataAccessUIStringId.QueryControl_SqlString'); };
        _this.sqlString = ko.pureComputed({
            read: function () {
                return _this._query() && _this._query().type() === utils_1.SqlQueryType.customSqlQuery ? _this._query().sqlString() : _this._tableQueryString();
            },
            write: function (val) {
                if (_this._query().type() !== utils_1.SqlQueryType.customSqlQuery) {
                    var customQuery = new customSqlQuery_1.CustomSqlQuery({ '@Name': _this._query().name() }, _this._query().parent);
                    customQuery.parameters(_this._query().parameters());
                    customQuery.sqlString(val);
                    _this._query(customQuery);
                }
                else {
                    _this._query().sqlString(val);
                }
            }
        });
        _this.isNextDisabled = ko.pureComputed(function () {
            return !_this.sqlString() || !_this._needToCustomizeParameters();
        });
        _this.isFinishDisabled = ko.pureComputed(function () {
            return !_this.sqlString() || _this._needToCustomizeParameters();
        });
        _this._sqlTextProvider = sqlTextProvider;
        _this.disableCustomSql = function () { return disableCustomSql; };
        _this.aceOptions.readOnly = _this.disableCustomSql();
        _this._disposables.push(_this._needToCustomizeParameters, _this.sqlString);
        return _this;
    }
    SelectStatementQueryControl.prototype.setQuery = function (query, isInProcess) {
        var _this = this;
        if (this._query() !== query && query.type() === utils_1.SqlQueryType.tableQuery) {
            isInProcess && isInProcess(true);
            return this._sqlTextProvider.getQuerySqlText(query)
                .done(function (response) {
                if (response.errorMessage)
                    _infoMessageHelpers_1.ShowMessage(response.errorMessage);
                _this._tableQueryString(response.sqlSelectStatement);
                _this._query(query);
            })
                .always(function () { isInProcess && isInProcess(false); });
        }
        else {
            this._query(query);
            return $.Deferred().resolve().promise();
        }
    };
    SelectStatementQueryControl.prototype.getQuery = function () {
        return this._query();
    };
    Object.defineProperty(SelectStatementQueryControl.prototype, "runQueryBuilderDisabled", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    return SelectStatementQueryControl;
}(utils_2.Disposable));
exports.SelectStatementQueryControl = SelectStatementQueryControl;
