/**
* DevExpress Analytics (query-builder\wizard\internal\_wizardPageSectionIterator.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var _wrappedWizardPageSection_1 = require("./_wrappedWizardPageSection");
var WizardPageSection = (function () {
    function WizardPageSection(pageId, metadata) {
        this.pageId = pageId;
        this.metadata = metadata;
        this.page = ko.observable(null);
    }
    WizardPageSection.prototype.resetPage = function () {
        this.page() && this.page().dispose();
        this.page(null);
    };
    WizardPageSection.prototype.setPage = function (page) {
        if (this.page() !== page)
            this.page(page);
    };
    return WizardPageSection;
}());
exports.WizardPageSection = WizardPageSection;
var WizardPageSectionIterator = (function () {
    function WizardPageSectionIterator(pageFactory, stateManager, _resetPageCallback) {
        this.pageFactory = pageFactory;
        this.stateManager = stateManager;
        this._resetPageCallback = _resetPageCallback;
        this._pagesIds = [];
        this._pages = [];
    }
    WizardPageSectionIterator.prototype._resetPages = function (fromIndex, resetPage) {
        var _this = this;
        if (resetPage === void 0) { resetPage = function (pageId) { return _this._resetPage(pageId); }; }
        if (fromIndex < this._pagesIds.length) {
            for (var index = this._pagesIds.length - 1; index >= fromIndex; index--) {
                this._pagesIds[index].forEach(function (pageId) { return resetPage(pageId); });
                this._pagesIds.splice(index, 1);
            }
        }
    };
    WizardPageSectionIterator.prototype._tryResetPageByMetadata = function (pageId) {
        if (this.pageFactory.getMetadata(pageId)['recreate']) {
            this._resetPage(pageId);
            return true;
        }
        return false;
    };
    WizardPageSectionIterator.prototype._resetPage = function (pageId) {
        this.stateManager.resetPageState(pageId);
        this._resetPageCallback(pageId);
        var page = this._getPage(pageId);
        if (page) {
            page.dispose();
            this._pages.splice(this._pages.indexOf(page), 1);
        }
    };
    WizardPageSectionIterator.prototype._createNewPage = function (nextPageId) {
        var pageMetadata = this.pageFactory.getMetadata(nextPageId);
        return new _wrappedWizardPageSection_1.WrappedWizardPageSection(nextPageId, pageMetadata.create(), pageMetadata);
    };
    WizardPageSectionIterator.prototype._getPage = function (pageId) {
        return this._pages.filter(function (x) { return x.pageId === pageId; })[0];
    };
    WizardPageSectionIterator.prototype._getNextPage = function (nextPageIds) {
        var _this = this;
        return $.Deferred().resolve(nextPageIds.map(function (nextPageId) {
            var page = _this._getPage(nextPageId);
            if (!page || _this._tryResetPageByMetadata(nextPageId)) {
                page = _this._createNewPage(nextPageId);
                _this._pages.push(page);
            }
            return page;
        })).promise();
    };
    WizardPageSectionIterator.prototype._getPageIndex = function (pageId) {
        return this._pagesIds.indexOf(this._pagesIds.filter(function (x) { return x.some(function (y) { return y === pageId; }); })[0]);
    };
    WizardPageSectionIterator.prototype.resetNextPages = function (pageId) {
        this._resetPages(this._getPageIndex(pageId) + 1);
    };
    WizardPageSectionIterator.prototype.getStartPage = function () {
        var startPageId = this.getNextPageId();
        var pageMetadata = this.pageFactory.getMetadata(startPageId);
        var page = new _wrappedWizardPageSection_1.WrappedWizardPageSection(startPageId, pageMetadata.create(), pageMetadata);
        this._pagesIds.push([startPageId]);
        return page;
    };
    WizardPageSectionIterator.prototype.getNextPage = function (currentPageId) {
        var _this = this;
        var index = this._getPageIndex(currentPageId);
        var nextPageIds = this.getNextPageId(currentPageId);
        if (!nextPageIds) {
            this.resetNextPages(currentPageId);
            return $.Deferred().reject().promise();
        }
        if (!nextPageIds['push']) {
            nextPageIds = [nextPageIds];
        }
        if (JSON.stringify(this._pagesIds[index + 1]) !== JSON.stringify(nextPageIds)) {
            this._resetPages(index + 1, function (pageId) {
                if (nextPageIds.indexOf(pageId) === -1) {
                    _this._resetPage(pageId);
                }
            });
            this._pagesIds.push(nextPageIds);
        }
        return this._getNextPage(nextPageIds);
    };
    WizardPageSectionIterator.prototype.getCurrentState = function () {
        return this.stateManager.getCurrentState();
    };
    WizardPageSectionIterator.prototype.getNextPageId = function (pageId) {
        return '';
    };
    return WizardPageSectionIterator;
}());
exports.WizardPageSectionIterator = WizardPageSectionIterator;
