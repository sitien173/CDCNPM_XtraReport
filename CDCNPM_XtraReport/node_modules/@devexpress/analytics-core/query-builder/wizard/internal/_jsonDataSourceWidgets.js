/**
* DevExpress Analytics (query-builder\wizard\internal\_jsonDataSourceWidgets.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var editor_1 = require("../../../property-grid/widgets/editor");
var _utils_1 = require("../../../property-grid/widgets/internal/_utils");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var _jsonSourceSettings_1 = require("./_jsonSourceSettings");
var _ace_available_1 = require("../../../widgets/ace/_ace-available");
var JsonStringEditor = (function (_super) {
    __extends(JsonStringEditor, _super);
    function JsonStringEditor(modelPropertyInfo, level, parentDisabled, textToSearch) {
        var _this = _super.call(this, modelPropertyInfo, level, parentDisabled, textToSearch) || this;
        _this.aceEditorHasErrors = ko.observable(false);
        _this.aceAvailable = _ace_available_1.aceAvailable();
        _this.editorContainer = ko.observable();
        _this.languageHelper = {
            getLanguageMode: function () { return 'ace/mode/json'; },
            createCompleters: function () { return []; }
        };
        _this.aceOptions = {
            showLineNumbers: false,
            highlightActiveLine: false,
            showPrintMargin: false,
            enableBasicAutocompletion: true,
            enableLiveAutocompletion: true
        };
        _this.isValid = ko.computed(function () {
            return _this._model() && _this._model().isValid();
        });
        _this.additionalOptions = {
            onChangeAnnotation: function (session) {
                var annotations = session && session.getAnnotations() || [];
                _this._model() && _this._model().aceEditorHasErrors && _this._model().aceEditorHasErrors(annotations.filter(function (annotation) { return annotation.type === 'error' || annotation.type === 'warning'; }).length > 0);
            },
            onBlur: function () {
                var editorContainer = _this.editorContainer();
                if (editorContainer) {
                    _this.value(editorContainer.getValue());
                }
            }
        };
        _this.jsonStringValidationRules = [{
                type: 'custom',
                reevaluate: true,
                validationCallback: function (options) { return _this.isValid(); },
                get message() {
                    return _jsonSourceSettings_1.getLocalizedValidationErrorMessage(localization_utils_1.getLocalization('The value cannot be empty and should have a valid format.', 'AnalyticsCoreStringId.ValueIsRequiredOrInvalidFormat_Error'), localization_utils_1.getLocalization('JSON String:', 'DataAccessUIStringId.WizardPageChooseJsonSource_Custom'));
                }
            }];
        return _this;
    }
    JsonStringEditor.prototype.uploadFile = function (e) {
        var _this = this;
        if (e && e.event) {
            e.event.stopPropagation();
            e.event.preventDefault();
        }
        _utils_1.uploadFile({
            accept: '.json,.txt'
        }).done(function (result) {
            var fileContent = atob(result.content);
            if (fileContent.indexOf('ï»¿') === 0) {
                fileContent = fileContent.substr('ï»¿'.length);
            }
            _this.value(fileContent);
        });
    };
    JsonStringEditor.prototype.getUploadTitle = function () {
        return localization_utils_1.getLocalization('Upload JSON File', 'AnalyticsCoreStringId.UploadJsonFile_Title');
    };
    return JsonStringEditor;
}(editor_1.Editor));
exports.JsonStringEditor = JsonStringEditor;
