/**
* DevExpress Analytics (query-builder\wizard\internal\_utils.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _treelistItem_1 = require("../../../widgets/treelist/_treelistItem");
var fullscreenWizardPage_1 = require("../fullscreen/pages/fullscreenWizardPage");
var CustomQueryTreeListItem = (function (_super) {
    __extends(CustomQueryTreeListItem, _super);
    function CustomQueryTreeListItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.queryName = ko.computed({
            read: function () { return _this.data && _this.data.name; },
            write: function (newVal) {
                if (_this.data && _this.data.name !== newVal) {
                    _this.data.name = newVal;
                    _this.data['_afterCheckToggled'] && _this.data['_afterCheckToggled'](_this.data);
                }
            }
        });
        _this.editingMode = ko.observable(false);
        return _this;
    }
    CustomQueryTreeListItem.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.queryName.dispose();
    };
    CustomQueryTreeListItem.prototype._getTemplateName = function () {
        return this._getCustomizedTemplateName(true);
    };
    CustomQueryTreeListItem.prototype._getCustomizedTemplateName = function (isEditable) {
        return isEditable ? 'dxd-custom-query-treelisitem' : _super.prototype._getTemplateName.call(this);
    };
    return CustomQueryTreeListItem;
}(_treelistItem_1.TreeListItemViewModel));
exports.CustomQueryTreeListItem = CustomQueryTreeListItem;
var MultiQueryTreeListItemFactory = (function (_super) {
    __extends(MultiQueryTreeListItemFactory, _super);
    function MultiQueryTreeListItemFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MultiQueryTreeListItemFactory.prototype.createItem = function (options, path, onItemsVisibilityChanged, rtl, resolver) {
        if (path[0] === 'queries') {
            return new CustomQueryTreeListItem(options, path, onItemsVisibilityChanged, rtl, resolver);
        }
        return _super.prototype.createItem.call(this, options, path, onItemsVisibilityChanged, rtl, resolver);
    };
    return MultiQueryTreeListItemFactory;
}(_treelistItem_1.DefaultTreeListItemFactory));
exports.MultiQueryTreeListItemFactory = MultiQueryTreeListItemFactory;
function getSectionStyle(position, defaultMargin, isVisible) {
    if (defaultMargin === void 0) { defaultMargin = 30; }
    if (isVisible === void 0) { isVisible = true; }
    var _clearStyle = 'inherit';
    var _defaultHalfMargin = '-' + (defaultMargin / 2) + 'px';
    var _fullSize = 100;
    var _defaultSize = _fullSize / 2;
    var _inPercent = function (size) {
        return size + '%';
    };
    if (!position) {
        return {
            top: _defaultHalfMargin,
            bottom: _defaultHalfMargin,
            left: _defaultHalfMargin,
            right: _defaultHalfMargin,
            width: _clearStyle,
            height: _clearStyle,
            display: isVisible ? 'block' : 'none'
        };
    }
    return {
        top: (position === fullscreenWizardPage_1.WizardSectionPosition.Left || position === fullscreenWizardPage_1.WizardSectionPosition.Right || position === fullscreenWizardPage_1.WizardSectionPosition.Top || position === fullscreenWizardPage_1.WizardSectionPosition.TopLeft || position === fullscreenWizardPage_1.WizardSectionPosition.TopRight) ? _defaultHalfMargin : _clearStyle,
        bottom: (position === fullscreenWizardPage_1.WizardSectionPosition.Left || position === fullscreenWizardPage_1.WizardSectionPosition.Right || position === fullscreenWizardPage_1.WizardSectionPosition.Bottom || position === fullscreenWizardPage_1.WizardSectionPosition.BottomLeft || position === fullscreenWizardPage_1.WizardSectionPosition.BottomRight) ? _defaultHalfMargin : _clearStyle,
        left: (position === fullscreenWizardPage_1.WizardSectionPosition.Top || position === fullscreenWizardPage_1.WizardSectionPosition.Bottom || position === fullscreenWizardPage_1.WizardSectionPosition.Left || position === fullscreenWizardPage_1.WizardSectionPosition.TopLeft || position === fullscreenWizardPage_1.WizardSectionPosition.BottomLeft) ? _defaultHalfMargin : _clearStyle,
        right: (position === fullscreenWizardPage_1.WizardSectionPosition.Top || position === fullscreenWizardPage_1.WizardSectionPosition.Bottom || position === fullscreenWizardPage_1.WizardSectionPosition.Right || position === fullscreenWizardPage_1.WizardSectionPosition.TopRight || position === fullscreenWizardPage_1.WizardSectionPosition.BottomRight) ? _defaultHalfMargin : _clearStyle,
        width: (position === fullscreenWizardPage_1.WizardSectionPosition.Top || position === fullscreenWizardPage_1.WizardSectionPosition.Bottom) ? _clearStyle : _inPercent(_defaultSize),
        height: (position === fullscreenWizardPage_1.WizardSectionPosition.Left || position === fullscreenWizardPage_1.WizardSectionPosition.Right) ? _clearStyle : _inPercent(_defaultSize),
        display: isVisible ? 'block' : 'none'
    };
}
exports.getSectionStyle = getSectionStyle;
function subscribeArray(array, subscribeItem, onChange) {
    array().forEach(function (item) { return subscribeItem(item, onChange); });
    return array.subscribe(function (changeSet) {
        changeSet.forEach(function (change) {
            if (change.status === 'added') {
                subscribeItem(change.value, onChange);
            }
            else if (change.status === 'deleted') {
                change.value['dispose'] && change.value['dispose']();
            }
        });
        onChange();
    }, null, 'arrayChange');
}
exports.subscribeArray = subscribeArray;
function subscribeProperties(properties, onChange) {
    var subscriptions = [];
    properties.forEach(function (property) {
        if (property && property.subscribe) {
            subscriptions.push(property.subscribe(function (val) { return onChange(val); }));
        }
    });
    return subscriptions;
}
exports.subscribeProperties = subscribeProperties;
function subscribeObject(object, subscribeProperties, onChange) {
    subscribeProperties(object(), onChange);
    return object.subscribe(function (newVal) {
        subscribeProperties(newVal, onChange);
        onChange();
    });
}
exports.subscribeObject = subscribeObject;
function _createBeforeInitializePageEventArgs(page, self) {
    return {
        page: page.page,
        pageId: page.pageId,
        wizard: self,
        state: self.stateManager.getPageState(page.pageId)
    };
}
exports._createBeforeInitializePageEventArgs = _createBeforeInitializePageEventArgs;
function _createPageEventArgs(page, self) {
    return {
        page: page.page,
        pageId: page.pageId,
        wizard: self
    };
}
exports._createPageEventArgs = _createPageEventArgs;
