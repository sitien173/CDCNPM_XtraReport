/**
* DevExpress Analytics (query-builder\wizard\internal\_jsonSourceSettings.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var _utils_1 = require("../../../property-grid/widgets/internal/_utils");
var utils_1 = require("../../../serializer/utils");
var jsonSourceSettings_1 = require("./jsonSourceSettings");
var propertygrid_1 = require("../../../property-grid/propertygrid");
var jsonDataSource_1 = require("../../dataSource/json/jsonDataSource");
var _jsonDataSourceWidgets_1 = require("./_jsonDataSourceWidgets");
var jsonAuthenticationInfo_1 = require("../../dataSource/json/jsonAuthenticationInfo");
var editorsInfo_1 = require("../../../property-grid/widgets/editorsInfo");
var _getNameHelpers_1 = require("../../../core/internal/_getNameHelpers");
var jsonParameter_1 = require("../../dataSource/json/jsonParameter");
var _utils_2 = require("./_utils");
var _utils_3 = require("../../../core/utils/_utils");
function getLocalizedValidationErrorMessage(emptyValueErrorMessage, localizedPropertyName, subProperty) {
    var requiredMessageSuffix = emptyValueErrorMessage || localization_utils_1.getLocalization('The value cannot be empty', 'AnalyticsCoreStringId.ParametersPanel_DateTimeValueValidationError');
    if (!localizedPropertyName)
        return requiredMessageSuffix;
    var propertyNamesPrefix = !subProperty ? localizedPropertyName : _utils_1.formatUnicorn('{0}. {1}', localizedPropertyName, subProperty);
    if (!localization_utils_1._stringEndsWith(propertyNamesPrefix, ':'))
        propertyNamesPrefix += ':';
    return _utils_1.formatUnicorn('{0} {1}', propertyNamesPrefix, requiredMessageSuffix);
}
exports.getLocalizedValidationErrorMessage = getLocalizedValidationErrorMessage;
var JsonDataSourceJsonSourcePageSettingsBase = (function (_super) {
    __extends(JsonDataSourceJsonSourcePageSettingsBase, _super);
    function JsonDataSourceJsonSourcePageSettingsBase() {
        var _this = _super.call(this) || this;
        _this._validationGroup = null;
        _this._validationSummary = null;
        _this.validationGroup = {
            onInitialized: function (args) { return _this._onValidationGroupInitialized(args); },
            onDisposing: function (args) { return _this._onValidationGroupDisposing(args); },
            validate: function () { return _this._validate(); }
        };
        _this.validationSummary = {
            onInitialized: function (args) { return _this._onValidationSummaryInitialized(args); },
            onDisposing: function (args) { return _this._onValidationSummaryDisposing(args); }
        };
        _this._disposables.push(_this.grid = new propertygrid_1.ObjectProperties(ko.observable(_this)));
        return _this;
    }
    JsonDataSourceJsonSourcePageSettingsBase.prototype.dispose = function () {
        this._validationSummary && this._validationSummary.dispose();
        this._validationGroup && this._validationGroup.dispose();
        this._validationSummary = null;
        this._validationGroup = null;
        _super.prototype.dispose.call(this);
    };
    JsonDataSourceJsonSourcePageSettingsBase.prototype._onValidationGroupInitialized = function (args) {
        this._validationGroup = args.component;
    };
    JsonDataSourceJsonSourcePageSettingsBase.prototype._onValidationGroupDisposing = function (args) {
        this._validationGroup = null;
    };
    JsonDataSourceJsonSourcePageSettingsBase.prototype._onValidationSummaryInitialized = function (args) {
        this._validationSummary = args.component;
    };
    JsonDataSourceJsonSourcePageSettingsBase.prototype._onValidationSummaryDisposing = function (args) {
        this._validationSummary = null;
    };
    JsonDataSourceJsonSourcePageSettingsBase.prototype._repaintSummary = function () {
        this._validationSummary && this._validationSummary.repaint();
    };
    JsonDataSourceJsonSourcePageSettingsBase.prototype._validate = function () {
        this._validationSummary && this._validationGroup && this._validationGroup.validate();
    };
    return JsonDataSourceJsonSourcePageSettingsBase;
}(utils_1.Disposable));
exports.JsonDataSourceJsonSourcePageSettingsBase = JsonDataSourceJsonSourcePageSettingsBase;
var JsonDataSourceJsonSourcePageStringSettings = (function (_super) {
    __extends(JsonDataSourceJsonSourcePageStringSettings, _super);
    function JsonDataSourceJsonSourcePageStringSettings() {
        var _this = _super.call(this) || this;
        _this._validatorsReady = ko.observable(false);
        _this.isValid = ko.pureComputed(function () {
            var isJsonValid = _this._isJsonSourceValid(_this.stringSource());
            var aceHasErrors = _this.aceEditorHasErrors();
            return isJsonValid && !aceHasErrors;
        });
        _this.validationGroup = null;
        _this.validationSummary = null;
        _this.stringSource = ko.observable('');
        _this.aceEditorHasErrors = ko.observable(false);
        _this.cssClass = { 'dxrd-wizard-json-string-source-grid': true };
        _this._disposables.push(_this.grid = new propertygrid_1.ObjectProperties(ko.observable(_this)));
        return _this;
    }
    JsonDataSourceJsonSourcePageStringSettings.prototype.onChange = function (_onChange) {
        var _this = this;
        var timeoutId = null;
        var localOnChange = function () {
            _onChange();
            clearTimeout(timeoutId);
            timeoutId = setTimeout(function () { return _this._validate(); }, 1);
        };
        this._disposables.push(this.stringSource.subscribe(function (newVal) { return localOnChange(); }));
    };
    JsonDataSourceJsonSourcePageStringSettings.prototype._isJsonSourceValid = function (jsonString) {
        if (!jsonString)
            return false;
        var isJsonSourceValid = true;
        try {
            JSON.parse(jsonString);
        }
        catch (ex) {
            isJsonSourceValid = false;
        }
        return isJsonSourceValid;
    };
    JsonDataSourceJsonSourcePageStringSettings.prototype.isEmpty = function () {
        return !this.stringSource();
    };
    JsonDataSourceJsonSourcePageStringSettings.prototype.reset = function () {
        this.stringSource('');
    };
    JsonDataSourceJsonSourcePageStringSettings.prototype.setValue = function (dataSource) {
        this.stringSource(dataSource.source.json());
    };
    JsonDataSourceJsonSourcePageStringSettings.prototype.getInfo = function () {
        return [
            {
                propertyName: 'stringSource', defaultVal: '', displayName: 'JSON String', editor: {
                    header: 'dx-jsonwizard-jsonstring-editor', editorType: _jsonDataSourceWidgets_1.JsonStringEditor, custom: 'dx-property-json-string-editor'
                }
            }
        ];
    };
    JsonDataSourceJsonSourcePageStringSettings.prototype.applySettings = function (jsonDataSource) {
        jsonDataSource.source.uri(undefined);
        jsonDataSource.source.json(this.stringSource());
        jsonDataSource.source.authenticationInfo = new jsonAuthenticationInfo_1.JsonAuthenticationInfo({});
        jsonDataSource.source.headers([]);
        jsonDataSource.source.queryParameters([]);
        jsonDataSource.source.pathParameters([]);
    };
    return JsonDataSourceJsonSourcePageStringSettings;
}(JsonDataSourceJsonSourcePageSettingsBase));
exports.JsonDataSourceJsonSourcePageStringSettings = JsonDataSourceJsonSourcePageStringSettings;
var JsonDataSourceJsonSourcePageUriSettings = (function (_super) {
    __extends(JsonDataSourceJsonSourcePageUriSettings, _super);
    function JsonDataSourceJsonSourcePageUriSettings(_requestWrapper, _itemsProvider) {
        var _this = _super.call(this) || this;
        _this._requestWrapper = _requestWrapper;
        _this._itemsProvider = _itemsProvider;
        _this._isUriValid = ko.observable(false);
        _this._lastValidatedJsonSourceJSON = '';
        _this._authNameValidatorInstance = null;
        _this._isInitUri = true;
        _this._collectionItemNamePlaceholder = localization_utils_1.getLocalization('Name', 'AnalyticsCoreStringId.CollectionEditor_Name_Placeholder');
        _this._lastValidateDeferred = null;
        _this._sourceUriValidatorsReady = ko.observable(true);
        _this._basicAuthValidatorsReady = ko.observable(false);
        _this._validationRequested = ko.observable(false).extend({ deferred: true });
        _this._noEmptyProperties = ko.pureComputed(function () {
            var isBasicHttpAuthValid = _this._isBasicHttpAuthValid();
            var isParametersValid = _this._isParametersValid();
            var sourceUriNotEmpty = !!_this.sourceUri();
            return isBasicHttpAuthValid && isParametersValid && sourceUriNotEmpty;
        });
        _this._lastValidationMessage = ko.observable();
        _this._getSerializedUriSource = function (jsonDataSource) {
            if (jsonDataSource === void 0) { jsonDataSource = new jsonDataSource_1.JsonDataSource({}); }
            _this.applySettings(jsonDataSource);
            return JSON.stringify(jsonDataSource.source.serialize(true));
        };
        _this._sourceUriValidationCallback = function (params) {
            if (!_this.sourceUri()) {
                if (_this._isInitUri) {
                    _this._isInitUri = false;
                    return true;
                }
                params.rule.message = getLocalizedValidationErrorMessage(null, localization_utils_1.getLocalization('Web Service Endpoint (URI):', 'DataAccessUIStringId.WizardPageChooseJsonSource_URI'));
                return false;
            }
            var serverValidationResult = false;
            _this._isInitUri = false;
            var serializedJsonSource = _this._getSerializedUriSource();
            if (serializedJsonSource != _this._lastValidatedJsonSourceJSON) {
                if (!_this._lastValidationMessage())
                    _this._lastValidationMessage(localization_utils_1.getLocalization('Validation...', 'AnalyticsCoreStringId.Validation'));
                _this._validateUriSource().done(function (result) {
                    serverValidationResult = params.rule.isValid = result.isUriValid;
                    result.faultMessage && (params.rule.message = result.faultMessage);
                    _this._lastValidationMessage(serverValidationResult ? null : result.faultMessage);
                    params.validator.validate();
                    setTimeout(function () { return _this._repaintSummary(); }, 1);
                });
            }
            else {
                return !_this._lastValidationMessage();
            }
            return serverValidationResult;
        };
        _this.isValid = ko.pureComputed(function () {
            var isPropertiesNotEmpty = _this._noEmptyProperties();
            var isUriValid = _this._isUriValid();
            return isPropertiesNotEmpty && isUriValid;
        });
        _this._validatorsReady = ko.pureComputed({
            read: function () {
                var sourceUriValidatorReady = _this._sourceUriValidatorsReady();
                var authIsEmpty = !_this.basicHttpAuth.password() && !_this.basicHttpAuth.userName();
                var authInitialized = _this._basicAuthValidatorsReady();
                return sourceUriValidatorReady && (authInitialized || authIsEmpty);
            },
            write: function (newVal) {
                _this._basicAuthValidatorsReady(newVal);
            }
        });
        _this.sourceUri = ko.observable('');
        _this.basicHttpAuth = {
            password: ko.observable(''),
            userName: ko.observable(''),
        };
        _this.parameters = ko.observableArray([]);
        _this._disposables.push(_this.resultUri = ko.pureComputed(function () {
            return _this._getResultUri();
        }));
        _this._disposables.push(_this.grid = new propertygrid_1.ObjectProperties(ko.observable(_this)));
        _this._disposables.push(ko.computed(function () {
            var editorsInitialized = _this._validatorsReady();
            var validationRequested = _this._validationRequested();
            if (editorsInitialized && validationRequested) {
                _this._validate();
            }
        }));
        _this._disposables.push(_this._validatorsReady);
        return _this;
    }
    JsonDataSourceJsonSourcePageUriSettings.prototype._validateUriSource = function () {
        var _this = this;
        var defaultValidationErrorMessage = localization_utils_1.getLocalization('Invalid URI.', 'AnalyticsCoreStringId.ReportDesigner_Wizard_JsonSource_UriValidationError');
        var endpointUriDisplayName = localization_utils_1.getLocalization('Web Service Endpoint (URI):', 'DataAccessUIStringId.WizardPageChooseJsonSource_URI');
        this._isUriValid(false);
        if (this._lastValidateDeferred) {
            this._lastValidateDeferred.reject();
        }
        var resultDeferred = $.Deferred();
        this._lastValidateDeferred = resultDeferred;
        try {
            var jsonDataSource = new jsonDataSource_1.JsonDataSource({});
            var serializedJsonSource = this._getSerializedUriSource(jsonDataSource);
            this._lastValidatedJsonSourceJSON = serializedJsonSource;
            var validationResultHandler = function (data) {
                if (resultDeferred.state && resultDeferred.state() === 'rejected')
                    return;
                _this._isUriValid(data.isUriValid);
                var faultMessage = getLocalizedValidationErrorMessage((data.isUriValid ? '' : data && data.faultMessage) || defaultValidationErrorMessage, endpointUriDisplayName);
                resultDeferred.resolve({
                    isUriValid: data.isUriValid,
                    faultMessage: faultMessage
                });
            };
            this._requestWrapper.validateJsonUri(jsonDataSource)
                .done(validationResultHandler)
                .fail(function (data) {
                if (data === void 0) { data = {}; }
                data.isValid = false;
                validationResultHandler(data);
            });
        }
        catch (ex) {
            this._isUriValid(false);
        }
        return resultDeferred.promise();
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype._isCollectionValid = function (collectionName) {
        return !this[collectionName]().length || this[collectionName]().every(function (x) { return x.name(); });
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype._isParametersValid = function () {
        return this._isCollectionValid('parameters');
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype._isBasicHttpAuthValid = function () {
        return !this.basicHttpAuth.password() || !!this.basicHttpAuth.userName();
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype._getSourceUriInfo = function () {
        var _this = this;
        var sourceUri = {
            propertyName: 'sourceUri',
            displayName: 'Web Service Endpoint (URI):',
            localizationId: 'DataAccessUIStringId.WizardPageChooseJsonSource_URI',
            defaultVal: '',
            editor: editorsInfo_1.editorTemplates.getEditor('text'),
            validatorOptions: null,
            isRequired: true,
            editorOptions: {
                elementAttr: {
                    title: this.sourceUri
                }
            }
        };
        var _self = this;
        sourceUri.validatorOptions = {
            onInitialized: function (e) {
                _this._sourceUriValidatorsReady(true);
            },
            onDisposed: function () {
                _this._sourceUriValidatorsReady(false);
            },
            validationRules: [
                {
                    type: 'custom',
                    assignValueFirst: true,
                    isDeferred: ko.pureComputed(function () { return _this._noEmptyProperties(); }),
                    get message() {
                        return _self._lastValidationMessage();
                    },
                    validationCallback: this._sourceUriValidationCallback
                }
            ]
        };
        return sourceUri;
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype._getBasicHttpAuthInfo = function () {
        var _this = this;
        var basicHttpAuthName = {
            propertyName: 'userName', displayName: 'Username:', localizationId: 'DataAccessUIStringId.WizardPageConfigureJsonConnection_UsernameText', editor: editorsInfo_1.editorTemplates.getEditor('text'),
            validatorOptions: undefined,
        };
        var basicHttpAuth = {
            propertyName: 'basicHttpAuth', displayName: 'Basic HTTP Authentication', localizationId: 'DataAccessUIStringId.WizardPageConfigureJsonConnection_BasicHttpAuthText', info: [
                basicHttpAuthName,
                _utils_3.createPasswordSerializationInfo({ propertyName: 'password', displayName: 'Password:', localizationId: 'DataAccessUIStringId.WizardPageConfigureJsonConnection_PasswordText' }, false),
            ], editor: editorsInfo_1.editorTemplates.getEditor('objecteditor')
        };
        var onValidatorInitialied = function (e) {
            var authNmeValidatorInstance = e && e.component;
            if (_this._authNameValidatorInstance && _this._authNameValidatorInstance != authNmeValidatorInstance) {
                _this._authNameValidatorInstance.dispose();
            }
            _this._authNameValidatorInstance = authNmeValidatorInstance;
            _this._basicAuthValidatorsReady(true);
        };
        var authNameValidatorDisposed = function () {
            _this._authNameValidatorInstance = null;
        };
        basicHttpAuthName.validatorOptions = {
            onInitialized: onValidatorInitialied,
            onDisposed: authNameValidatorDisposed,
            validationRules: [{
                    type: 'custom',
                    reevaluate: true,
                    assignValueFirst: true,
                    get message() {
                        return getLocalizedValidationErrorMessage(null, localization_utils_1.getLocalization(basicHttpAuth.displayName, basicHttpAuth.localizationId), localization_utils_1.getLocalization(basicHttpAuthName.displayName, basicHttpAuthName.localizationId));
                    },
                    validationCallback: function (params) {
                        return _this._isBasicHttpAuthValid();
                    }
                }]
        };
        return basicHttpAuth;
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype._getParametersInfo = function () {
        var _this = this;
        var parameters = {
            propertyName: 'parameters', displayName: 'Parameters', localizationId: 'AnalyticsCoreStringId.QueryBuilder_Parameters',
            array: true,
            addHandler: function () {
                var newName = _getNameHelpers_1.getUniqueNameForNamedObjectsArray(_this.parameters(), 'parameter');
                return jsonParameter_1.JsonParameter.from({ '@Name': newName });
            },
            editor: editorsInfo_1.editorTemplates.getEditor('commonCollection'),
            editorOptions: null,
            template: '#dx-jsonwizard-parametercollection'
        };
        parameters.editorOptions = {
            itemsProvider: this._itemsProvider,
            nameValidationRules: [{
                    type: 'required',
                    get message() {
                        return getLocalizedValidationErrorMessage(null, localization_utils_1.getLocalization(parameters.displayName, parameters.localizationId), this._collectionItemNamePlaceholder);
                    }
                }]
        };
        return parameters;
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype._getResultUriInfo = function () {
        var _resultUri = {
            propertyName: 'resultUri',
            displayName: 'Resulting URI:',
            localizationId: 'DataAccessUIStringId.WizardPageChooseJsonSource_ResultingUri',
            defaultVal: '',
            editor: editorsInfo_1.editorTemplates.getEditor('text'),
            editorOptions: {
                readOnly: true,
                elementAttr: {
                    title: this.resultUri
                }
            }
        };
        return _resultUri;
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype._getResultUri = function () {
        if (!this.sourceUri() || !this._isUriValid() || !this._isParametersValid())
            return null;
        if (this.sourceUri() && this.parameters().length === 0)
            return this.sourceUri();
        var uriParts = this.sourceUri().split('?');
        var url = uriParts[0];
        var query = uriParts[1];
        url = this._appendPathSegmentsToUri(uriParts[0]);
        return this._appendQuerySegmentsToUri(url, query);
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype._appendPathSegmentsToUri = function (uri) {
        var segments = this.parameters()
            .filter(function (p) { return p.itemType() === 'PathParameter'; })
            .map(function (p) { return '{' + p.name() + '}'; });
        segments.forEach(function (segment) {
            uri = uri.replace(/[\/]+$/g, '') + '/' + segment.replace(/^[\/]+/g, '');
        });
        return uri;
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype._appendQuerySegmentsToUri = function (uri, originalQuery) {
        var separator = '';
        var uriArguments = originalQuery || '';
        var querySegments = this.parameters()
            .filter(function (p) { return p.itemType() === 'QueryParameter'; })
            .map(function (p) { return p.name() + '={?}'; });
        querySegments.forEach(function (q) {
            if (!!uriArguments)
                uriArguments += '&';
            uriArguments += q;
        });
        if (uriArguments.length > 0)
            uri += '?' + uriArguments;
        return uri;
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype._onValidationSummaryInitialized = function (args) {
        var _this = this;
        _super.prototype._onValidationSummaryInitialized.call(this, args);
        this._isInitUri = true;
        setTimeout(function () {
            _this._validate();
        }, 1);
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype._applyParametersToSource = function (jsonDataSource) {
        var parametersByType = this.parameters().reduce(function (result, parameter) {
            var _a;
            return (__assign({}, result, (_a = {}, _a[parameter.itemType()] = (result[parameter.itemType()] || []).concat([parameter]), _a)));
        }, {});
        ['PathParameter', 'QueryParameter', 'Header'].forEach(function (type) {
            if (parametersByType[type])
                jsonDataSource.source[jsonSourceSettings_1.parameterTypeToPropertyMap[type]](parametersByType[type]);
        });
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype.applySettings = function (jsonDataSource) {
        jsonDataSource.source.uri(this.sourceUri());
        jsonDataSource.source.json(undefined);
        jsonDataSource.source.authenticationInfo.password(this.basicHttpAuth.password());
        jsonDataSource.source.authenticationInfo.userName(this.basicHttpAuth.userName());
        this._applyParametersToSource(jsonDataSource);
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype.getInfo = function () {
        var sourceUri = this._getSourceUriInfo();
        var basicHttpAuth = this._getBasicHttpAuthInfo();
        var parameters = this._getParametersInfo();
        var resultUriInfo = this._getResultUriInfo();
        return [sourceUri, basicHttpAuth, parameters, resultUriInfo];
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype.reset = function () {
        this.sourceUri('');
        this.basicHttpAuth.password('');
        this.basicHttpAuth.userName('');
        this.parameters([]);
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype.setValue = function (dataSource) {
        this.sourceUri(dataSource.source.uri());
        this.basicHttpAuth.userName(dataSource.source.authenticationInfo.userName());
        this.basicHttpAuth.password(dataSource.source.authenticationInfo.password());
        var sourceParameters = [].concat.apply([], [dataSource.source.pathParameters(), dataSource.source.queryParameters(), dataSource.source.headers()]);
        this.parameters(sourceParameters);
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype.dispose = function () {
        this._authNameValidatorInstance && this._authNameValidatorInstance.dispose();
        if (this._lastValidateDeferred) {
            this._lastValidateDeferred.reject();
            this._lastValidateDeferred = null;
        }
        _super.prototype.dispose.call(this);
        this.disposeObservableArray(this.parameters);
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype.onChange = function (_onChange) {
        var _this = this;
        var _a;
        var timeoutId = null;
        var localOnChange = function () {
            _onChange();
            clearTimeout(timeoutId);
            timeoutId = setTimeout(function () { return _this._validate(); }, 1);
        };
        (_a = this._disposables).push.apply(_a, _utils_2.subscribeProperties([this.sourceUri, this.basicHttpAuth.password, this.basicHttpAuth.userName, this.resultUri], localOnChange));
        this._disposables.push(_utils_2.subscribeArray(this.parameters, function (item) {
            var _a;
            (_a = item._disposables).push.apply(_a, _utils_2.subscribeProperties([item.name, item.itemType, item.value], localOnChange));
        }, localOnChange));
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype.isEmpty = function () {
        return !this.sourceUri();
    };
    JsonDataSourceJsonSourcePageUriSettings.prototype._validate = function () {
        if (this._validationSummary && this._validationGroup) {
            if (this._validatorsReady()) {
                this._validationGroup.validate();
                this._validationRequested(false);
            }
            else {
                this._validationRequested(true);
            }
        }
    };
    return JsonDataSourceJsonSourcePageUriSettings;
}(JsonDataSourceJsonSourcePageSettingsBase));
exports.JsonDataSourceJsonSourcePageUriSettings = JsonDataSourceJsonSourcePageUriSettings;
