/**
* DevExpress Analytics (query-builder\wizard\internal\_queryBuilderPopup.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _arrayutils_1 = require("../../../core/utils/_arrayutils");
var tableQuery_1 = require("../../dataSource/sql/tableQuery");
var serializer_1 = require("../../../serializer/serializer");
var _utils_1 = require("../../../widgets/_utils");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var QueryBuilderPopup = (function () {
    function QueryBuilderPopup(applyNewQuery, rtl, customizeQBInitializationData) {
        if (rtl === void 0) { rtl = false; }
        if (customizeQBInitializationData === void 0) { customizeQBInitializationData = function (options) { return options; }; }
        var _this = this;
        this.customizeQBInitializationData = customizeQBInitializationData;
        this._query = ko.observable(null);
        this._dbSchemaProvider = ko.observable(null);
        this.designer = ko.observable();
        this.qbOptions = ko.observable(null);
        this.okButtonDisabled = ko.pureComputed(function () { return _this.designer() && !_this.designer().model().isValid(); });
        this.isVisible = ko.observable(false);
        this.showLoadIndicator = ko.observable(false);
        this.localizationIdMap = {
            'title': { text: 'Query Builder', localizationId: 'DataAccessUIStringId.QueryBuilder' },
            'loading': { text: 'Loading...', localizationId: 'AnalyticsCoreStringId.Loading' },
            'previewResults': { text: 'Preview Results...', localizationId: 'DataAccessUIStringId.QueryBuilderButtons_PreviewResults' },
            'cancel': { text: 'Cancel', localizationId: 'AnalyticsCoreStringId.SearchDialog_Cancel' },
            'ok': { text: 'OK', localizationId: 'DataAccessUIStringId.Button_OK' }
        };
        this._applyQuery = applyNewQuery;
        this._rtl = rtl;
    }
    QueryBuilderPopup.prototype.show = function (query, dataSource) {
        this._dataSource = dataSource;
        this._dbSchemaProvider(dataSource.dbSchemaProvider);
        this._query(new serializer_1.ModelSerializer().serialize(query));
        this.qbOptions(this.qbOptions() || this.customizeQBInitializationData({
            queryBuilderModel: this.designer,
            querySource: this._query,
            dbSchemaProvider: this._dbSchemaProvider,
            callbacks: { customizeActions: QueryBuilderPopup.customizeQueryBuilderActions },
            rtl: this._rtl
        }));
        this.isVisible(true);
        this.designer().updateSurface();
    };
    QueryBuilderPopup.prototype.cancelHandler = function () {
        this.isVisible(false);
    };
    QueryBuilderPopup.prototype.previewHandler = function () {
        this.designer().showPreview();
    };
    QueryBuilderPopup.prototype.okHandler = function () {
        var _this = this;
        if (this.designer().model().canSave()) {
            this._applyQuery(new tableQuery_1.TableQuery(this.designer().model().serialize(), this._dataSource), this.showLoadIndicator)
                .done(function () {
                _this.isVisible(false);
            });
        }
    };
    QueryBuilderPopup.prototype.onHiddenHandler = function () {
        this.designer().dataPreview.isVisible(false);
    };
    QueryBuilderPopup.prototype.popupViewModel = function (element) {
        var $container = _utils_1.getParentContainer(element);
        return {
            visible: this.isVisible,
            title: this.getDisplayText('title'),
            showTitle: true,
            shading: true,
            fullScreen: false,
            width: '95%',
            height: '95%',
            container: $container,
            wrapperAttr: { class: 'dxrd-querybuilder-popup' },
            position: { of: $container },
            onHidden: this.onHiddenHandler
        };
    };
    QueryBuilderPopup.prototype.getDisplayText = function (key) {
        return localization_utils_1.getLocalization(this.localizationIdMap[key].text, this.localizationIdMap[key].localizationId);
    };
    QueryBuilderPopup.customizeQueryBuilderActions = function (actions) {
        var del = _arrayutils_1.findFirstItemMatchesCondition(actions, function (action) { return action.text === 'Delete'; }), undo = _arrayutils_1.findFirstItemMatchesCondition(actions, function (action) { return action.text === 'Undo'; }), redo = _arrayutils_1.findFirstItemMatchesCondition(actions, function (action) { return action.text === 'Redo'; });
        actions.splice(0, actions.length, del, undo, redo);
    };
    return QueryBuilderPopup;
}());
exports.QueryBuilderPopup = QueryBuilderPopup;
