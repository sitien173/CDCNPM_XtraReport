/**
* DevExpress Analytics (query-builder\wizard\internal\_storedProceduresQueryControl.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../../serializer/utils");
var storedProcQuery_1 = require("../../dataSource/sql/storedProcQuery");
var dbStoredProcedure_1 = require("../../dataSource/dbStoredProcedure");
var _arrayutils_1 = require("../../../core/utils/_arrayutils");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var dataSourceParameter_1 = require("../../dataSource/dataSourceParameter");
var dbColumn_1 = require("../../dataSource/dbColumn");
var dataSourceParameterMeta_1 = require("../../dataSource/dataSourceParameterMeta");
var StoredProceduresQueryControl = (function (_super) {
    __extends(StoredProceduresQueryControl, _super);
    function StoredProceduresQueryControl() {
        var _this = _super.call(this) || this;
        _this.template = 'dxrd-procedures-control';
        _this.storedProcedures = ko.observableArray([]);
        _this.selectedProcedure = ko.observableArray([]);
        _this.caption = function () { return localization_utils_1.getLocalization('Select a stored procedure:', 'DataAccessUIStringId.StoredProcControl_Caption'); };
        _this.generateStoredProcedureDisplayName = function (procedure) { return StoredProceduresQueryControl.generateStoredProcedureDisplayName(procedure); };
        _this.isNextDisabled = ko.pureComputed(function () {
            return !_this._selectedProcedure || !_this._needToProcessParameters(_this._selectedProcedure);
        });
        _this.isFinishDisabled = ko.pureComputed(function () {
            return !_this._selectedProcedure || _this._needToProcessParameters(_this._selectedProcedure);
        });
        _this.storedProcedures.subscribe(function (newProcedures) {
            if (!newProcedures) {
                _this._selectedProcedure = null;
            }
            else if (_this._selectedProcedure) {
                _this._selectedProcedure = _arrayutils_1.getFirstItemByPropertyValue(_this.storedProcedures(), 'name', _this._selectedProcedure.name);
            }
            else if (_this._query && _this._query.procName()) {
                _this._selectedProcedure = _arrayutils_1.getFirstItemByPropertyValue(_this.storedProcedures(), 'name', _this._query.procName());
            }
            else {
                _this._selectedProcedure = newProcedures[0];
            }
        });
        return _this;
    }
    StoredProceduresQueryControl.prototype._needToProcessParameters = function (procedure) {
        return procedure.arguments.some(StoredProceduresQueryControl._availableConvertToParameter);
    };
    StoredProceduresQueryControl._availableConvertToParameter = function (arg) {
        return arg.direction !== dbStoredProcedure_1.DBStoredProcedureArgumentDirection.Out;
    };
    Object.defineProperty(StoredProceduresQueryControl.prototype, "_selectedProcedure", {
        get: function () {
            return this.selectedProcedure()[0];
        },
        set: function (value) {
            this.selectedProcedure(value ? [value] : []);
        },
        enumerable: true,
        configurable: true
    });
    StoredProceduresQueryControl.prototype.scrollActiveItem = function (e) {
        var model = e.model;
        var procedure = model.selectedProcedure.peek();
        e.component.scrollToItem(procedure[0]);
    };
    StoredProceduresQueryControl.generateStoredProcedureDisplayName = function (procedure) {
        if (procedure.arguments.length === 0)
            return procedure.name;
        return procedure.arguments.reduce(function (value, item, index, array) {
            return value += item.name + (index < array.length - 1 ? ', ' : ')');
        }, procedure.name + '(');
    };
    StoredProceduresQueryControl.prototype.setQuery = function (query) {
        this._query = query;
        this._selectedProcedure = _arrayutils_1.getFirstItemByPropertyValue(this.storedProcedures(), 'name', query.procName());
        return $.Deferred().resolve().promise();
    };
    StoredProceduresQueryControl.prototype.getQuery = function () {
        var _this = this;
        if (!this._selectedProcedure)
            return null;
        var newQuery = new storedProcQuery_1.StoredProcQuery({ '@Name': this._query.name() || this._selectedProcedure.name, 'ProcName': this._selectedProcedure.name }, this._query.parent);
        this._selectedProcedure.arguments.forEach(function (arg) {
            if (StoredProceduresQueryControl._availableConvertToParameter(arg)) {
                newQuery.parameters.push(_arrayutils_1.getFirstItemByPropertyValue(_this._query.parameters(), 'name', arg.name) || new dataSourceParameter_1.DataSourceParameter({ '@Name': arg.name, '@Type': dbColumn_1.DBColumn.GetType(arg.type) }, null, dataSourceParameterMeta_1.storedProcParameterSerializationsInfo(dbColumn_1.DBColumn.GetType(arg.type))));
            }
        });
        return newQuery;
    };
    Object.defineProperty(StoredProceduresQueryControl.prototype, "runQueryBuilderDisabled", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    return StoredProceduresQueryControl;
}(utils_1.Disposable));
exports.StoredProceduresQueryControl = StoredProceduresQueryControl;
