/**
* DevExpress Analytics (query-builder\wizard\internal\_treeListNode.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var utils_1 = require("../../../serializer/utils");
exports.defaultObjectDataSourceItemSpecifics = 'Default';
var TreeNodeBase = (function (_super) {
    __extends(TreeNodeBase, _super);
    function TreeNodeBase(name, displayName, specifics, isChecked, afterCheckToggled) {
        if (isChecked === void 0) { isChecked = false; }
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.displayName = displayName;
        _this.specifics = specifics;
        _this.checked = ko.pureComputed(function () { return _this._checked(); });
        _this.isList = false;
        _this._checked = ko.observable(isChecked);
        _this._afterCheckToggled = afterCheckToggled || $.noop;
        return _this;
    }
    TreeNodeBase.prototype.unChecked = function () {
        return this.checked() === false;
    };
    TreeNodeBase.prototype.toggleChecked = function () {
        this.setChecked(!this.checked.peek());
        this._afterCheckToggled(this);
    };
    TreeNodeBase.prototype.setChecked = function (value) {
        this._checked(value);
    };
    return TreeNodeBase;
}(utils_1.Disposable));
exports.TreeNodeBase = TreeNodeBase;
var TreeLeafNode = (function (_super) {
    __extends(TreeLeafNode, _super);
    function TreeLeafNode(name, displayName, specifics, isChecked, nodeArguments, afterCheckToggled) {
        if (isChecked === void 0) { isChecked = false; }
        if (nodeArguments === void 0) { nodeArguments = null; }
        var _this = _super.call(this, name, displayName, specifics, isChecked, afterCheckToggled) || this;
        _this.name = name;
        _this.displayName = displayName;
        _this.specifics = specifics;
        _this.hasQuery = false;
        _this.arguments = nodeArguments;
        return _this;
    }
    return TreeLeafNode;
}(TreeNodeBase));
exports.TreeLeafNode = TreeLeafNode;
var TreeNode = (function (_super) {
    __extends(TreeNode, _super);
    function TreeNode(name, displayName, specifics, isChecked, afterCheckToggled) {
        var _this = _super.call(this, name, displayName, specifics, isChecked, afterCheckToggled) || this;
        _this.countChecked = ko.pureComputed(function () {
            var count = 0;
            for (var i = 0; i < _this.children().length; i++) {
                if (!_this.children()[i].unChecked()) {
                    if (count > 1)
                        break;
                    count++;
                }
            }
            return count;
        });
        _this.isList = true;
        _this.children = ko.observableArray([]);
        _this.checked = ko.pureComputed({
            read: function () {
                if (!_this.initialized()) {
                    return _this._checked();
                }
                else {
                    var selectedItems = 0;
                    var partiallySelectedItems = 0;
                    _this.children().forEach(function (item) {
                        if (item.checked() === true) {
                            selectedItems++;
                        }
                        else if (item.checked() !== false) {
                            partiallySelectedItems++;
                        }
                    });
                    if (selectedItems === 0 && partiallySelectedItems === 0) {
                        return false;
                    }
                    if (selectedItems === _this.children.peek().length) {
                        return true;
                    }
                    return undefined;
                }
            }
        });
        return _this;
    }
    TreeNode.prototype.initialized = function () {
        return this.children().length > 0;
    };
    TreeNode.prototype.setChecked = function (value) {
        this._checked(value);
        this.children.peek().forEach(function (item) {
            item.setChecked(value);
        });
    };
    TreeNode.prototype.initializeChildren = function (children) {
        this.children(children || []);
    };
    return TreeNode;
}(TreeNodeBase));
exports.TreeNode = TreeNode;
var ParameterTreeNode = (function (_super) {
    __extends(ParameterTreeNode, _super);
    function ParameterTreeNode(name, displayName, specifics, isChecked, afterCheckToggled) {
        var _this = _super.call(this, name, displayName, specifics, isChecked, afterCheckToggled) || this;
        _this.countChecked = ko.pureComputed(function () {
            var count = 0;
            _this.hasParamsToEdit(false);
            for (var i = 0; i < _this.children().length; i++) {
                var child = _this.children()[i];
                if (!child.unChecked()) {
                    if (count > 1)
                        break;
                    count++;
                    if (child.arguments && child.arguments.length > 0)
                        _this.hasParamsToEdit(true);
                    if (child.specifics === 'query')
                        _this.hasParamsToEdit(true);
                }
            }
            return count;
        });
        _this.hasParamsToEdit = ko.observable(false);
        return _this;
    }
    return ParameterTreeNode;
}(TreeNode));
exports.ParameterTreeNode = ParameterTreeNode;
var QueriesTreeNode = (function (_super) {
    __extends(QueriesTreeNode, _super);
    function QueriesTreeNode(name, displayName, specifics, isChecked, callbacks, afterCheckToggled) {
        var _this = _super.call(this, name, displayName, specifics, isChecked, afterCheckToggled) || this;
        _this.addAction = {
            clickAction: function (item) {
                if (_this.disableCustomSql()) {
                    return _this.addQuery();
                }
                else {
                    return _this.showPopover();
                }
            },
            imageClassName: 'dxrd-image-add',
            imageTemplateName: 'dxrd-svg-operations-add',
            templateName: 'dx-treelist-action-with-popover',
            text: localization_utils_1.getLocalization('Add query', 'AnalyticsCoreStringId.SqlDSWizard_AddQuery')
        };
        _this.itemClickAction = function (e) {
            _this.popoverVisible(false);
            e.itemData.addAction();
        };
        _this.popoverVisible = ko.observable(false);
        _this.addQuery = function () {
            callbacks().showQbCallBack();
        };
        _this.addCustomQuery = function () {
            callbacks().showQbCallBack(null, true);
        };
        _this.disableCustomSql = function () { return callbacks && callbacks().disableCustomSql; };
        return _this;
    }
    QueriesTreeNode.prototype.getActions = function (context) {
        var result = [];
        if (context.path.indexOf('queries') === 0) {
            result.push(this.addAction);
        }
        return result;
    };
    QueriesTreeNode.prototype.popoverListItems = function () {
        var _this = this;
        return [
            {
                name: localization_utils_1.getLocalization('Run Query Builder', 'DataAccessUIStringId.Button_QueryBuilder'),
                addAction: function () { return _this.addQuery(); }
            },
            {
                name: localization_utils_1.getLocalization('Write Custom SQL', 'AnalyticsCoreStringId.SqlDSWizard_WriteCustomSQL'),
                addAction: function () { return _this.addCustomQuery(); }
            }
        ];
    };
    QueriesTreeNode.prototype.showPopover = function () {
        this.popoverVisible(true);
    };
    return QueriesTreeNode;
}(ParameterTreeNode));
exports.QueriesTreeNode = QueriesTreeNode;
var TreeQueryNode = (function (_super) {
    __extends(TreeQueryNode, _super);
    function TreeQueryNode(name, displayName, specifics, isChecked, parameters, callbacks, afterCheckToggled, query) {
        var _this = _super.call(this, name, displayName, specifics, isChecked, null, afterCheckToggled) || this;
        _this.query = query;
        _this.editAction = {
            clickAction: function (item) {
                return _this.editQuery();
            },
            imageClassName: 'dx-image-edit',
            imageTemplateName: 'dxrd-svg-operations-edit',
            text: localization_utils_1.getLocalization('Edit query', 'AnalyticsCoreStringId.SqlDSWizard_EditQuery')
        };
        _this.removeAction = {
            clickAction: function (item) {
                _this.removeQuery({ model: item.data });
            },
            imageClassName: 'dxrd-image-recycle-bin',
            imageTemplateName: 'dxrd-svg-operations-recycle_bin',
            text: localization_utils_1.getLocalization('Remove query', 'AnalyticsCoreStringId.SqlDSWizard_RemoveQuery')
        };
        _this.parameters = parameters;
        _this.removeQuery = function (e) {
            if (!e.model.unChecked()) {
                e.model.toggleChecked();
            }
            callbacks().deleteAction(e.model.name);
        };
        _this.editQuery = function (e) {
            callbacks().showQbCallBack(_this.name);
        };
        _this.hasQuery = true;
        return _this;
    }
    TreeQueryNode.prototype.setObservableName = function (name) {
        var _this = this;
        this._name = name;
        ['name', 'displayName'].forEach(function (propertyName) {
            return Object.defineProperty(_this, propertyName, {
                get: function () {
                    return this._name();
                },
                set: function (newVal) {
                    return this._name(newVal);
                },
                configurable: true
            });
        });
    };
    TreeQueryNode.prototype.getActions = function (context) {
        var result = [];
        result.push(this.removeAction);
        result.push(this.editAction);
        return result;
    };
    return TreeQueryNode;
}(TreeLeafNode));
exports.TreeQueryNode = TreeQueryNode;
var FieldTreeNode = (function (_super) {
    __extends(FieldTreeNode, _super);
    function FieldTreeNode(name, displayName, specifics, isChecked, path, afterCheckToggled, isDraggable) {
        if (isDraggable === void 0) { isDraggable = false; }
        var _this = _super.call(this, name, displayName, specifics, isChecked, afterCheckToggled) || this;
        _this.visible = ko.observable(true);
        _this.disabled = ko.observable(false);
        _this.path = path;
        _this.isComplex = specifics === exports.defaultObjectDataSourceItemSpecifics;
        if (isDraggable)
            _this.dragData = { noDragable: false };
        return _this;
    }
    return FieldTreeNode;
}(TreeNodeBase));
exports.FieldTreeNode = FieldTreeNode;
var DataMemberTreeNode = (function (_super) {
    __extends(DataMemberTreeNode, _super);
    function DataMemberTreeNode(name, displayName, specifics, isChecked, path, afterCheckToggled) {
        var _this = _super.call(this, name, displayName, specifics, isChecked, afterCheckToggled) || this;
        _this.visible = ko.observable(true);
        _this.path = path;
        _this.isComplex = _this.isList && specifics === exports.defaultObjectDataSourceItemSpecifics;
        _this.checked = ko.pureComputed({
            read: function () {
                if (!_this.initialized()) {
                    return _this._checked();
                }
                else {
                    var selectedItems = 0;
                    var partiallySelectedItems = 0;
                    var visibleChildren = _this.children().filter(function (item) { return item.visible(); });
                    visibleChildren.forEach(function (item) {
                        if (item.checked() === true) {
                            selectedItems++;
                        }
                        else if (item.checked() !== false) {
                            partiallySelectedItems++;
                        }
                    });
                    if (selectedItems === 0 && partiallySelectedItems === 0) {
                        return false;
                    }
                    if (selectedItems === visibleChildren.length) {
                        return true;
                    }
                    return undefined;
                }
            }
        });
        return _this;
    }
    DataMemberTreeNode.prototype.setChecked = function (value) {
        _super.prototype.setChecked.call(this, this.visible() ? value : false);
    };
    return DataMemberTreeNode;
}(TreeNode));
exports.DataMemberTreeNode = DataMemberTreeNode;
var SingleCheckedDataMemberTreeNode = (function (_super) {
    __extends(SingleCheckedDataMemberTreeNode, _super);
    function SingleCheckedDataMemberTreeNode(name, displayName, specifics, isChecked, path, afterCheckToggled) {
        var _this = _super.call(this, name, displayName, specifics, isChecked, path, afterCheckToggled) || this;
        _this.checked = ko.pureComputed({
            read: function () {
                return _this._checked();
            }
        });
        return _this;
    }
    return SingleCheckedDataMemberTreeNode;
}(DataMemberTreeNode));
exports.SingleCheckedDataMemberTreeNode = SingleCheckedDataMemberTreeNode;
