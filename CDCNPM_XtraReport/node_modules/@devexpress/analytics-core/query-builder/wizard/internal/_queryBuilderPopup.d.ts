/**
* DevExpress Analytics (query-builder\wizard\internal\_queryBuilderPopup.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { IRetrieveQuerySqlCallback } from '../dataSourceWizard';
import { SqlDataSource } from '../../dataSource/sql/sqlDataSource';
import { QueryViewModel } from '../../elements/queryModel';
import { IAction } from '../../../widgets/utils';
import { TableQuery } from '../../dataSource/sql/tableQuery';
import { ILocalizationInfo } from '../../../property-grid/widgets/internal/_utils';
import { IQueryBuilderOptions } from '../../binding/jsQueryBuilderBindingOptions';
export declare class QueryBuilderPopup {
    customizeQBInitializationData: (options: IQueryBuilderOptions) => IQueryBuilderOptions;
    private _applyQuery;
    private _query;
    private _dbSchemaProvider;
    private _dataSource;
    private _rtl;
    constructor(applyNewQuery: IRetrieveQuerySqlCallback, rtl?: boolean, customizeQBInitializationData?: (options: IQueryBuilderOptions) => IQueryBuilderOptions);
    designer: ko.Observable<{
        model: ko.Observable<QueryViewModel> | ko.Computed<QueryViewModel>;
        updateSurface: () => void;
        showPreview: () => void;
        dataPreview: any;
    }>;
    qbOptions: ko.Observable<any>;
    okButtonDisabled: ko.PureComputed<boolean>;
    isVisible: ko.Observable<boolean>;
    showLoadIndicator: ko.Observable<boolean>;
    static customizeQueryBuilderActions: (actions: IAction[]) => void;
    show(query: TableQuery, dataSource: SqlDataSource): void;
    cancelHandler(): void;
    previewHandler(): void;
    okHandler(): void;
    onHiddenHandler(): void;
    popupViewModel(element: HTMLElement): {
        visible: ko.Observable<boolean>;
        title: any;
        showTitle: boolean;
        shading: boolean;
        fullScreen: boolean;
        width: string;
        height: string;
        container: JQuery<HTMLElement>;
        wrapperAttr: {
            class: string;
        };
        position: {
            of: JQuery<HTMLElement>;
        };
        onHidden: () => void;
    };
    getDisplayText(key: any): any;
    localizationIdMap: {
        [key: string]: ILocalizationInfo;
    };
}
