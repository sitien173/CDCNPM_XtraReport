/**
* DevExpress Analytics (query-builder\wizard\internal\objectDataSource\_objectSchemaProvider.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var objectSchema_1 = require("../../../dataSource/object/objectSchema");
var _dbSchema_1 = require("../../../dataSource/_dbSchema");
var requestwrapper_1 = require("../../../utils/requestwrapper");
var _infoMessageHelpers_1 = require("../../../../core/utils/_infoMessageHelpers");
var _utils_1 = require("../../../../property-grid/widgets/internal/_utils");
var localization_utils_1 = require("../../../../property-grid/localization/localization_utils");
var utils_1 = require("../../../../serializer/utils");
var _utils_2 = require("../../../../serializer/_utils");
var ObjectTypeDescriptions = (function () {
    function ObjectTypeDescriptions(model) {
        var types = _dbSchema_1.deserializeToCollection(model, function (key) { return new objectSchema_1.ObjectType(key); });
        this.types = types.sort(function (a, b) { return a.displayName.localeCompare(b.displayName); });
    }
    return ObjectTypeDescriptions;
}());
exports.ObjectTypeDescriptions = ObjectTypeDescriptions;
function getObjectTypeDescriptionsCallback(requestWrapper, context) {
    var deferred = $.Deferred();
    requestWrapper.getObjectTypeDescriptions(context)
        .done(function (data) {
        try {
            var objectTypeDescriptionsModel = new ObjectTypeDescriptions(data.objectDataSourceInfoJson);
            deferred.resolve(objectTypeDescriptionsModel);
        }
        finally {
            if (deferred.state() === 'pending')
                deferred.reject();
        }
    })
        .fail(function (data) {
        _infoMessageHelpers_1.ShowMessage(_utils_1.formatUnicorn(localization_utils_1.getLocalization('Schema loading failed. {0}', 'DxDesignerStringId.Error_SchemaLoadingFailed'), _infoMessageHelpers_1.getErrorMessage(data)));
        deferred.reject();
    });
    return deferred.promise();
}
exports.getObjectTypeDescriptionsCallback = getObjectTypeDescriptionsCallback;
var ObjectSchemaProvider = (function (_super) {
    __extends(ObjectSchemaProvider, _super);
    function ObjectSchemaProvider(_requestWrapper) {
        if (_requestWrapper === void 0) { _requestWrapper = new requestwrapper_1.RequestWrapper(); }
        var _this = _super.call(this) || this;
        _this._requestWrapper = _requestWrapper;
        _this.getItems = function (pathRequest) {
            var getItemsDeferred = $.Deferred();
            var loadSchemaPromise = _this.getObjectTypeDescriptions();
            loadSchemaPromise
                .done(function (objectSchema) {
                getItemsDeferred.resolve(_this.getSchemaByPath(pathRequest, objectSchema));
            })
                .fail(getItemsDeferred.reject);
            return getItemsDeferred.promise();
        };
        return _this;
    }
    ObjectSchemaProvider.prototype.dispose = function () {
        this._objectTypeDescriptionsPromise = null;
    };
    ObjectSchemaProvider.prototype.getSchemaByPath = function (pathRequest, objectSchema) {
        if (!pathRequest.fullPath) {
            return objectSchema.types.map(function (type) { return _utils_2.extend({}, type, { isList: true, specifics: 'List' }); });
        }
        else {
            var currentCtros = [];
            for (var i = 0; i < pathRequest.pathParts.length; i++) {
                var pathPart = (objectSchema.types || []).filter(function (type) { return type.name == pathRequest.pathParts[i]; })[0];
                if (!pathPart)
                    return [];
                currentCtros = pathPart.ctors;
            }
            return currentCtros.map(function (ctor) { return _utils_2.extend({}, ctor, { isList: false, specifics: 'default' }); });
        }
    };
    ObjectSchemaProvider.prototype.getObjectTypeDescriptions = function (context) {
        if (context === void 0) { context = ''; }
        if (!this._objectTypeDescriptionsPromise || this._objectTypeDescriptionsPromise.state() === 'rejected')
            this._objectTypeDescriptionsPromise = getObjectTypeDescriptionsCallback(this._requestWrapper, context);
        return this._objectTypeDescriptionsPromise;
    };
    return ObjectSchemaProvider;
}(utils_1.Disposable));
exports.ObjectSchemaProvider = ObjectSchemaProvider;
