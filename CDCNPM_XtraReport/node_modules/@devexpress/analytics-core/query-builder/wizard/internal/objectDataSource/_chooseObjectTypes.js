/**
* DevExpress Analytics (query-builder\wizard\internal\objectDataSource\_chooseObjectTypes.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _treelistController_1 = require("../../../../widgets/treelist/_treelistController");
var utils_1 = require("../../../../serializer/utils");
var ChooseObjectTypesTreelistController = (function (_super) {
    __extends(ChooseObjectTypesTreelistController, _super);
    function ChooseObjectTypesTreelistController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChooseObjectTypesTreelistController.prototype.canSelect = function (value) {
        return true;
    };
    return ChooseObjectTypesTreelistController;
}(_treelistController_1.TreeListController));
exports.ChooseObjectTypesTreelistController = ChooseObjectTypesTreelistController;
var ChooseObjectTypes = (function (_super) {
    __extends(ChooseObjectTypes, _super);
    function ChooseObjectTypes(types, provider) {
        var _this = _super.call(this) || this;
        _this.types = types;
        _this.selectedType = ko.observable();
        _this.selectedCtor = ko.observable();
        _this.selectedPath = ko.observable('');
        _this._scrollViewHeight = 'calc(100% - 36px)';
        _this.availableTypesTreelistModel = {
            expandRootItems: true,
            itemsProvider: provider,
            selectedPath: _this.selectedPath,
            treeListController: new ChooseObjectTypesTreelistController()
        };
        _this._disposables.push(_this.availableTypesTreelistModel.selectedPath.subscribe(function (newValue) {
            types().forEach(function (type) {
                if (type.name == newValue) {
                    _this.selectedType(type);
                    if (_this.selectedCtor() == null)
                        _this.selectedCtor.valueHasMutated();
                    else
                        _this.selectedCtor(null);
                }
                else {
                    type.ctors.forEach(function (ctor) {
                        if (type.name.concat('.').concat(ctor.name) == newValue) {
                            _this.selectedType(type);
                            _this.selectedCtor(ctor);
                        }
                    });
                }
            });
        }));
        return _this;
    }
    return ChooseObjectTypes;
}(utils_1.Disposable));
exports.ChooseObjectTypes = ChooseObjectTypes;
