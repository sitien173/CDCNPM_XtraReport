/**
* DevExpress Analytics (query-builder\wizard\internal\_treeNodeItemsProvider.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../../serializer/utils");
var _treeListNode_1 = require("./_treeListNode");
var pathRequest_1 = require("../../../widgets/common/pathRequest");
var _utils_1 = require("../../../widgets/_utils");
var TreeNodeItemsProvider = (function (_super) {
    __extends(TreeNodeItemsProvider, _super);
    function TreeNodeItemsProvider(fieldListProvider, rootItems, generateTreeNode, generateTreeLeafNode) {
        var _this = _super.call(this) || this;
        _this._fullTreeLoaded = false;
        _this._rootItems = ko.observableArray([]);
        _this._checkedRootNodesCount = ko.computed(function () {
            if (!_this._rootItems || _this._rootItems().length === 0)
                return 0;
            var count = 0;
            for (var i = 0; i < _this._rootItems().length && count < 1; i++) {
                count += _this._rootItems()[i].unChecked() ? 0 : 1;
            }
            return count;
        });
        _this.hasCheckedItems = ko.computed(function () {
            return !(_this._checkedRootNodesCount() === 0);
        });
        _this.getRootItems = function () { return _this._rootItems(); };
        _this.getItems = function (pathRequest, collectChilds) {
            if (collectChilds === void 0) { collectChilds = false; }
            var result = $.Deferred();
            if (!pathRequest.fullPath && pathRequest.pathParts.length === 0) {
                result.resolve(_this._rootItems());
            }
            else {
                fieldListProvider.getItems(pathRequest).done(function (value) {
                    var currentParentNode = _this._getParentNode(pathRequest);
                    if (!currentParentNode)
                        return result.reject();
                    if (currentParentNode.children().length === 0) {
                        var array = [];
                        var listPath = [];
                        value.forEach(function (item) {
                            var isChecked = _this._getDefaultTreeNodeCheckState(item);
                            if (_utils_1.isList(item)) {
                                if (pathRequest.pathParts.length <= 5) {
                                    listPath.push([].concat(pathRequest.fullPath.split('.'), [item.name]));
                                    array.push(generateTreeNode(item, isChecked, [pathRequest.fullPath, item.name].join('.')));
                                }
                            }
                            else {
                                array.push(generateTreeLeafNode(item, isChecked, [pathRequest.fullPath, item.name].join('.')));
                            }
                        });
                        currentParentNode.initializeChildren(array);
                        if (collectChilds)
                            $.when.apply($, listPath.map(function (x) { return _this.getItems(new pathRequest_1.PathRequest(x.join('.'), x), collectChilds); })).always(function () { return result.resolve(array); });
                        else
                            result.resolve(array);
                    }
                    else {
                        result.resolve(currentParentNode.children());
                    }
                });
            }
            return result.promise();
        };
        _this._disposables.push(rootItems.subscribe(function (newValue) {
            _this._fullTreeLoaded = false;
            _this._rootItems(newValue.map(function (item) {
                var isChecked = _this._getDefaultTreeNodeCheckState(item);
                return generateTreeNode(item, isChecked, item.name);
            }));
        }));
        _this._disposables.push(_this.hasCheckedItems);
        return _this;
    }
    TreeNodeItemsProvider.prototype._createTree = function () {
        var _this = this;
        if (!this._fullTreeLoaded)
            return $.when.apply($, this._rootItems().map(function (item) { return _this.getItems(new pathRequest_1.PathRequest(item.path), true); })).always(function () { return _this._fullTreeLoaded = true; });
        else {
            return $.Deferred().resolve().promise();
        }
    };
    TreeNodeItemsProvider.prototype._createTreePart = function (pathParts, deferred, checkedPath) {
        var _this = this;
        if (deferred === void 0) { deferred = $.Deferred(); }
        if (this._fullTreeLoaded)
            return deferred.resolve().promise();
        if (pathParts.length === 0)
            return deferred.resolve();
        if (!checkedPath) {
            var deferred = $.Deferred();
            if (pathParts.length === 1) {
                this.getItems(new pathRequest_1.PathRequest(pathParts[0], pathParts)).done(function () { return deferred.resolve(); }).fail(function () { return deferred.reject(); });
            }
            else
                this._createTreePart(pathParts.slice(1), deferred, [pathParts[0]]);
            return deferred;
        }
        else {
            var newParentPath = [].concat([], checkedPath, pathParts[0]);
            var request = new pathRequest_1.PathRequest(newParentPath.join('.'), newParentPath);
            if (!this._getParentNode(request)) {
                this.getItems(new pathRequest_1.PathRequest(checkedPath.join('.'), checkedPath)).done(function (res) {
                    _this._createTreePart(pathParts.slice(1), deferred, newParentPath);
                }).fail(function () { return deferred.reject(); });
            }
            else {
                this._createTreePart(pathParts.slice(1), deferred, newParentPath);
            }
        }
    };
    TreeNodeItemsProvider.prototype._setChecked = function (item) {
        var _this = this;
        item.setChecked(true);
        if (item instanceof _treeListNode_1.DataMemberTreeNode) {
            item.children().forEach(function (x) { return _this._setChecked(x); });
        }
    };
    TreeNodeItemsProvider.prototype.selectAllItems = function (onlyRoot) {
        var _this = this;
        if (onlyRoot === void 0) { onlyRoot = true; }
        var deferred = $.Deferred();
        this._createTree().always(function () {
            if (onlyRoot) {
                _this._rootItems().forEach(function (x) { return x.setChecked(true); });
            }
            else {
                _this._rootItems().forEach(function (x) { return _this._setChecked(x); });
            }
            deferred.resolve();
        });
        return deferred.promise();
    };
    TreeNodeItemsProvider.prototype.selectItemsByPath = function (path) {
        var _this = this;
        var deferred = $.Deferred();
        var pathParts = path.split('.');
        this._createTreePart(pathParts).done(function () {
            _this.getItems(new pathRequest_1.PathRequest(pathParts.join('.'), pathParts)).done(function (items) {
                items.forEach(function (item) {
                    if (item instanceof _treeListNode_1.TreeNodeBase) {
                        item.setChecked(true);
                    }
                });
            }).always(function () { return deferred.resolve(); });
        });
        return deferred.promise();
    };
    TreeNodeItemsProvider.prototype.selectItemByPath = function (path) {
        var _this = this;
        var deferred = $.Deferred();
        var pathParts = path.split('.');
        this._createTreePart(pathParts).done(function () {
            var fieldName = pathParts.pop();
            _this.getItems(new pathRequest_1.PathRequest(pathParts.join('.'), pathParts)).done(function (items) {
                var item = items.filter(function (x) { return x.name === fieldName; })[0];
                if (item instanceof _treeListNode_1.TreeNodeBase) {
                    item.setChecked(true);
                }
            }).always(function () { return deferred.resolve(); });
        });
        return deferred.promise();
    };
    TreeNodeItemsProvider.prototype._getParentNode = function (pathRequest) {
        var parentNode = this._rootItems().filter(function (item) { return item.path === (pathRequest.id || pathRequest.ref); })[0];
        if (!parentNode)
            return;
        var childPath = parentNode.path;
        for (var index = 1; index < pathRequest.pathParts.length; index++) {
            if (!parentNode)
                return;
            childPath += '.' + pathRequest.pathParts[index];
            parentNode = parentNode.children().filter(function (item) { return _utils_1.isList(item) && item.path == childPath; })[0];
        }
        return parentNode;
    };
    TreeNodeItemsProvider.prototype._getDefaultTreeNodeCheckState = function (item) {
        return false;
    };
    return TreeNodeItemsProvider;
}(utils_1.Disposable));
exports.TreeNodeItemsProvider = TreeNodeItemsProvider;
