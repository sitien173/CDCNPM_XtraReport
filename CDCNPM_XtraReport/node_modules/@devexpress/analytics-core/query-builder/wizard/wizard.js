/**
* DevExpress Analytics (query-builder\wizard\wizard.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../../serializer/utils");
var stateManager_1 = require("./stateManager");
var pageIterator_1 = require("./pageIterator");
var eventManager_1 = require("../../serializer/eventManager");
var _utils_1 = require("./internal/_utils");
var BaseWizard = (function (_super) {
    __extends(BaseWizard, _super);
    function BaseWizard(pageFactory, finishCallback) {
        var _this = _super.call(this) || this;
        _this.pageFactory = pageFactory;
        _this.events = new eventManager_1.EventManager();
        _this._loadingTimeout = null;
        _this.isLoading = ko.observable(false);
        _this._currentPage = ko.observable();
        _this.isVisible = ko.observable(false);
        _this._finishCallback = finishCallback;
        _this._disposables.push(_this.events);
        return _this;
    }
    BaseWizard.prototype._createLoadingState = function (page) {
        var _this = this;
        if (!page[BaseWizard.__loadingStateFunctionName]) {
            page[BaseWizard.__loadingStateFunctionName] = function (newVal) { return _this._loadingState(newVal); };
        }
    };
    BaseWizard.prototype._createNextAction = function (page) {
        var _this = this;
        if (!page[BaseWizard.__nextActionFunctionName]) {
            page[BaseWizard.__nextActionFunctionName] = function () { return _this.nextAction(); };
        }
    };
    BaseWizard.prototype._loadingState = function (active) {
        var _this = this;
        if (active) {
            this._loadingTimeout && clearTimeout(this._loadingTimeout);
            this._loadingTimeout = setTimeout(function () {
                _this.isLoading(true);
            }, 100);
        }
        else {
            this._loadingTimeout && clearTimeout(this._loadingTimeout);
            this.isLoading(false);
        }
    };
    BaseWizard.prototype._callBeforeFinishHandler = function (state, wizardModel) {
        this.events.call('beforeFinish', { state: state });
    };
    BaseWizard.prototype._callAfterFinishHandler = function (state, result) {
        this.events.call('afterFinish', { state: state });
    };
    BaseWizard.prototype.onFinish = function () {
        this.iterator.dispose();
    };
    BaseWizard.prototype.initialize = function (state, createIterator) {
        if (state === void 0) { state = {}; }
        if (createIterator === void 0) { createIterator = function (pageFactory, stateManager) { return new pageIterator_1.PageIterator(pageFactory, stateManager); }; }
        this.events.call('beforeInitialize', { wizard: this, state: state });
        this.stateManager = new stateManager_1.StateManager(state, this.pageFactory);
        this.iterator = createIterator(this.pageFactory, this.stateManager);
        this.events.call('afterInitialize', { wizard: this });
    };
    BaseWizard.prototype.isFirstPage = function () {
        return this._currentPage() && this._currentPage().pageId == this.iterator.getNextPageId();
    };
    BaseWizard.prototype.canNext = function () {
        return !this.isLoading() && this._currentPage() && this.pageFactory.getMetadata(this._currentPage().pageId).canNext(this._currentPage().page);
    };
    BaseWizard.prototype.canFinish = function () {
        return !this.isLoading() && this._currentPage() && this.pageFactory.getMetadata(this._currentPage().pageId).canFinish(this._currentPage().page);
    };
    BaseWizard.prototype._initPage = function (page) {
        this.events.call('beforePageInitialize', _utils_1._createBeforeInitializePageEventArgs(page, this));
        this._createLoadingState(page.page);
        this._createNextAction(page.page);
        return page.initialize(this.stateManager.getPageState(page.pageId));
    };
    BaseWizard.prototype.start = function () {
        var _this = this;
        this.events.call('beforeStart', { wizard: this });
        this._loadingState(true);
        var startPage = this.iterator._getStartPage();
        this._initPage(startPage).done(function () {
            _this._currentPage(startPage);
            _this.events.call('afterPageInitialize', _utils_1._createPageEventArgs(startPage, _this));
        }).always(function () { return _this._loadingState(false); }).fail(function () {
            _this.isVisible(false);
        });
    };
    BaseWizard.prototype.canRunWizard = function () {
        return true;
    };
    BaseWizard.prototype.nextAction = function () {
        var _this = this;
        if (!this.canNext())
            return;
        var currentPage = this.iterator._getCurrentPage();
        this._loadingState(true);
        var revertPreviosPage = function () { return _this.iterator._getPreviousPage().always(function () {
            _this.iterator._resetPages();
            _this._loadingState(false);
        }); };
        currentPage.commit().done(function (result) {
            if (currentPage.isChanged)
                _this.stateManager.setPageState(currentPage.pageId, result);
            _this.iterator._getNextPage().done(function (page) {
                if (page) {
                    _this._initPage(page).done(function () {
                        _this._currentPage(page);
                        _this.events.call('afterPageInitialize', _utils_1._createPageEventArgs(page, _this));
                        _this._loadingState(false);
                    }).fail(function () { return revertPreviosPage(); });
                }
                else
                    revertPreviosPage();
            }).fail(function () { return _this._loadingState(false); });
        }).fail(function () { return _this._loadingState(false); });
    };
    BaseWizard.prototype.previousAction = function () {
        var _this = this;
        if (this.isFirstPage())
            return;
        this._loadingState(true);
        this.iterator._getPreviousPage().done(function (page) {
            if (page) {
                _this._currentPage(page);
            }
        }).always(function () { return _this._loadingState(false); });
    };
    BaseWizard.prototype.goToPage = function (pageId) {
        var _this = this;
        this._loadingState(true);
        this.iterator._goToPage(pageId).done(function (page) {
            if (page) {
                _this._currentPage(page);
            }
        }).always(function () { return _this._loadingState(false); });
    };
    BaseWizard.prototype.finishAction = function () {
        var _this = this;
        if (!this.canFinish())
            return;
        this._loadingState(true);
        var currentPage = this.iterator._getCurrentPage();
        currentPage.commit().done(function (result) {
            _this.stateManager.setPageState(currentPage.pageId, result);
            _this.iterator._resetPages();
            if (_this._finishCallback) {
                var currentState = _this.stateManager.getCurrentState();
                _this._callBeforeFinishHandler(currentState);
                _this._finishCallback(currentState)
                    .done(function (result) {
                    _this.onFinish();
                    _this._callAfterFinishHandler(currentState, result);
                    _this.isVisible(false);
                })
                    .always(function () {
                    _this._loadingState(false);
                });
            }
            else {
                _this._loadingState(false);
                _this.isVisible(false);
            }
        });
    };
    BaseWizard.__loadingStateFunctionName = '__loadingState';
    BaseWizard.__nextActionFunctionName = '__nextAction';
    return BaseWizard;
}(utils_1.Disposable));
exports.BaseWizard = BaseWizard;
