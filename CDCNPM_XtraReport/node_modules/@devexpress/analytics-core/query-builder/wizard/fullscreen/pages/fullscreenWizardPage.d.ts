/**
* DevExpress Analytics (query-builder\wizard\fullscreen\pages\fullscreenWizardPage.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { IWizardPage, WizardPageBase } from '../../pages/wizardPage';
import { IWizardPageStyle } from '../../internal/_utils';
import { WizardPageSectionFactory } from '../../internal/_wizardPageSectionFactory';
import { WizardPageProcessor } from '../../internal/_wizardPageProcessor';
import { WizardPageSection } from '../../internal/_wizardPageSectionIterator';
import { IWizardPageMetadata } from '../../pages/wizardPageMetadata';
import { StateManager } from '../../stateManager';
import { EventManager } from '../../../../serializer/eventManager';
export declare enum WizardSectionPosition {
    Left = 1,
    TopLeft = 2,
    BottomLeft = 3,
    Right = 4,
    TopRight = 5,
    BottomRight = 6,
    Top = 7,
    Bottom = 8
}
export interface IBeforeWizardSectionInitializeEventArgs<Sender> extends IWizardSectionEventArgs<Sender> {
    state: any;
}
export interface IWizardSectionEventArgs<Sender> {
    section: IWizardPage;
    sectionId: string;
    page: Sender;
}
export interface IWizardFullscreenPageEvents<Sender> {
    'beforeSectionInitialize': IBeforeWizardSectionInitializeEventArgs<Sender>;
    'afterSectionInitialize': IWizardSectionEventArgs<Sender>;
}
export declare class FullscreenWizardPage extends WizardPageBase {
    dispose(): void;
    private _patchOnChange;
    private _getPageStyle;
    private _sectionsToUnregister;
    private _sectionsToRegister;
    private _sectionPositions;
    private _applyCustomizations;
    protected _setSectionPosition(pageId: string, position?: WizardSectionPosition): void;
    constructor();
    registerSections(): void;
    canNext(): boolean;
    private _sectionCondition;
    canFinish(): boolean;
    setSectionPosition(sectionId: string, position?: WizardSectionPosition): void;
    registerSection(sectionId: string, metadata: IWizardPageMetadata<IWizardPage>): void;
    unregisterSection(sectionId: string): void;
    _loadPanelViewModel(element: HTMLElement): boolean;
    getNextSectionId(sectionId: string): any;
    initialize(state: any, stateChanged?: boolean): JQuery.Promise<any, any, any>;
    _beforeStart(): void;
    commit(): JQuery.Promise<any, any, any>;
    _getPageDescription(index: number, page: WizardPageSection): string;
    _showPageDescription(): boolean;
    _initInProgress: ko.Observable<boolean>;
    _defaultMargin: number;
    _parentMarginOffset: number;
    _className: string;
    _sections: WizardPageSection[];
    _pageCss: {
        [key: string]: ko.Observable<IWizardPageStyle>;
    };
    _factory: WizardPageSectionFactory;
    _stateManager: StateManager;
    _sectionsProcessor: WizardPageProcessor;
    events: EventManager<FullscreenWizardPage, IWizardFullscreenPageEvents<FullscreenWizardPage>>;
}
