/**
* DevExpress Analytics (query-builder\wizard\fullscreen\pages\fullscreenWizardPage.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var wizardPage_1 = require("../../pages/wizardPage");
var _utils_1 = require("../../internal/_utils");
var _wizardPageSectionFactory_1 = require("../../internal/_wizardPageSectionFactory");
var _wizardPageProcessor_1 = require("../../internal/_wizardPageProcessor");
var wizard_1 = require("../../wizard");
var eventManager_1 = require("../../../../serializer/eventManager");
var _utils_2 = require("../../../../serializer/_utils");
var WizardSectionPosition;
(function (WizardSectionPosition) {
    WizardSectionPosition[WizardSectionPosition["Left"] = 1] = "Left";
    WizardSectionPosition[WizardSectionPosition["TopLeft"] = 2] = "TopLeft";
    WizardSectionPosition[WizardSectionPosition["BottomLeft"] = 3] = "BottomLeft";
    WizardSectionPosition[WizardSectionPosition["Right"] = 4] = "Right";
    WizardSectionPosition[WizardSectionPosition["TopRight"] = 5] = "TopRight";
    WizardSectionPosition[WizardSectionPosition["BottomRight"] = 6] = "BottomRight";
    WizardSectionPosition[WizardSectionPosition["Top"] = 7] = "Top";
    WizardSectionPosition[WizardSectionPosition["Bottom"] = 8] = "Bottom";
})(WizardSectionPosition = exports.WizardSectionPosition || (exports.WizardSectionPosition = {}));
var FullscreenWizardPage = (function (_super) {
    __extends(FullscreenWizardPage, _super);
    function FullscreenWizardPage() {
        var _this = _super.call(this) || this;
        _this._sectionsToUnregister = [];
        _this._sectionsToRegister = [];
        _this._sectionPositions = [];
        _this._initInProgress = ko.observable(false);
        _this._defaultMargin = 30;
        _this._parentMarginOffset = _this._defaultMargin + _this._defaultMargin / 2;
        _this._className = '';
        _this._pageCss = {};
        _this.events = new eventManager_1.EventManager();
        _this._factory = new _wizardPageSectionFactory_1.WizardPageSectionFactory();
        _this._sectionsProcessor = new _wizardPageProcessor_1.WizardPageProcessor(_this._factory, function (state) {
            _this[wizard_1.BaseWizard.__loadingStateFunctionName] && _this[wizard_1.BaseWizard.__loadingStateFunctionName](state);
        }, function () { return _this[wizard_1.BaseWizard.__nextActionFunctionName] && _this[wizard_1.BaseWizard.__nextActionFunctionName](); });
        _this._sectionsProcessor.events.addHandler('beforeStart', function () {
            _this._sections = _this._sectionsProcessor.sections;
            _this._beforeStart();
            _this._patchOnChange();
        });
        _this._sectionsProcessor.events.addHandler('beforePageInitialize', function (args) {
            _this.events.call('beforeSectionInitialize', {
                section: args.page,
                sectionId: args.pageId,
                page: _this,
                state: args.state
            });
        });
        _this._sectionsProcessor.events.addHandler('afterPageInitialize', function (args) {
            _this.events.call('afterSectionInitialize', {
                section: args.page,
                sectionId: args.pageId,
                page: _this
            });
        });
        return _this;
    }
    FullscreenWizardPage.prototype.dispose = function () {
        this._sectionsProcessor.dispose();
        this._factory.reset();
        this._sections = [];
    };
    FullscreenWizardPage.prototype._patchOnChange = function () {
        var _this = this;
        Object.keys(this._factory.metadata).forEach(function (key) {
            _this._factory.metadata[key].onChange = function () { return _this._onChange(); };
        });
    };
    FullscreenWizardPage.prototype._getPageStyle = function (position, isVisible) {
        if (isVisible === void 0) { isVisible = true; }
        return _utils_1.getSectionStyle(position, this._defaultMargin, isVisible);
    };
    FullscreenWizardPage.prototype._applyCustomizations = function () {
        this._sectionsToUnregister.forEach(function (x) { return x(); });
        this._sectionsToUnregister = [];
        this._sectionPositions.forEach(function (x) { return x(); });
        this._sectionPositions = [];
        this._sectionsToRegister.forEach(function (x) { return x(); });
        this._sectionsToRegister = [];
    };
    FullscreenWizardPage.prototype._setSectionPosition = function (pageId, position) {
        this._pageCss[pageId] = ko.observable(this._getPageStyle(position));
    };
    FullscreenWizardPage.prototype.registerSections = function () { };
    FullscreenWizardPage.prototype.canNext = function () {
        return this._sectionsProcessor.sections.every(this._sectionCondition);
    };
    FullscreenWizardPage.prototype._sectionCondition = function (section) {
        if (section.metadata.required)
            return section.page() && section.metadata.canNext(section.page().page);
        else {
            return !section.page() || section.metadata.canNext(section.page().page);
        }
    };
    FullscreenWizardPage.prototype.canFinish = function () {
        for (var i = this._sections.length - 1; i >= 0; i--) {
            if (this._sections[i].page() && this._sections[i].metadata.canFinish(this._sections[i].page().page))
                return true;
        }
        return false;
    };
    FullscreenWizardPage.prototype.setSectionPosition = function (sectionId, position) {
        var _this = this;
        this._sectionPositions.push(function () {
            _this._setSectionPosition(sectionId, position);
        });
    };
    FullscreenWizardPage.prototype.registerSection = function (sectionId, metadata) {
        var _this = this;
        this._sectionsToRegister.push(function () {
            _this._factory.registerMetadata(sectionId, metadata);
        });
    };
    FullscreenWizardPage.prototype.unregisterSection = function (sectionId) {
        var _this = this;
        this._sectionsToUnregister.push(function () { return _this._factory.unregisterMetadata(sectionId); });
    };
    FullscreenWizardPage.prototype._loadPanelViewModel = function (element) {
        return false;
    };
    FullscreenWizardPage.prototype.getNextSectionId = function (sectionId) { return undefined; };
    FullscreenWizardPage.prototype.initialize = function (state, stateChanged) {
        var _this = this;
        this.registerSections();
        this._applyCustomizations();
        this._sectionsProcessor.initialize(_utils_2.extend(true, {}, state));
        this._stateManager = this._sectionsProcessor.stateManager;
        this._sectionsProcessor.iterator.getNextPageId = function (pageId) { return _this.getNextSectionId(pageId); };
        this._sectionsProcessor.start();
        return $.Deferred().resolve().promise();
    };
    FullscreenWizardPage.prototype._beforeStart = function () { };
    FullscreenWizardPage.prototype.commit = function () {
        var _this = this;
        var deferred = $.Deferred();
        this._sectionsProcessor.finishAction().done(function () {
            deferred.resolve(_utils_2.extend(true, {}, _this._stateManager.getCurrentState()));
        });
        return deferred.promise();
    };
    FullscreenWizardPage.prototype._getPageDescription = function (index, page) {
        return (index + 1) + '. ' + page.metadata.description;
    };
    FullscreenWizardPage.prototype._showPageDescription = function () {
        return this._sections.length > 1;
    };
    return FullscreenWizardPage;
}(wizardPage_1.WizardPageBase));
exports.FullscreenWizardPage = FullscreenWizardPage;
