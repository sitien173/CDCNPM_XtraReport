/**
* DevExpress Analytics (query-builder\wizard\fullscreen\fullscreenWizardNavigation.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../../../serializer/utils");
var WizardNavigationPanel = (function (_super) {
    __extends(WizardNavigationPanel, _super);
    function WizardNavigationPanel(wizard) {
        var _this = _super.call(this) || this;
        _this._steps = [];
        _this._disposables.push(wizard._currentPage.subscribe(function (newPage) {
            var currentStep = _this._steps.filter(function (step) { return step.pageIds.some(function (x) { return x === newPage.pageId; }); })[0];
            if (currentStep) {
                currentStep.currentPageId = newPage.pageId;
                currentStep.disabled(false);
                _this._setStepVisible(currentStep.stepIndex);
            }
        }));
        Object.keys(wizard.pageFactory.metadata).forEach(function (pageId) {
            var item = wizard.pageFactory.metadata[pageId];
            var navigationItem = _this._steps.filter(function (x) { return x.text === item.navigationPanelText; })[0];
            if (navigationItem) {
                navigationItem.pageIds.push(pageId);
            }
            else {
                var navigationStep = {
                    text: item.navigationPanelText,
                    pageIds: [pageId],
                    currentPageId: null,
                    stepIndex: _this._steps.length,
                    disabled: ko.observable(true),
                    visible: ko.observable(true)
                };
                _this._disposables.push(navigationStep.isActive = ko.computed(function () {
                    return wizard._currentPage() && navigationStep.currentPageId === wizard._currentPage().pageId;
                }));
                navigationStep.clickAction = function () {
                    if (!navigationStep.isActive())
                        wizard.goToPage(navigationStep.currentPageId);
                };
                _this._steps.push(navigationStep);
            }
        });
        _this._disposables.push(_this.isVisible = ko.computed(function () {
            return _this._steps.filter(function (step) { return step.visible(); }).length > 1;
        }));
        return _this;
    }
    WizardNavigationPanel.prototype.resetAll = function () {
        this._steps.forEach(function (step) {
            step.disabled(true);
        });
    };
    WizardNavigationPanel.prototype._currentStep = function (pageId) {
        return this._steps.filter(function (x) { return x.currentPageId === pageId; })[0];
    };
    WizardNavigationPanel.prototype._reset = function (pageId) {
        var currentStep = this._currentStep(pageId);
        currentStep && currentStep.disabled(true);
    };
    WizardNavigationPanel.prototype._resetNextPages = function (pageId) {
        var currentStep = this._currentStep(pageId);
        if (!currentStep)
            return;
        for (var i = currentStep.stepIndex + 1; i < this._steps.length; i++) {
            this._steps[i].disabled(true);
        }
    };
    WizardNavigationPanel.prototype._setStepVisible = function (currentPageIndex) {
        var previousSteps = this._steps.filter(function (_, index) { return index < currentPageIndex; });
        if (previousSteps.length > 0 && !previousSteps.some(function (step) { return !step.disabled(); })) {
            previousSteps.forEach(function (step) { return step.visible(false); });
        }
    };
    return WizardNavigationPanel;
}(utils_1.Disposable));
exports.WizardNavigationPanel = WizardNavigationPanel;
