/**
* DevExpress Analytics (query-builder\wizard\pages\jsonDataSourceWizard\specifyJsonConnectionPage.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var chooseJsonConnectionPage_1 = require("./chooseJsonConnectionPage");
var requestwrapper_1 = require("../../../utils/requestwrapper");
var chooseJsonSourcePage_1 = require("./chooseJsonSourcePage");
var pageId_1 = require("../../pageId");
var localization_utils_1 = require("../../../../property-grid/localization/localization_utils");
var SpecifyJsonConnectionPage = (function (_super) {
    __extends(SpecifyJsonConnectionPage, _super);
    function SpecifyJsonConnectionPage(connections, allowCreateNewJsonConnection, itemsProvider, _requestWrapper) {
        if (_requestWrapper === void 0) { _requestWrapper = new requestwrapper_1.RequestWrapper(); }
        var _this = _super.call(this, connections, allowCreateNewJsonConnection) || this;
        _this._requestWrapper = _requestWrapper;
        _this._disposables.push(_this._specifySourceData = new chooseJsonSourcePage_1.ChooseJsonSourcePage(_requestWrapper, itemsProvider));
        _this._specifySourceData.onChange(function () { return _this._onChange(); });
        return _this;
    }
    SpecifyJsonConnectionPage.prototype.commit = function () {
        var deffered = $.Deferred();
        var _promise;
        if (this._createNew()) {
            _promise = this._specifySourceData.commit();
        }
        else {
            _promise = _super.prototype.commit.call(this);
        }
        _promise.done(function (state) {
            deffered.resolve(state);
        });
        return deffered.promise();
    };
    SpecifyJsonConnectionPage.prototype.canNext = function () {
        if (this._createNew()) {
            return this._specifySourceData.canNext();
        }
        else {
            return _super.prototype.canNext.call(this);
        }
    };
    SpecifyJsonConnectionPage.prototype.initialize = function (state) {
        var _this = this;
        var deffered = $.Deferred();
        _super.prototype.initialize.call(this, state).done(function () {
            _this._specifySourceData.initialize(state).done(function () {
                deffered.resolve(_this);
            });
        });
        return deffered.promise();
    };
    return SpecifyJsonConnectionPage;
}(chooseJsonConnectionPage_1.ChooseJsonConnectionPage));
exports.SpecifyJsonConnectionPage = SpecifyJsonConnectionPage;
function _registerSpecifyJsonConnectionPage(factory, connections, allowCreateNewJsonConnection, getItemsProviderCallBack) {
    factory.registerMetadata(pageId_1.JsonDataSourceWizardPageId.SpecifyJsonConnectionPage, {
        create: function () { return new SpecifyJsonConnectionPage(connections, allowCreateNewJsonConnection, getItemsProviderCallBack && getItemsProviderCallBack()); },
        description: allowCreateNewJsonConnection ?
            localization_utils_1.getLocalization('Do you want to use an existing data connection?', 'AnalyticsCoreStringId.JsonDSWizard_ChooseConnection_Description') :
            localization_utils_1.getLocalization('Choose a data connection.', 'AnalyticsCoreStringId.SqlDSWizard_PageChooseConnection'),
        getState: function (state) { return state.jsonDataSourceWizard; },
        setState: function (data, state) {
            state.connectionName = data.connectionName;
            state.jsonSource = data.jsonSource;
            state.newConnectionName = data.newConnectionName;
        },
        resetState: function (state, defaultState) {
            state.connectionName = defaultState.connectionName;
            state.jsonSource = defaultState.jsonSource;
            state.newConnectionName = defaultState.newConnectionName;
        },
        template: 'dxrd-page-specify-connection'
    });
}
exports._registerSpecifyJsonConnectionPage = _registerSpecifyJsonConnectionPage;
