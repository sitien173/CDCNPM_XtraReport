/**
* DevExpress Analytics (query-builder\wizard\pages\jsonDataSourceWizard\chooseJsonSourcePage.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var wizardPage_1 = require("../wizardPage");
var dataSourceWizardState_1 = require("../../dataSourceWizardState");
var _jsonSourceSettings_1 = require("../../internal/_jsonSourceSettings");
var requestwrapper_1 = require("../../../utils/requestwrapper");
var jsonDataSource_1 = require("../../../dataSource/json/jsonDataSource");
var serializer_1 = require("../../../../serializer/serializer");
var localization_utils_1 = require("../../../../property-grid/localization/localization_utils");
var pageId_1 = require("../../pageId");
var ChooseJsonSourcePage = (function (_super) {
    __extends(ChooseJsonSourcePage, _super);
    function ChooseJsonSourcePage(_requestWrapper, itemsProvider) {
        if (_requestWrapper === void 0) { _requestWrapper = new requestwrapper_1.RequestWrapper(); }
        var _this = _super.call(this) || this;
        _this._requestWrapper = _requestWrapper;
        _this.__validationGroup = null;
        _this.__validationSummary = null;
        _this._jsonSourceTitle = localization_utils_1.getLocalization('JSON Source:', 'DataAccessUIStringId.WizardPageChooseJsonSource_SourceType');
        _this._jsonConnectionTitle = localization_utils_1.getLocalization('Connection Name:', 'AnalyticsCoreStringId.ReportDesigner_Wizard_Json_ConnectionName');
        _this._connectionNameValidationRules = [{
                type: 'required',
                get message() {
                    return _jsonSourceSettings_1.getLocalizedValidationErrorMessage(null, this._jsonConnectionTitle);
                }
            }];
        _this._connectionName = ko.observable('');
        _this._validationGroup = {
            onInitialized: function (args) { return _this._onValidationGroupInitialized(args); },
            onDisposing: function (args) { return _this._onValidationGroupDisposing(args); }
        };
        _this._validationSummary = {
            onInitialized: function (args) { return _this._onValidationSummaryInitialized(args); },
            onDisposing: function (args) { return _this._onValidationSummaryDisposing(args); }
        };
        _this._sources = [];
        _this._disposables.push(_this._jsonStringSettings = new _jsonSourceSettings_1.JsonDataSourceJsonSourcePageStringSettings());
        _this._jsonStringSettings.onChange(function () { return _this._onChange(); });
        _this._disposables.push(_this._jsonUriSetting = new _jsonSourceSettings_1.JsonDataSourceJsonSourcePageUriSettings(_this._requestWrapper, itemsProvider));
        _this._jsonUriSetting.onChange(function () { return _this._onChange(); });
        _this._sources = [
            { value: _this._jsonUriSetting, displayValue: 'Web Service Endpoint (URI)', localizationId: 'DataAccessUIStringId.WizardPageChooseJsonSource_SourceType_Uri' },
            { value: _this._jsonStringSettings, displayValue: 'JSON String', localizationId: 'DataAccessUIStringId.WizardPageChooseJsonSource_SourceType_Custom' }
        ];
        var selectedSource = ko.observable();
        _this._selectedSource = ko.pureComputed({
            read: function () { return selectedSource(); },
            write: function (newVal) {
                if (selectedSource() === newVal)
                    return;
                selectedSource(newVal);
                newVal._validatorsReady && newVal._validatorsReady(false);
                setTimeout(function () {
                    newVal._validate && newVal._validate();
                }, 1);
                _this._onChange();
            }
        });
        _this._selectedSource(_this._sources[0].value);
        _this._disposables.push(_this._selectedSource);
        _this._disposables.push(_this._connectionName.subscribe(function () { return _this._onChange(); }));
        return _this;
    }
    ChooseJsonSourcePage.prototype._onValidationGroupInitialized = function (e) {
        this.__validationGroup = e.component;
    };
    ChooseJsonSourcePage.prototype._onValidationGroupDisposing = function (e) {
        this.__validationGroup = null;
    };
    ChooseJsonSourcePage.prototype._onValidationSummaryInitialized = function (e) {
        var _this = this;
        this.__validationSummary = e.component;
        this.__validationGroup && this.__validationSummary && this._connectionName && this._connectionName() && setTimeout(function () {
            _this.__validationGroup && _this.__validationGroup.validate();
        }, 1);
    };
    ChooseJsonSourcePage.prototype._onValidationSummaryDisposing = function (e) {
        this.__validationSummary = null;
    };
    ChooseJsonSourcePage.prototype.canNext = function () {
        var connectionNameNotEmpty = !!this._connectionName();
        var isCurrentSourceValid = this._selectedSource().isValid();
        var isCurrentSourceEmpty = this._selectedSource().isEmpty();
        return connectionNameNotEmpty && isCurrentSourceValid && !isCurrentSourceEmpty;
    };
    ChooseJsonSourcePage.prototype.commit = function () {
        var jsonDataSource = new jsonDataSource_1.JsonDataSource({});
        this._selectedSource().applySettings(jsonDataSource);
        var serialized = new serializer_1.ModelSerializer().serialize(jsonDataSource);
        return $.Deferred().resolve({
            jsonSource: JSON.stringify(serialized.Source),
            newConnectionName: this._connectionName()
        }).promise();
    };
    ChooseJsonSourcePage.prototype.initialize = function (state) {
        this.__validationGroup = null;
        this.__validationSummary = null;
        var jsonDataSource = dataSourceWizardState_1._restoreJsonDataSourceFromState(state);
        if (jsonDataSource.source.uri()) {
            this._selectedSource(this._jsonUriSetting);
        }
        else if (jsonDataSource.source.json()) {
            this._selectedSource(this._jsonStringSettings);
        }
        this._selectedSource().setValue(jsonDataSource);
        return $.Deferred().resolve().promise();
    };
    return ChooseJsonSourcePage;
}(wizardPage_1.WizardPageBase));
exports.ChooseJsonSourcePage = ChooseJsonSourcePage;
function _registerChooseJsonSourcePage(factory, requestWrapper, getItemsProviderCallback) {
    factory.registerMetadata(pageId_1.JsonDataSourceWizardPageId.ChooseJsonSourcePage, {
        setState: function (data, state) {
            state.jsonSource = data.jsonSource;
            state.newConnectionName = data.newConnectionName;
        },
        getState: function (state) {
            return state.jsonDataSourceWizard;
        },
        resetState: function (state, defaultState) {
            state.jsonSource = defaultState.jsonSource;
        },
        create: function () {
            return new ChooseJsonSourcePage(requestWrapper, getItemsProviderCallback && getItemsProviderCallback());
        },
        description: localization_utils_1.getLocalization('Create a data connection.', 'AnalyticsCoreStringId.JsonDSWizard_CreateNewConnectionPage_Description'),
        template: 'dxrd-page-jsonsource'
    });
}
exports._registerChooseJsonSourcePage = _registerChooseJsonSourcePage;
