/**
* DevExpress Analytics (query-builder\wizard\pages\jsonDataSourceWizard\chooseJsonConnectionPage.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var chooseAvailablePage_1 = require("../../chooseAvailablePage");
var _arrayutils_1 = require("../../../../core/utils/_arrayutils");
var localization_utils_1 = require("../../../../property-grid/localization/localization_utils");
var pageId_1 = require("../../pageId");
var ChooseJsonConnectionPage = (function (_super) {
    __extends(ChooseJsonConnectionPage, _super);
    function ChooseJsonConnectionPage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChooseJsonConnectionPage.prototype.commit = function () {
        return $.Deferred().resolve({
            connectionName: !this.selectedOperation().createNew ? this.selectedItems()[0].name : null
        }).promise();
    };
    ChooseJsonConnectionPage.prototype._getSelectedItem = function (data) {
        return _arrayutils_1.getFirstItemByPropertyValue(this.items(), 'name', data.connectionName) || _super.prototype._getSelectedItem.call(this);
    };
    Object.defineProperty(ChooseJsonConnectionPage.prototype, "createNewOperationText", {
        get: function () {
            return localization_utils_1.getLocalization("No, I'd like to create a new data connection", 'AnalyticsCoreStringId.JsonDSWizard_CreateNewConnection');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChooseJsonConnectionPage.prototype, "existingOperationText", {
        get: function () {
            return localization_utils_1.getLocalization('Yes, let me choose an existing data connection from the list', 'AnalyticsCoreStringId.JsonDSWizard_UseExistingConnection');
        },
        enumerable: true,
        configurable: true
    });
    return ChooseJsonConnectionPage;
}(chooseAvailablePage_1.ChooseAvailableItemPage));
exports.ChooseJsonConnectionPage = ChooseJsonConnectionPage;
function _registerChooseJsonConnectionPage(factory, wizardOptions) {
    factory.registerMetadata(pageId_1.JsonDataSourceWizardPageId.ChooseConnectionPage, {
        create: function () {
            return new ChooseJsonConnectionPage(wizardOptions.connectionStrings && wizardOptions.connectionStrings.json, wizardOptions.allowCreateNewJsonConnection);
        },
        description: wizardOptions.allowCreateNewJsonConnection ?
            localization_utils_1.getLocalization('Do you want to use an existing data connection?', 'AnalyticsCoreStringId.JsonDSWizard_ChooseConnection_Description') :
            localization_utils_1.getLocalization('Choose a data connection.', 'AnalyticsCoreStringId.SqlDSWizard_PageChooseConnection'),
        getState: function (state) { return state.jsonDataSourceWizard; },
        setState: function (data, state) { return state.connectionName = data.connectionName; },
        resetState: function (state, defaultState) {
            state.connectionName = defaultState.connectionName;
        },
        template: 'dxrd-page-selectitems'
    });
}
exports._registerChooseJsonConnectionPage = _registerChooseJsonConnectionPage;
