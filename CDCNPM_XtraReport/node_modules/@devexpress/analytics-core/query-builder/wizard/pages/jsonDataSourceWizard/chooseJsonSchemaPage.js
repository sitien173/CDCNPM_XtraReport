/**
* DevExpress Analytics (query-builder\wizard\pages\jsonDataSourceWizard\chooseJsonSchemaPage.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var wizardPage_1 = require("../wizardPage");
var dataSourceWizardState_1 = require("../../dataSourceWizardState");
var _jsonTreeNodeItemsProvider_1 = require("../../internal/_jsonTreeNodeItemsProvider");
var jsonSchemaNode_1 = require("../../../dataSource/json/jsonSchemaNode");
var _treeListNode_1 = require("../../internal/_treeListNode");
var requestwrapper_1 = require("../../../utils/requestwrapper");
var _fieldListProvider_1 = require("../../../../core/utils/_fieldListProvider");
var serializer_1 = require("../../../../serializer/serializer");
var localization_utils_1 = require("../../../../property-grid/localization/localization_utils");
var pageId_1 = require("../../pageId");
var ChooseJsonSchemaPage = (function (_super) {
    __extends(ChooseJsonSchemaPage, _super);
    function ChooseJsonSchemaPage(_requestWrapper, _allowObjectRootElements, _callbacks) {
        if (_requestWrapper === void 0) { _requestWrapper = new requestwrapper_1.RequestWrapper(); }
        if (_allowObjectRootElements === void 0) { _allowObjectRootElements = true; }
        var _this = _super.call(this) || this;
        _this._requestWrapper = _requestWrapper;
        _this._allowObjectRootElements = _allowObjectRootElements;
        _this._callbacks = _callbacks;
        _this._rootItems = ko.observableArray([]);
        _this._fieldListItemsProvider = ko.observable(null);
        _this._fieldSelectedPath = ko.observable(null);
        _this._cachedState = {
            connectionName: null,
            jsonSource: null
        };
        _this._createTreeNode = function (item, isChecked, path) {
            var node = new _treeListNode_1.DataMemberTreeNode(item.name, item.displayName, item.specifics, isChecked, path);
            _this._disposables.push(node.checked.subscribe(function () { return _this._onChange(); }));
            return node;
        };
        _this._createLeafTreeNode = function (item, isChecked, path) {
            var node = new _treeListNode_1.FieldTreeNode(item.name, item.displayName, item.specifics, isChecked, path);
            _this._disposables.push(node.checked.subscribe(function () { return _this._onChange(); }));
            return node;
        };
        _this._rootElementTitle = localization_utils_1.getLocalization('Root element:', 'DataAccessUIStringId.WizardPageChooseJsonSchema_RootElement');
        _this._rootElementList = ko.observable([]);
        _this._selectedRootElement = ko.observable(null);
        var rootElementSubscription = null;
        _this._disposables.push(_this._rootElementList.subscribe(function (rootElements) {
            rootElementSubscription && rootElementSubscription.dispose();
            rootElementSubscription = _this._selectedRootElement.subscribe(function (selectedPath) {
                if (!selectedPath)
                    return _this._rootItems([]);
                var rootNode = _this._getSchemaToDataMemberInfo(selectedPath);
                if (rootNode) {
                    _this._rootItems([{
                            name: ko.unwrap(rootNode.name),
                            isSelected: ko.unwrap(rootNode.selected),
                            displayName: ko.unwrap(rootNode.displayName) || ko.unwrap(rootNode.name),
                            data: rootNode,
                            specifics: rootNode.nodes.length > 0 ? 'List' : 'Default'
                        }]);
                }
            });
            _this._selectedRootElement(rootElements[0]);
        }));
        var fieldListProvider = new _fieldListProvider_1.FieldListProvider(_this._createFieldListCallback(), _this._rootItems);
        _this._fieldListItemsProvider(new _jsonTreeNodeItemsProvider_1.JsonTreeNodeItemsProvider(fieldListProvider, _this._rootItems, _this._createTreeNode, _this._createLeafTreeNode));
        _this._disposables.push(_this._fieldListItemsProvider());
        _this._fieldListModel = {
            expandRootItems: true,
            itemsProvider: _this._fieldListItemsProvider(),
            selectedPath: _this._fieldSelectedPath,
            treeListController: null,
            templateName: 'dxrd-treelist-with-checkbox'
        };
        return _this;
    }
    ChooseJsonSchemaPage.prototype._clear = function () {
        this._rootItems([]);
        this._fieldSelectedPath('');
        this._rootElementList([]);
        this._selectedRootElement(null);
        this._dataSource && this._dataSource.jsonSchemaProvider.reset();
        this._cachedState = {
            connectionName: null,
            jsonSource: null
        };
    };
    ChooseJsonSchemaPage.prototype._createFieldListCallback = function () {
        var _this = this;
        return function (pathRequest) {
            var parentNode = new jsonSchemaNode_1.JsonNode({});
            parentNode.nodes = [_this._rootItems()[0].data];
            var itemsByPath = _this._getInnerItemsByPath(pathRequest, parentNode);
            return $.Deferred().resolve(itemsByPath).promise();
        };
    };
    ChooseJsonSchemaPage.prototype._getSchemaToDataMemberInfo = function (path) {
        var nodeAcc = this._dataSource.schema;
        for (var i = 0; i < path.pathParts.length; i++) {
            nodeAcc = nodeAcc.nodes.filter(function (node) { return node.name() === path.pathParts[i]; })[0];
            if (!nodeAcc)
                return null;
        }
        return nodeAcc;
    };
    ChooseJsonSchemaPage.prototype._mapJsonNodesToTreelistItems = function (nodes) {
        return $.map((nodes || []), function (node) {
            var dataMemberInfo = {
                name: node.name(),
                displayName: node.displayName || node.name(),
                isSelected: node.selected(),
                isList: node.nodes && node.nodes.length > 0,
                specifics: 'Default'
            };
            return dataMemberInfo;
        });
    };
    ChooseJsonSchemaPage.prototype._getNodesByPath = function (pathRequest, parentNode) {
        if (!pathRequest.fullPath) {
            return parentNode.nodes;
        }
        else {
            var currentNodes = parentNode.nodes;
            for (var i = 0; i < pathRequest.pathParts.length; i++) {
                var pathPart = (currentNodes || []).filter(function (node) { return node.name() == pathRequest.pathParts[i]; })[0];
                if (!pathPart)
                    return [];
                currentNodes = pathPart.nodes;
            }
            return currentNodes;
        }
    };
    ChooseJsonSchemaPage.prototype._getInnerItemsByPath = function (pathRequest, parentNode) {
        var nodes = this._getNodesByPath(pathRequest, parentNode);
        return this._mapJsonNodesToTreelistItems(nodes);
    };
    ChooseJsonSchemaPage.prototype._beginInternal = function (state) {
        var _this = this;
        if ((state.connectionName && this._cachedState.connectionName === state.connectionName) ||
            (state.jsonSource && this._cachedState.jsonSource === state.jsonSource))
            return $.Deferred().resolve().promise();
        this._clear();
        this._cachedState = {
            connectionName: state.connectionName,
            jsonSource: state.jsonSource
        };
        var oldDataSourceId = this._dataSource && this._dataSource.id;
        this._dataSource = dataSourceWizardState_1._restoreJsonDataSourceFromState(state, this._requestWrapper);
        if ((oldDataSourceId && oldDataSourceId != this._dataSource.id) || !this._dataSource.schema.nodes.length) {
            return this._dataSource.getSchema(this._callbacks && this._callbacks.getParameters && this._callbacks.getParameters())
                .done(function (schema) { return _this._updatePage(schema); });
        }
        return $.Deferred().done(function (schema) { return _this._updatePage(schema); }).resolve(this._dataSource.schema).promise();
    };
    ChooseJsonSchemaPage.prototype._updatePage = function (jsonSchema) {
        var rootElementList = jsonSchema.getRootElementPartList(this._allowObjectRootElements);
        if (this._rootElementList() !== rootElementList) {
            this._rootElementList(this._filterRootElementList(rootElementList, jsonSchema));
        }
        if (this._dataSource.rootElement()) {
            var dataSourceRootElementPath = ['root', this._dataSource.rootElement()].join('.');
            var rootElementToSelect = this._rootElementList().filter(function (item) { return item.fullPath === dataSourceRootElementPath; })[0] || this._rootElementList()[0];
            this._selectedRootElement(rootElementToSelect);
        }
        this._onChange();
    };
    ChooseJsonSchemaPage.prototype._resetSelectionRecursive = function (currentNode, selectedRootElement) {
        var _this = this;
        if (currentNode === selectedRootElement) {
            return;
        }
        currentNode.selected && currentNode.selected(false);
        (currentNode.nodes || []).forEach(function (node) { return _this._resetSelectionRecursive(node, selectedRootElement); });
    };
    ChooseJsonSchemaPage.prototype._mapJsonSchema = function (jsonNode, path) {
        var _this = this;
        var treelistNode = this._fieldListItemsProvider().getNodeByPath(path);
        if (!treelistNode)
            return;
        jsonNode.selected(treelistNode.checked() !== false);
        (jsonNode.nodes || []).forEach(function (innerJsonNode) {
            var nextPathParts = path.pathParts.concat(innerJsonNode.name());
            var nextFullPath = nextPathParts.join('.');
            var nextPath = { fullPath: nextFullPath, path: innerJsonNode.name(), id: nextFullPath, pathParts: nextPathParts };
            _this._mapJsonSchema(innerJsonNode, nextPath);
        });
        return jsonNode;
    };
    ChooseJsonSchemaPage.prototype._filterRootElementList = function (rootElementList, jsonSchema) {
        return rootElementList;
    };
    ChooseJsonSchemaPage.prototype.canNext = function () {
        return false;
    };
    ChooseJsonSchemaPage.prototype.canFinish = function () {
        return this._fieldListItemsProvider().hasCheckedItems();
    };
    ChooseJsonSchemaPage.prototype.commit = function () {
        var rootItem = this._rootItems()[0];
        if (!rootItem)
            return;
        var currentRootNode = this._rootItems()[0].data;
        this._resetSelectionRecursive(this._dataSource.schema, currentRootNode);
        var currentRootPath = currentRootNode.name();
        var pathFromCurrentRoot = { fullPath: currentRootPath, path: '', id: currentRootPath, pathParts: [currentRootPath] };
        this._mapJsonSchema(this._rootItems()[0].data, pathFromCurrentRoot);
        var selectedRootElementPath = this._selectedRootElement().pathParts.slice(1).join('.');
        this._dataSource.rootElement(selectedRootElementPath);
        var serialized = new serializer_1.ModelSerializer().serialize(this._dataSource);
        return $.Deferred().resolve({
            connectionName: this._dataSource.connectionName(),
            dataSourceName: serialized['@Name'],
            jsonScheme: JSON.stringify(serialized.Schema),
            rootElement: serialized['@RootElement']
        }).promise();
    };
    ChooseJsonSchemaPage.prototype.initialize = function (state) {
        return this._beginInternal(state);
    };
    ChooseJsonSchemaPage.prototype.reset = function () {
        this._clear();
    };
    return ChooseJsonSchemaPage;
}(wizardPage_1.WizardPageBase));
exports.ChooseJsonSchemaPage = ChooseJsonSchemaPage;
function _registerChooseJsonSchemaPage(factory, requestWrapper, callbacks) {
    factory.registerMetadata(pageId_1.JsonDataSourceWizardPageId.ChooseJsonSchemaPage, {
        setState: function (data, state) {
            state.dataSourceName = data.dataSourceName;
            state.jsonScheme = data.jsonScheme;
            state.rootElement = data.rootElement;
        },
        getState: function (state) {
            return state.jsonDataSourceWizard;
        },
        resetState: function (state, defaultState) {
            state.dataSourceName = defaultState.dataSourceName;
            state.jsonScheme = defaultState.jsonScheme;
            state.rootElement = defaultState.rootElement;
        },
        create: function () {
            return new ChooseJsonSchemaPage(requestWrapper, undefined, callbacks);
        },
        description: localization_utils_1.getLocalization('Select data fields.', 'DataAccessUIStringId.WizardPageChooseJsonSchema'),
        template: 'dxrd-jsondatasource-fields-page'
    });
}
exports._registerChooseJsonSchemaPage = _registerChooseJsonSchemaPage;
