/**
* DevExpress Analytics (query-builder\wizard\pages\chooseSqlConnectionPage.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var wizardPage_1 = require("./wizardPage");
var _arrayutils_1 = require("../../../core/utils/_arrayutils");
var pageId_1 = require("../pageId");
var _localization_1 = require("../../../property-grid/localization/_localization");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var ChooseSqlConnectionPage = (function (_super) {
    __extends(ChooseSqlConnectionPage, _super);
    function ChooseSqlConnectionPage(connectionStrings) {
        var _this = _super.call(this) || this;
        _this._connectionStrings = ko.observableArray([]);
        _this._selectedConnectionString = ko.observableArray([]);
        _this._connectionStrings = connectionStrings;
        _this._disposables.push(_this._selectedConnectionString.subscribe(function () { return _this._onChange(); }));
        return _this;
    }
    ChooseSqlConnectionPage.prototype.initialize = function (state) {
        var connectionStrings = this._connectionStrings();
        if (connectionStrings.length === 1) {
            this._selectedConnectionString([connectionStrings[0]]);
        }
        else {
            var selectedString = _arrayutils_1.getFirstItemByPropertyValue(connectionStrings, 'name', state.name) || connectionStrings[0];
            this._selectedConnectionString(selectedString ? [selectedString] : []);
        }
        return $.Deferred().resolve().promise();
    };
    ChooseSqlConnectionPage.prototype.canNext = function () {
        return this._selectedConnectionString().length !== 0;
    };
    ChooseSqlConnectionPage.prototype.commit = function () {
        var deferred = $.Deferred();
        if (this._selectedConnectionString()[0]) {
            deferred.resolve({
                name: this._selectedConnectionString()[0].name
            });
        }
        else {
            deferred.resolve();
        }
        return deferred.promise();
    };
    return ChooseSqlConnectionPage;
}(wizardPage_1.WizardPageBase));
exports.ChooseSqlConnectionPage = ChooseSqlConnectionPage;
function _registerChooseSqlConnectionPage(factory, connectionStrings) {
    factory.registerMetadata(pageId_1.SqlDataSourceWizardPageId.ChooseConnectionPage, {
        create: function () {
            return new ChooseSqlConnectionPage(connectionStrings);
        },
        setState: function (data, state) {
            state.name = data.name;
        },
        getState: function (state) {
            return state.sqlDataSourceWizard;
        },
        resetState: function (state, defaultState) {
            state.name = defaultState.name;
        },
        template: 'dxrd-page-connectionstring',
        description: _localization_1.isCustomizedWithUpdateLocalizationMethod('Choose a data connection') || localization_utils_1.getLocalization('Choose a data connection.', 'AnalyticsCoreStringId.SqlDSWizard_PageChooseConnection')
    });
}
exports._registerChooseSqlConnectionPage = _registerChooseSqlConnectionPage;
