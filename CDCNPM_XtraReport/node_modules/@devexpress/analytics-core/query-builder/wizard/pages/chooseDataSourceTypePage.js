/**
* DevExpress Analytics (query-builder\wizard\pages\chooseDataSourceTypePage.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var wizardPage_1 = require("./wizardPage");
var wizard_1 = require("../wizard");
var _arrayutils_1 = require("../../../core/utils/_arrayutils");
var pageId_1 = require("../pageId");
var DataSourceType;
(function (DataSourceType) {
    DataSourceType[DataSourceType["NoData"] = 0] = "NoData";
    DataSourceType[DataSourceType["Sql"] = 1] = "Sql";
    DataSourceType[DataSourceType["Json"] = 2] = "Json";
    DataSourceType[DataSourceType["Object"] = 3] = "Object";
})(DataSourceType = exports.DataSourceType || (exports.DataSourceType = {}));
var TypeItem = (function () {
    function TypeItem(textDefault, textID, imageClassName, imageTemplateName, type) {
        this.text = localization_utils_1.getLocalization(textDefault, textID);
        this.imageClassName = imageClassName;
        this.imageTemplateName = imageTemplateName;
        this.type = type;
    }
    return TypeItem;
}());
exports.TypeItem = TypeItem;
var ChooseDataSourceTypePage = (function (_super) {
    __extends(ChooseDataSourceTypePage, _super);
    function ChooseDataSourceTypePage(_dataSourceTypeOptions) {
        var _this = _super.call(this) || this;
        _this._dataSourceTypeOptions = _dataSourceTypeOptions;
        _this._itemClick = function (item) {
            _this.selectedItem(item);
        };
        _this._IsSelected = function (item) {
            return _this.selectedItem().type === item.type;
        };
        _this.selectedItem = ko.observable();
        _this.typeItems = _this._createTypeItems();
        _this._disposables.push(_this.selectedItem.subscribe(function () { return _this._onChange(); }));
        _this._extendCssClass = $.noop;
        return _this;
    }
    ChooseDataSourceTypePage.prototype.canNext = function () {
        return this.selectedItem() != null;
    };
    ChooseDataSourceTypePage.prototype.canFinish = function () {
        return false;
    };
    ChooseDataSourceTypePage.prototype._goToNextPage = function () {
        this[wizard_1.BaseWizard.__nextActionFunctionName] && this[wizard_1.BaseWizard.__nextActionFunctionName]();
    };
    ChooseDataSourceTypePage.prototype.commit = function () {
        return $.Deferred().resolve({ dataSourceType: this.selectedItem().type }).promise();
    };
    ChooseDataSourceTypePage.prototype._createTypeItems = function () {
        var typeItems = [];
        if (this._dataSourceTypeOptions.sqlDataSourceAvailable) {
            typeItems.push(new TypeItem('Database', 'DataAccessUIStringId.DSTypeSql', 'sqldatasource', 'dxrd-svg-wizard-SqlDataSource', DataSourceType.Sql));
        }
        if (this._dataSourceTypeOptions.jsonDataSourceAvailable) {
            typeItems.push(new TypeItem('JSON', 'DataAccessUIStringId.DSTypeJson', 'jsondatasource', 'dxrd-svg-wizard-JsonDataSource', DataSourceType.Json));
        }
        if (this._dataSourceTypeOptions.objectDataSourceAvailable) {
            typeItems.push(new TypeItem('Object', 'DataAccessUIStringId.DSTypeObject', 'objectdatasource', 'dxrd-svg-wizard-ObjectDataSource', DataSourceType.Object));
        }
        return typeItems;
    };
    ChooseDataSourceTypePage.prototype.initialize = function (state) {
        if (!this.typeItems || this.typeItems.length === 0) {
            this.selectedItem(null);
        }
        else {
            var type = state.dataSourceType !== undefined ? state.dataSourceType : this.typeItems[0].type;
            this.selectedItem(_arrayutils_1.findFirstItemMatchesCondition(this.typeItems, function (item) { return item.type === type; }));
        }
        return $.Deferred().resolve().promise();
    };
    return ChooseDataSourceTypePage;
}(wizardPage_1.WizardPageBase));
exports.ChooseDataSourceTypePage = ChooseDataSourceTypePage;
function _registerChooseDataSourceTypePage(factory, dataSourceTypeOptions) {
    factory.registerMetadata(pageId_1.DataSourceWizardPageId.ChooseDataSourceTypePage, {
        setState: function (data, state) {
            state.dataSourceType = data.dataSourceType;
        },
        getState: function (state) {
            return state;
        },
        resetState: function (state, defaultState) {
            state.dataSourceType = defaultState.dataSourceType;
        },
        create: function () {
            return new ChooseDataSourceTypePage(dataSourceTypeOptions);
        },
        description: localization_utils_1.getLocalization('Select the data source type.', 'DataAccessUIStringId.WizardPageChooseDSType'),
        template: 'dxrd-page-choose-datasource-type'
    });
}
exports._registerChooseDataSourceTypePage = _registerChooseDataSourceTypePage;
