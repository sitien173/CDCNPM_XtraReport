/**
* DevExpress Analytics (query-builder\wizard\pages\sqlDataSourceWizard\configureParametersPage.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var wizardPage_1 = require("../wizardPage");
var dataSourceWizardState_1 = require("../../dataSourceWizardState");
var configureQueryPage_1 = require("./configureQueryPage");
var dataSourceParameter_1 = require("../../../dataSource/dataSourceParameter");
var _getNameHelpers_1 = require("../../../../core/internal/_getNameHelpers");
var editorsInfo_1 = require("../../../../property-grid/widgets/editorsInfo");
var utils_1 = require("../../../dataSource/utils");
var localization_utils_1 = require("../../../../property-grid/localization/localization_utils");
var pageId_1 = require("../../pageId");
var ConfigureQueryParametersPage = (function (_super) {
    __extends(ConfigureQueryParametersPage, _super);
    function ConfigureQueryParametersPage(parametersConverter, _requestWrapper) {
        if (parametersConverter === void 0) { parametersConverter = {
            createParameterViewModel: function (parameter) { return parameter; },
            getParameterFromViewModel: function (parameterViewModel) { return parameterViewModel; }
        }; }
        var _this = _super.call(this) || this;
        _this.parametersConverter = parametersConverter;
        _this._requestWrapper = _requestWrapper;
        _this._sqlDataSourceWrapper = new configureQueryPage_1._SqlDataSourceWrapper(undefined, undefined, _this._requestWrapper);
        _this.removeButtonTitle = localization_utils_1.getLocalization('Remove', 'DataAccessUIStringId.Button_Remove');
        _this.parametersEditorOptions = {
            addHandler: function () {
                return _this.parametersConverter.createParameterViewModel(new dataSourceParameter_1.DataSourceParameter({
                    '@Name': _getNameHelpers_1.getUniqueNameForNamedObjectsArray(_this.parametersEditorOptions.values.peek().peek(), 'param'),
                    '@Type': 'System.Int32'
                }));
            },
            values: ko.observable(ko.observableArray([])),
            displayName: 'Parameters',
            level: 0,
            info: ko.observable({
                displayName: 'Parameters', localizationId: 'DevExpress.DataAccess.Sql.SqlQuery.Parameters',
                propertyName: 'parameters',
                modelName: 'Parameter',
                array: true,
                editor: editorsInfo_1.editorTemplates.getEditor('commonCollection'),
                template: '#dxrd-parameter-collection-item'
            }),
            editorTemplate: '#dxrd-wizard-datasource-parameters',
            hideButtons: ko.observable(false),
            collapsed: false
        };
        return _this;
    }
    ConfigureQueryParametersPage.prototype._isParametersValid = function () {
        return this.getParameters().every(function (x) { return x.isValid(); });
    };
    ConfigureQueryParametersPage.prototype.canNext = function () {
        return false;
    };
    ConfigureQueryParametersPage.prototype.canFinish = function () {
        return this._isParametersValid();
    };
    ConfigureQueryParametersPage.prototype.getParameters = function () {
        return this.parametersEditorOptions.values()();
    };
    ConfigureQueryParametersPage.prototype.initialize = function (data) {
        var _this = this;
        this._sqlDataSourceWrapper = dataSourceWizardState_1._restoreSqlDataSourceFromState(data, this._requestWrapper);
        this.parametersEditorOptions.hideButtons(this._sqlDataSourceWrapper.sqlQuery.type() === utils_1.SqlQueryType.storedProcQuery);
        setTimeout(function () {
            _this.parametersEditorOptions.values(ko.observableArray(_this._sqlDataSourceWrapper.sqlQuery.parameters().map(function (item) { return _this.parametersConverter.createParameterViewModel(item); })));
        }, 100);
        return $.Deferred().resolve().promise();
    };
    ConfigureQueryParametersPage.prototype.commit = function () {
        var _this = this;
        this._sqlDataSourceWrapper.sqlQuery.parameters(this.parametersEditorOptions.values()().map(function (item) { return _this.parametersConverter.getParameterFromViewModel(item); }));
        return $.Deferred().resolve({
            sqlDataSourceJSON: this._sqlDataSourceWrapper.save()
        }).promise();
    };
    return ConfigureQueryParametersPage;
}(wizardPage_1.WizardPageBase));
exports.ConfigureQueryParametersPage = ConfigureQueryParametersPage;
function _registerConfigureParametersPage(factory, requestWrapper, parametersConverter) {
    factory.registerMetadata(pageId_1.SqlDataSourceWizardPageId.ConfigureParametersPage, {
        create: function () { return new ConfigureQueryParametersPage(parametersConverter, requestWrapper); },
        getState: function (state) { return state.sqlDataSourceWizard; },
        setState: function (result, state) { return state.sqlDataSourceJSON = result.sqlDataSourceJSON; },
        resetState: function () { return void 0; },
        template: 'dxrd-page-configure-parameters',
        description: localization_utils_1.getLocalization('Configure query parameters.', 'AnalyticsCoreStringId.SqlDSWizard_PageConfigureParameters')
    });
}
exports._registerConfigureParametersPage = _registerConfigureParametersPage;
