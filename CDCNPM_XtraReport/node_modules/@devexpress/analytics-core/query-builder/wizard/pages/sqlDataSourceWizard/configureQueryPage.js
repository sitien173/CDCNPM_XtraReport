/**
* DevExpress Analytics (query-builder\wizard\pages\sqlDataSourceWizard\configureQueryPage.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var sqlDataSource_1 = require("../../../dataSource/sql/sqlDataSource");
var utils_1 = require("../../../dataSource/utils");
var serializer_1 = require("../../../../serializer/serializer");
var wizardPage_1 = require("../wizardPage");
var dataSourceWizardState_1 = require("../../dataSourceWizardState");
var _storedProceduresQueryControl_1 = require("../../internal/_storedProceduresQueryControl");
var _selectStatementQueryControl_1 = require("../../internal/_selectStatementQueryControl");
var _utils_1 = require("../../../../property-grid/widgets/internal/_utils");
var localization_utils_1 = require("../../../../property-grid/localization/localization_utils");
var _selectQuerySqlTextProvider_1 = require("../../internal/_selectQuerySqlTextProvider");
var _requestwrapper_1 = require("../../../utils/_requestwrapper");
var wizard_1 = require("../../wizard");
var _queryBuilderPopup_1 = require("../../internal/_queryBuilderPopup");
var tableQuery_1 = require("../../../dataSource/sql/tableQuery");
var storedProcQuery_1 = require("../../../dataSource/sql/storedProcQuery");
var customSqlQuery_1 = require("../../../dataSource/sql/customSqlQuery");
var _utils_2 = require("../../../dataSource/_utils");
var pageId_1 = require("../../pageId");
var _localization_1 = require("../../../../property-grid/localization/_localization");
var _localizationStringIds_1 = require("../../../../property-grid/localization/_localizationStringIds");
var _SqlDataSourceWrapper = (function () {
    function _SqlDataSourceWrapper(sqlDataSourceJSON, queryName, requestWrapper) {
        var _this = this;
        this.sqlDataSourceJSON = sqlDataSourceJSON;
        this.customQueries = [];
        this.sqlDataSource = new sqlDataSource_1.SqlDataSource(sqlDataSourceJSON ? JSON.parse(sqlDataSourceJSON) : {}, undefined, requestWrapper);
        if (queryName) {
            this.sqlDataSource.queries().some(function (value, index) {
                if (value.name() === queryName) {
                    _this._queryIndex = index;
                    return true;
                }
                return false;
            });
        }
        else {
            this._queryIndex = this.sqlDataSource.queries().length;
        }
    }
    Object.defineProperty(_SqlDataSourceWrapper.prototype, "sqlQuery", {
        get: function () {
            return this.sqlDataSource.queries()[this._queryIndex];
        },
        set: function (val) {
            if (val)
                val.parent = this.sqlDataSource;
            this.sqlDataSource.queries()[this._queryIndex] = val;
        },
        enumerable: true,
        configurable: true
    });
    _SqlDataSourceWrapper.prototype.saveCustomQueries = function () {
        var serializer = new serializer_1.ModelSerializer();
        return this.customQueries.length > 0 && this.customQueries.map(function (x) { return JSON.stringify(serializer.serialize(x)); });
    };
    _SqlDataSourceWrapper.prototype.save = function () {
        return JSON.stringify(new serializer_1.ModelSerializer().serialize(this.sqlDataSource));
    };
    return _SqlDataSourceWrapper;
}());
exports._SqlDataSourceWrapper = _SqlDataSourceWrapper;
var ConfigureQueryPage = (function (_super) {
    __extends(ConfigureQueryPage, _super);
    function ConfigureQueryPage(_options) {
        var _this = _super.call(this) || this;
        _this._options = _options;
        _this._connection = function () {
            return _this._dataSource().connection;
        };
        _this._dataSource = function () {
            return _this._dataSourceWrapper && _this._dataSourceWrapper.sqlDataSource;
        };
        _this.queryNameCaption = function () { return localization_utils_1.getLocalization('Query Name', 'AnalyticsCoreStringId.SqlDSWizard_QueryName') + ':'; };
        _this.queryControl = ko.observable();
        _this.runQueryBuilderBtnText = ko.pureComputed(function () {
            return (!_this._selectStatementControl.sqlString() || _this._selectStatementControl.getQuery().type() === utils_1.SqlQueryType.tableQuery) ?
                localization_utils_1.getLocalization('Run Query Builder...', 'DataAccessUIStringId.Button_QueryBuilder') :
                localization_utils_1.getLocalization('Create New Query...', 'AnalyticsCoreStringId.SqlDSWizard_CreateNewQuery');
        }).extend({ deferred: true });
        _this.placeholder = function () {
            var queryControl = _this.queryControl();
            var query = queryControl && queryControl.getQuery();
            var queryName = _this.initialName || (query && query.generateName());
            return queryName ? _utils_1.formatUnicorn(localization_utils_1.getLocalization('Type custom query name (current name: {0})', 'AnalyticsCoreStringId.SqlDSWizard_QueryNamePlaceholder'), queryName) : queryName;
        };
        _this.queryName = ko.observable('');
        _this.queryTypeItems = [ConfigureQueryPage.QUERY_TEXT, ConfigureQueryPage.SP_TEXT];
        _this.selectedQueryType = ko.observable();
        _this.initialName = '';
        _this._proceduresList = new _storedProceduresQueryControl_1.StoredProceduresQueryControl();
        _this._disposables.push(_this._selectStatementControl = new _selectStatementQueryControl_1.SelectStatementQueryControl(new _selectQuerySqlTextProvider_1.SelectQuerySqlTextProvider(_requestwrapper_1.wrapGetSelectStatement(_this._options.callbacks.selectStatement), _this._connection), _this._options.disableCustomSql));
        _this._disposables.push(_this.selectedQueryType.subscribe(function (value) {
            if (value === ConfigureQueryPage.SP_TEXT) {
                _this[wizard_1.BaseWizard.__loadingStateFunctionName] && _this[wizard_1.BaseWizard.__loadingStateFunctionName](true);
                _this._dataSource().dbSchemaProvider.getDbStoredProcedures().done(function (procedures) {
                    _this._proceduresList.storedProcedures([]);
                    _this._proceduresList.storedProcedures(procedures);
                }).always(function (x) { return _this[wizard_1.BaseWizard.__loadingStateFunctionName] && _this[wizard_1.BaseWizard.__loadingStateFunctionName](false); });
                _this.queryControl(_this._proceduresList);
            }
            else {
                _this.queryControl(_this._selectStatementControl);
            }
        }));
        _this.selectedQueryType(ConfigureQueryPage.QUERY_TEXT);
        _this.popupQueryBuilder = new _queryBuilderPopup_1.QueryBuilderPopup(function (newQuery, isInProcess) {
            _this.queryName(newQuery.name() || newQuery.generateName());
            return _this._selectStatementControl.setQuery(newQuery, isInProcess);
        }, _this._options.rtl, _this._options.callbacks.customizeQBInitData);
        return _this;
    }
    ConfigureQueryPage.prototype.canNext = function () {
        return !this.queryControl().isNextDisabled();
    };
    ConfigureQueryPage.prototype.canFinish = function () {
        return !this.queryControl().isFinishDisabled() || !this.queryControl().isNextDisabled();
    };
    ConfigureQueryPage.prototype.runQueryBuilder = function () {
        var query = this.queryControl().getQuery();
        if (query && query.type() === utils_1.SqlQueryType.tableQuery) {
            query.name(this.queryName());
            this.popupQueryBuilder.show(query, this._dataSource());
        }
        else {
            this.popupQueryBuilder.show(new tableQuery_1.TableQuery({ '@Name': this.queryName() }, this._dataSource()), this._dataSource());
        }
    };
    ConfigureQueryPage.prototype.localizeQueryType = function (queryTypeString) {
        return ConfigureQueryPage.QUERY_TEXT === queryTypeString ?
            localization_utils_1.getLocalization(ConfigureQueryPage.QUERY_TEXT, 'DataAccessUIStringId.WizardPageConfigureQuery_Query') :
            localization_utils_1.getLocalization(ConfigureQueryPage.SP_TEXT, 'DataAccessUIStringId.WizardPageConfigureQuery_StoredProcedure');
    };
    ConfigureQueryPage.prototype.initialize = function (state) {
        this._dataSourceWrapper = dataSourceWizardState_1._restoreSqlDataSourceFromState(state, this._options.requestWrapper);
        this._proceduresList.setQuery(new storedProcQuery_1.StoredProcQuery({}, this._dataSource()));
        this._selectStatementControl.setQuery(new customSqlQuery_1.CustomSqlQuery({}, this._dataSource()));
        this.popupQueryBuilder.isVisible(false);
        if (this._dataSourceWrapper.sqlQuery) {
            this.initialName = this._dataSourceWrapper.sqlQuery.name();
            this.queryName(this.initialName);
            this.selectedQueryType(this._dataSourceWrapper.sqlQuery.type() === utils_1.SqlQueryType.storedProcQuery ? ConfigureQueryPage.SP_TEXT : ConfigureQueryPage.QUERY_TEXT);
            return this.queryControl().setQuery(this._dataSourceWrapper.sqlQuery);
        }
        else {
            this.selectedQueryType(ConfigureQueryPage.QUERY_TEXT);
        }
        return $.Deferred().resolve().promise();
    };
    ConfigureQueryPage.prototype.commit = function () {
        var query = this.queryControl().getQuery();
        if (query) {
            var newQueryName = this.queryName() || this.initialName;
            newQueryName && query.name(newQueryName);
            if (!query.name() || !this._dataSourceWrapper.sqlQuery || this._dataSourceWrapper.sqlQuery.name() !== query.name())
                query.name(_utils_2.generateQueryUniqueName(this._dataSource().queries(), query));
            this._dataSourceWrapper.sqlQuery = query;
        }
        return $.Deferred().resolve({
            queryName: this._dataSourceWrapper.sqlQuery.name(),
            sqlDataSourceJSON: this._dataSourceWrapper.save()
        }).promise();
    };
    ConfigureQueryPage.QUERY_TEXT = 'Query';
    ConfigureQueryPage.SP_TEXT = 'Stored Procedure';
    return ConfigureQueryPage;
}(wizardPage_1.WizardPageBase));
exports.ConfigureQueryPage = ConfigureQueryPage;
function _registerConfigureQueryPage(factory, dataSourceWizardOptions) {
    factory.registerMetadata(pageId_1.SqlDataSourceWizardPageId.ConfigureQueryPage, {
        create: function () {
            return new ConfigureQueryPage(dataSourceWizardOptions);
        },
        setState: function (data, state) {
            state.queryName = data.queryName;
            state.sqlDataSourceJSON = data.sqlDataSourceJSON;
        },
        getState: function (state) {
            return state.sqlDataSourceWizard;
        },
        resetState: function (state, defaultState) {
            state.sqlDataSourceJSON = defaultState.sqlDataSourceJSON;
            state.queryName = defaultState.queryName;
        },
        template: 'dxrd-wizard-create-query-page',
        description: _localization_1.isCustomizedWithUpdateLocalizationMethod('Create a query or select a stored procedure') || localization_utils_1.getLocalization('Create a query or select a stored procedure.', _localizationStringIds_1.StringId.WizardPageConfigureQuery)
    });
}
exports._registerConfigureQueryPage = _registerConfigureQueryPage;
