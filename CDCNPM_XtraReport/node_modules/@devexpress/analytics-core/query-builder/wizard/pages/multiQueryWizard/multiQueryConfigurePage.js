/**
* DevExpress Analytics (query-builder\wizard\pages\multiQueryWizard\multiQueryConfigurePage.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var wizardPage_1 = require("../wizardPage");
var dataSourceWizardState_1 = require("../../dataSourceWizardState");
var _utils_1 = require("../../internal/_utils");
var _dbSchemaItemsProvider_1 = require("../../internal/_dbSchemaItemsProvider");
var tableQuery_1 = require("../../../dataSource/sql/tableQuery");
var utils_1 = require("../../../dataSource/utils");
var _selectQuerySqlTextProvider_1 = require("../../internal/_selectQuerySqlTextProvider");
var configureQueryPage_1 = require("../sqlDataSourceWizard/configureQueryPage");
var pathRequest_1 = require("../../../../widgets/common/pathRequest");
var storedProcQuery_1 = require("../../../dataSource/sql/storedProcQuery");
var dataSourceParameter_1 = require("../../../dataSource/dataSourceParameter");
var dbColumn_1 = require("../../../dataSource/dbColumn");
var dataSourceParameterMeta_1 = require("../../../dataSource/dataSourceParameterMeta");
var _arrayutils_1 = require("../../../../core/utils/_arrayutils");
var _utils_2 = require("../../../dataSource/_utils");
var _requestwrapper_1 = require("../../../utils/_requestwrapper");
var _queryBuilderPopup_1 = require("../../internal/_queryBuilderPopup");
var wizard_1 = require("../../wizard");
var popupWizard_1 = require("../../popupWizard");
var customSqlQuery_1 = require("../../../dataSource/sql/customSqlQuery");
var serializer_1 = require("../../../../serializer/serializer");
var _dbSchemaTreeListController_1 = require("../../internal/_dbSchemaTreeListController");
var localization_utils_1 = require("../../../../property-grid/localization/localization_utils");
var _options_1 = require("../../../widgets/ace/_options");
var pageId_1 = require("../../pageId");
var _ace_available_1 = require("../../../../widgets/ace/_ace-available");
var MultiQueryConfigurePage = (function (_super) {
    __extends(MultiQueryConfigurePage, _super);
    function MultiQueryConfigurePage(_options) {
        var _this = _super.call(this) || this;
        _this._options = _options;
        _this._selectedPath = ko.observable(null);
        _this._itemsProvider = ko.observable();
        _this._customQueries = ko.observableArray([]);
        _this._checkedQueries = ko.observableArray([]);
        _this._sqlDataSourceWrapper = new configureQueryPage_1._SqlDataSourceWrapper(undefined, undefined, undefined);
        _this._dataSource = function () {
            return _this._sqlDataSourceWrapper && _this._sqlDataSourceWrapper.sqlDataSource;
        };
        _this._dataConnection = function () {
            return _this._dataSource() && _this._dataSource().connection;
        };
        _this._showStatementPopup = function (query) {
            _this._popupSelectStatement.isVisible(true);
            _this._popupSelectStatement.query = query;
            _this._popupSelectStatement.data(query.sqlString());
        };
        _this._showQbCallBack = function (name, isCustomQuery) {
            if (name === void 0) { name = null; }
            if (isCustomQuery === void 0) { isCustomQuery = false; }
            if (name !== null) {
                var query = _arrayutils_1.findFirstItemMatchesCondition(_this._customQueries(), function (item) { return name === (item.name() || item.generateName()); });
                if (query.type() === utils_1.SqlQueryType.customSqlQuery) {
                    _this._queryEditIndex(_this._customQueries().indexOf(query));
                    _this._showStatementPopup(query);
                }
                else {
                    _this._queryEditIndex(_this._customQueries().indexOf(query));
                    _this._popupQueryBuilder.show(query, _this._dataSource());
                }
            }
            else {
                _this._queryEditIndex(-1);
                if (isCustomQuery) {
                    _this._showStatementPopup(new customSqlQuery_1.CustomSqlQuery({ '@Name': null }, _this._dataSource()));
                }
                else {
                    var queryNew = new tableQuery_1.TableQuery({ '@Name': null }, _this._dataSource());
                    _this._popupQueryBuilder.show(queryNew, _this._dataSource());
                }
            }
        };
        _this._popupSelectStatement = ({
            isVisible: ko.observable(false),
            title: function () { return localization_utils_1.getLocalization('Custom SQL Editor', 'AnalyticsCoreStringId.SqlDSWizard_CustomSqlEditor'); },
            query: null,
            data: ko.observable(),
            okButtonText: function () { return localization_utils_1.getLocalization('OK', 'DataAccessUIStringId.Button_OK'); },
            okButtonHandler: function (e) {
                _this._popupSelectStatement.query.sqlString(e.model.data());
                _this._setCustomSqlQuery(_this._popupSelectStatement.query);
                e.model.isVisible(false);
            },
            aceOptions: _options_1.createDefaultSQLAceOptions(),
            aceAvailable: _ace_available_1.aceAvailable(),
            additionalOptions: _options_1.createDefaultSQLAdditionalOptions(function (newVal) { _this._popupSelectStatement.data(newVal); }),
            languageHelper: _options_1.createDefaultSQLLanguageHelper(),
            closest: function (element, parentSelector) {
                return $(element).closest(parentSelector);
            }
        });
        _this._customResetOptions = $.noop;
        _this._queryEditIndex = ko.observable(-1);
        _this.disableCustomSql = true;
        _this._scrollViewHeight = 'calc(100% - 36px)';
        _this._customizeDBSchemaTreeListActions = null;
        _this._isDataLoadingInProcess = ko.observable(false);
        _this._callbacks = _this._options.callbacks;
        _this._sqlTextProvider = new _selectQuerySqlTextProvider_1.SelectQuerySqlTextProvider(_requestwrapper_1.wrapGetSelectStatement(_this._callbacks.selectStatement), _this._dataConnection);
        _this._popupQueryBuilder = new _queryBuilderPopup_1.QueryBuilderPopup(function (newQuery, isInProcess) { return _this._setTableQuery(newQuery, isInProcess); }, _options.rtl, _options.callbacks.customizeQBInitData);
        _this._fieldListModel = ko.observable(null);
        _this._disposables.push(_this._hasParametersToEdit = ko.pureComputed(function () { return _this._itemsProvider().hasParametersToEdit(); }));
        _this._disposables.push(_this._isDataLoadingInProcess.subscribe(function (newVal) {
            if (!newVal)
                _this._onChange();
            _this[wizard_1.BaseWizard.__loadingStateFunctionName] && _this[wizard_1.BaseWizard.__loadingStateFunctionName](newVal);
        }));
        _this.disableCustomSql = _this._options.disableCustomSql;
        _this._getItemsAfterCheck = function (node) {
            _this._resetDataSourceResult();
            _this._isDataLoadingInProcess(true);
            if (node.checked.peek() && node.isList) {
                if (node.name === 'tables' || node.name === 'views') {
                    _this._itemsProvider().getItems(new pathRequest_1.PathRequest(node.name)).done(function () {
                        if (node.isList && node.children.peek().length > 0) {
                            $.when.apply($, node.children.peek().map(function (item) {
                                return _this._getItemsPromise(new pathRequest_1.PathRequest(node.name + '.' + item.name));
                            })).always(function () { return _this._isDataLoadingInProcess(false); });
                        }
                        else {
                            _this._isDataLoadingInProcess(false);
                        }
                    });
                }
                else if (node.specifics === 'table' || node.specifics === 'view') {
                    _this['_itemsProvider']().getItems(new pathRequest_1.PathRequest(node.specifics + '.' + node.name))
                        .always(function () { return _this._isDataLoadingInProcess(false); });
                }
                else if (node.name === 'procedures') {
                    _this['_itemsProvider']().getItems(new pathRequest_1.PathRequest(node.name))
                        .always(function () { return _this._isDataLoadingInProcess(false); });
                }
                else {
                    _this._isDataLoadingInProcess(false);
                }
            }
            else {
                _this._isDataLoadingInProcess(false);
            }
        };
        return _this;
    }
    MultiQueryConfigurePage.prototype._addQueryAlgorithm = function (elements, specifics, dataSource, customQueries) {
        if (!elements.unChecked() || specifics === 'queries') {
            if (elements.children().length === 0) {
                this._itemsProvider().getItems(new pathRequest_1.PathRequest(specifics));
            }
            if (specifics === 'tables' || specifics === 'views') {
                this._addQueryFromTables(elements, dataSource);
            }
            else if (specifics === 'procedures') {
                this._addQueryFromStoredProcedures(elements, dataSource);
            }
            else {
                this._addQueryFromCustomQueries(elements, customQueries, dataSource.queries);
            }
        }
        else {
            elements.children().forEach(function (node) {
                MultiQueryConfigurePage._removeQuery(dataSource.queries, node);
            });
        }
    };
    MultiQueryConfigurePage.prototype._addQueryFromTables = function (elements, dataSource) {
        for (var i = 0; i < elements.children().length; i++) {
            var table = elements.children()[i];
            if (!table.unChecked()) {
                var columns = {};
                var queryJSON = {
                    'Columns': columns,
                    'Tables': {
                        'SelectedTables': {
                            'Item1': {
                                '@Name': table.name,
                                '@ControlType': 'Table',
                                '@ItemType': 'Table'
                            }
                        },
                    }
                };
                if (table.children().length === 0) {
                    this._itemsProvider().getItems(new pathRequest_1.PathRequest('tables.' + table.name)).done(function () {
                        table.initializeChildren(table.children());
                    });
                }
                for (var j = 0; j < table.children().length; j++) {
                    var column = table.children()[j];
                    if (column.checked()) {
                        columns['Item' + (j + 1)] = {
                            '@Table': table.name,
                            '@Name': column.name,
                            '@ItemType': 'Column'
                        };
                    }
                }
                MultiQueryConfigurePage._pushQuery(new tableQuery_1.TableQuery(queryJSON, dataSource), table, dataSource.queries);
            }
            else {
                MultiQueryConfigurePage._removeQuery(dataSource.queries, table);
            }
        }
    };
    MultiQueryConfigurePage.prototype._addQueryFromStoredProcedures = function (elements, dataSource) {
        for (var i = 0; i < elements.children().length; i++) {
            var procedure = elements.children()[i];
            if (procedure.checked()) {
                var newQuery = new storedProcQuery_1.StoredProcQuery({ '@Name': procedure.name, 'ProcName': procedure.name }, dataSource);
                procedure.arguments.forEach(function (arg) {
                    newQuery.parameters.push(new dataSourceParameter_1.DataSourceParameter({ '@Name': arg.name, '@Type': dbColumn_1.DBColumn.GetType(arg.type) }, null, dataSourceParameterMeta_1.storedProcParameterSerializationsInfo(dbColumn_1.DBColumn.GetType(arg.type))));
                });
                MultiQueryConfigurePage._pushQuery(newQuery, procedure, dataSource.queries);
            }
            else {
                MultiQueryConfigurePage._removeQuery(dataSource.queries, procedure);
            }
        }
    };
    MultiQueryConfigurePage.prototype._addQueryFromCustomQueries = function (elements, queries, allQueries) {
        for (var i = 0; i < elements.children().length; i++) {
            var queryNode = elements.children()[i];
            var query = _arrayutils_1.findFirstItemMatchesCondition(queries.peek(), function (item) { return queryNode.name === (item.name() || item.generateName()); });
            if (queryNode.checked()) {
                query.name(_utils_2.generateQueryUniqueName(allQueries.peek(), query));
                this._checkedQueries.push(query);
            }
        }
    };
    MultiQueryConfigurePage.prototype._getItemsPromise = function (pathRequest) {
        return this._itemsProvider().getItems(pathRequest);
    };
    MultiQueryConfigurePage.prototype._resetDataSourceResult = function () {
        this._customResetOptions();
        this._dataSource().relations([]);
        this._dataSource().resultSet = null;
        this._onChange();
    };
    MultiQueryConfigurePage.prototype._setQueryCore = function (query) {
        var provider = this._fieldListModel().itemsProvider;
        var queryEditIndex = this._queryEditIndex();
        if (queryEditIndex >= 0) {
            this._itemsProvider().queries().children()[queryEditIndex].name = query.name();
            provider.customQueries().splice(queryEditIndex, 1, query);
        }
        else {
            query.name(_utils_2.generateQueryUniqueName(provider.customQueries().peek(), query));
            provider.customQueries().push(query);
            this._selectedPath('queries.' + query.name());
            var childrens = this._itemsProvider().queries().children();
            var children = childrens[childrens.length - 1];
            children.setChecked(true);
            children['_afterCheckToggled'] && children['_afterCheckToggled'](children);
        }
        this._resetDataSourceResult();
    };
    MultiQueryConfigurePage._pushQuery = function (newQuery, node, queries) {
        if (!_arrayutils_1.findFirstItemMatchesCondition(queries.peek(), function (item) { return item.name() === (newQuery.name() || newQuery.generateName()); })) {
            newQuery.name(_utils_2.generateQueryUniqueName(queries.peek(), newQuery));
            queries.push(newQuery);
        }
        node.hasQuery = true;
    };
    MultiQueryConfigurePage._removeQuery = function (queries, node) {
        if (node.hasQuery) {
            var queryIndex = -1;
            var existUncheck = queries.peek().some(function (value, index) {
                if (value.name() === node.name || value.generateName() === node.name) {
                    queryIndex = index;
                    return true;
                }
                return false;
            });
            if (existUncheck) {
                queries.splice(queryIndex, 1);
            }
            node.hasQuery = false;
        }
    };
    MultiQueryConfigurePage.prototype.canNext = function () {
        return !this._itemsProvider().nextButtonDisabled() && this.canFinish();
    };
    MultiQueryConfigurePage.prototype.canFinish = function () {
        return this._itemsProvider() && this._itemsProvider().hasCheckedItems() && !this._isDataLoadingInProcess();
    };
    MultiQueryConfigurePage.prototype._AddQueryWithBuilder = function () {
    };
    MultiQueryConfigurePage.prototype._runQueryBuilder = function () {
    };
    MultiQueryConfigurePage.prototype._loadPanelViewModel = function (element) {
        return popupWizard_1.PopupWizard._getLoadPanelViewModel(element, this._isDataLoadingInProcess);
    };
    MultiQueryConfigurePage.prototype._setTableQuery = function (query, isInProcess) {
        var _this = this;
        isInProcess && isInProcess(true);
        return this._sqlTextProvider.getQuerySqlText(query)
            .done(function () { return _this._setQueryCore(query); })
            .always(function () {
            isInProcess && isInProcess(false);
        });
    };
    MultiQueryConfigurePage.prototype._setCustomSqlQuery = function (query) {
        this._setQueryCore(query);
    };
    MultiQueryConfigurePage.prototype._createTreeListFactory = function () {
        return new _utils_1.MultiQueryTreeListItemFactory();
    };
    MultiQueryConfigurePage.prototype.commit = function () {
        var _this = this;
        this._dataSource().queries.removeAll();
        this._checkedQueries.removeAll();
        this._addQueryAlgorithm(this._itemsProvider().tables(), 'tables', this._dataSource());
        this._addQueryAlgorithm(this._itemsProvider().views(), 'views', this._dataSource());
        this._addQueryAlgorithm(this._itemsProvider().procedures(), 'procedures', this._dataSource());
        this._addQueryAlgorithm(this._itemsProvider().queries(), 'queries', this._dataSource(), this._customQueries);
        ko.utils.arrayPushAll(this._dataSource().queries(), this._checkedQueries());
        this._dataSource().queries.valueHasMutated();
        var checkedCustomQueries = this._itemsProvider().queries().children().filter(function (x) { return x.checked(); }).map(function (query) { return query.name; });
        var customQueries = this._sqlDataSourceWrapper.sqlDataSource.queries().filter(function (x) {
            return checkedCustomQueries.some(function (queryName) { return queryName === x.name(); }) || x instanceof storedProcQuery_1.StoredProcQuery;
        });
        customQueries.forEach(function (item) { return _this._sqlDataSourceWrapper.sqlDataSource.queries.remove(item); });
        var serializer = new serializer_1.ModelSerializer();
        return $.Deferred().resolve({
            sqlDataSourceJSON: this._sqlDataSourceWrapper.save(),
            customQueries: customQueries.map(function (x) { return JSON.stringify(serializer.serialize(x)); })
        }).promise();
    };
    MultiQueryConfigurePage.prototype.initialize = function (state) {
        var _this = this;
        this._sqlDataSourceWrapper = dataSourceWizardState_1._restoreSqlDataSourceFromState(state, this._options.requestWrapper);
        var customQueriesPromise = this._callbacks.customQueriesPreset
            ? this._callbacks.customQueriesPreset(this._dataSource())
            : $.Deferred().resolve([]).promise();
        var deferred = $.Deferred();
        customQueriesPromise.done(function (queries) {
            _this._customQueries(queries);
            _this._selectedPath('');
            var itemsProvider = new _dbSchemaItemsProvider_1.DBSchemaItemsProvider(_this._dataSource().dbSchemaProvider, _this._customQueries, _this._showQbCallBack, _this.disableCustomSql, _this._getItemsAfterCheck);
            _this._disposables.push(itemsProvider);
            _this._itemsProvider(itemsProvider);
            _this._getItemsPromise(new pathRequest_1.PathRequest('queries'));
            _this._fieldListModel({
                factory: _this._createTreeListFactory(),
                itemsProvider: _this._itemsProvider(),
                selectedPath: _this._selectedPath,
                treeListController: new _dbSchemaTreeListController_1.DBSchemaTreeListController(_this._customizeDBSchemaTreeListActions),
                templateName: 'dxrd-treelist-with-checkbox'
            });
            _this._popupQueryBuilder.isVisible(false);
            _this._dataSource()
                .dbSchemaProvider.getDbSchema()
                .done(function () {
                deferred.resolve();
            })
                .fail(deferred.reject);
        })
            .fail(deferred.reject);
        return deferred.promise();
    };
    return MultiQueryConfigurePage;
}(wizardPage_1.WizardPageBase));
exports.MultiQueryConfigurePage = MultiQueryConfigurePage;
function _registerMultiQueryConfigurePage(factory, wizardOptions) {
    factory.registerMetadata(pageId_1.SqlDataSourceWizardPageId.MultiQueryConfigurePage, {
        create: function () {
            return new MultiQueryConfigurePage(wizardOptions);
        },
        setState: function (data, state) {
            state.sqlDataSourceJSON = data.sqlDataSourceJSON;
            state.customQueries = data.customQueries;
        },
        getState: function (state) {
            return state.sqlDataSourceWizard;
        },
        resetState: function (state, defaultState) {
            state.sqlDataSourceJSON = defaultState.sqlDataSourceJSON;
            state.customQueries = defaultState.customQueries;
        },
        description: localization_utils_1.getLocalization('Columns selected from specific tables and/or views will be automatically included into a separate query.', 'AnalyticsCoreStringId.SqlDSWizard_PageConfigureMultiQuery'),
        template: 'dxrd-wizard-add-queries-page'
    });
}
exports._registerMultiQueryConfigurePage = _registerMultiQueryConfigurePage;
