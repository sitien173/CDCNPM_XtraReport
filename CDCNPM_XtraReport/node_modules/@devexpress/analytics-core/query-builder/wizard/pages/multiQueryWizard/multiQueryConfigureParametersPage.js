/**
* DevExpress Analytics (query-builder\wizard\pages\multiQueryWizard\multiQueryConfigureParametersPage.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var ko = require("knockout");
var utils_1 = require("../../../dataSource/utils");
var wizardPage_1 = require("../wizardPage");
var dataSourceWizardState_1 = require("../../dataSourceWizardState");
var configureQueryPage_1 = require("../sqlDataSourceWizard/configureQueryPage");
var _configureParametersUtils_1 = require("../../internal/_configureParametersUtils");
var dataSourceParameter_1 = require("../../../dataSource/dataSourceParameter");
var _getNameHelpers_1 = require("../../../../core/internal/_getNameHelpers");
var _utils_1 = require("../../internal/_utils");
var editorsInfo_1 = require("../../../../property-grid/widgets/editorsInfo");
var _arrayutils_1 = require("../../../../core/utils/_arrayutils");
var localization_utils_1 = require("../../../../property-grid/localization/localization_utils");
var pageId_1 = require("../../pageId");
function _canEditQueryParameters(query, customQueries) {
    if (query.type() === utils_1.SqlQueryType.tableQuery || query.type() === utils_1.SqlQueryType.customSqlQuery) {
        return customQueries.indexOf(query) > -1;
    }
    return query.type() === utils_1.SqlQueryType.storedProcQuery && query.parameters().length > 0;
}
exports._canEditQueryParameters = _canEditQueryParameters;
var MultiQueryConfigureParametersPage = (function (_super) {
    __extends(MultiQueryConfigureParametersPage, _super);
    function MultiQueryConfigureParametersPage(parametersConverter, _requestWrapper) {
        if (parametersConverter === void 0) { parametersConverter = {
            createParameterViewModel: function (parameter) { return parameter; },
            getParameterFromViewModel: function (parameterViewModel) { return parameterViewModel; }
        }; }
        var _this = _super.call(this) || this;
        _this.parametersConverter = parametersConverter;
        _this._requestWrapper = _requestWrapper;
        _this._sqlDataSourceWrapper = new configureQueryPage_1._SqlDataSourceWrapper(undefined, undefined, _this._requestWrapper);
        _this._selectedPath = ko.observable(null);
        _this._rootItems = ko.observableArray();
        _this._createNewParameter = function (queryName, parameters) {
            var newParameter = new dataSourceParameter_1.DataSourceParameter({
                '@Name': _getNameHelpers_1.getUniqueNameForNamedObjectsArray(parameters, 'parameter'),
                '@Type': 'System.Int32'
            });
            _this._selectedPath(queryName + '.' + newParameter.name());
            return _this.parametersConverter.createParameterViewModel(newParameter);
        };
        _this._scrollViewHeight = '100%';
        _this._fieldListModel = ko.observable(null);
        _this._removeButtonTitle = localization_utils_1.getLocalization('Remove', 'DataAccessUIStringId.Button_Remove');
        var callback = function () { return _this._onChange(); };
        _this._disposables.push(_utils_1.subscribeArray(_this._rootItems, function (item) {
            _this._disposables.push(_utils_1.subscribeArray(item.parameters, function (parameter) {
                _this._disposables.push(_utils_1.subscribeObject(parameter.dataSourceParameter, function (value) {
                    var _a;
                    (_a = _this._disposables).push.apply(_a, _utils_1.subscribeProperties([value.name, value['value'], value['type']], callback));
                }, callback));
            }, callback));
        }, callback));
        _this._parametersEditorOptions = {
            addHandler: function () {
                return _this.parametersConverter.createParameterViewModel(new dataSourceParameter_1.DataSourceParameter({
                    '@Name': _getNameHelpers_1.getUniqueNameForNamedObjectsArray(_this._parametersEditorOptions.values.peek().peek(), 'param'),
                    '@Type': 'System.Int32'
                }));
            },
            values: ko.observable(ko.observableArray([])),
            displayName: 'Parameters',
            level: 0,
            info: ko.observable({
                displayName: 'Parameters', localizationId: 'DevExpress.DataAccess.Sql.SqlQuery.Parameters',
                propertyName: 'parameters',
                modelName: 'Parameter',
                array: true,
                editor: editorsInfo_1.editorTemplates.getEditor('commonCollection'),
                template: '#dxrd-parameter-collection-item'
            }),
            editorTemplate: '#dxrd-wizard-datasource-parameters',
            hideButtons: ko.observable(false),
            collapsed: false
        };
        return _this;
    }
    MultiQueryConfigureParametersPage.prototype._isParametersValid = function () {
        return this._getParameters().every(function (x) { return x.isValid(); });
    };
    MultiQueryConfigureParametersPage.prototype.canNext = function () {
        return this._isParametersValid() && this._sqlDataSourceWrapper.sqlDataSource.queries().length > 1;
    };
    MultiQueryConfigureParametersPage.prototype.canFinish = function () {
        return this._isParametersValid() && this._sqlDataSourceWrapper.sqlDataSource.queries().length >= 1;
    };
    MultiQueryConfigureParametersPage.prototype._getParameters = function () {
        return [].concat.apply([], (this._rootItems() || []).map(function (x) {
            return x.parameters().map(function (param) {
                return param.dataSourceParameter();
            });
        }));
    };
    MultiQueryConfigureParametersPage.prototype.initialize = function (state) {
        var _this = this;
        var newRootItemsWithParameters = [];
        var rootItems = this._rootItems();
        this._sqlDataSourceWrapper = dataSourceWizardState_1._restoreSqlDataSourceFromState(state, this._requestWrapper);
        this._sqlDataSourceWrapper.sqlDataSource.queries().forEach(function (query) {
            if (_canEditQueryParameters(query, _this._sqlDataSourceWrapper.customQueries)) {
                var parent = new _configureParametersUtils_1.ParametersTreeListRootItem(query);
                parent.parameters(query.parameters().map(function (parameterModel) {
                    return new _configureParametersUtils_1.ParametersTreeListItem(_this.parametersConverter.createParameterViewModel(parameterModel), parent);
                }));
                newRootItemsWithParameters.push(parent);
            }
        });
        rootItems.filter(function (x) { return newRootItemsWithParameters.every(function (newItem) { return newItem.name !== x.name; }); }).forEach(function (removedItem) {
            rootItems.splice(_this._rootItems().indexOf(removedItem), 1);
        });
        newRootItemsWithParameters.forEach(function (newItem) {
            var currentItem = rootItems.filter(function (x) { return x.name === newItem.name; })[0];
            if (currentItem) {
                newItem.parameters().filter(function (newParam) { return currentItem.parameters().every(function (x) { return x.name !== newParam.name; }); }).forEach(function (param) {
                    currentItem.parameters.push(param);
                });
            }
            else {
                rootItems.push(newItem);
            }
        });
        this._rootItems.valueHasMutated();
        this._fieldListModel({
            itemsProvider: {
                getItems: function (pathRequest) {
                    var result = $.Deferred();
                    if (!pathRequest.fullPath) {
                        result.resolve(_this._rootItems());
                    }
                    else {
                        var parent = _arrayutils_1.findFirstItemMatchesCondition(_this._rootItems(), function (item) { return item.name === pathRequest.ref; });
                        result.resolve(parent.parameters());
                    }
                    return result.promise();
                }
            },
            templateName: 'dx-treelist-item-with-hover',
            selectedPath: this._selectedPath,
            treeListController: new _configureParametersUtils_1.ParametersTreeListController(this._rootItems(), this._createNewParameter),
        });
        return $.Deferred().resolve().promise();
    };
    MultiQueryConfigureParametersPage.prototype.commit = function () {
        var _this = this;
        this._rootItems().forEach(function (item) {
            item.query().parameters(item.parameters().map(function (parameterViewModel) {
                return _this.parametersConverter.getParameterFromViewModel(parameterViewModel.dataSourceParameter());
            }));
        });
        return $.Deferred().resolve({
            sqlDataSourceJSON: this._sqlDataSourceWrapper.sqlDataSourceJSON,
            customQueries: this._sqlDataSourceWrapper.saveCustomQueries()
        }).promise();
    };
    return MultiQueryConfigureParametersPage;
}(wizardPage_1.WizardPageBase));
exports.MultiQueryConfigureParametersPage = MultiQueryConfigureParametersPage;
function _registerMultiQueryConfigureParametersPage(factory, requestWrapper, parametersConverter) {
    factory.registerMetadata(pageId_1.SqlDataSourceWizardPageId.MultiQueryConfigureParametersPage, {
        create: function () { return new MultiQueryConfigureParametersPage(parametersConverter, requestWrapper); },
        getState: function (state) { return state.sqlDataSourceWizard; },
        setState: function (result, state) { return state.customQueries = result.customQueries; },
        resetState: function () { return void 0; },
        description: localization_utils_1.getLocalization('Configure query parameters.', 'AnalyticsCoreStringId.SqlDSWizard_PageConfigureParameters'),
        template: 'dxrd-configure-query-parameters-page'
    });
}
exports._registerMultiQueryConfigureParametersPage = _registerMultiQueryConfigureParametersPage;
