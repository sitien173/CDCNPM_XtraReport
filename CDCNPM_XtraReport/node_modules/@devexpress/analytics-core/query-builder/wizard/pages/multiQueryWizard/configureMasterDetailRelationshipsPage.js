/**
* DevExpress Analytics (query-builder\wizard\pages\multiQueryWizard\configureMasterDetailRelationshipsPage.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var wizardPage_1 = require("../wizardPage");
var dataSourceWizardState_1 = require("../../dataSourceWizardState");
var resultSet_1 = require("../../../dataSource/resultSet");
var _utils_1 = require("../../internal/_utils");
var _masterDetailEditor_1 = require("../../../widgets/masterdetaileditor/_masterDetailEditor");
var _infoMessageHelpers_1 = require("../../../../core/utils/_infoMessageHelpers");
var serializer_1 = require("../../../../serializer/serializer");
var pageId_1 = require("../../pageId");
var localization_utils_1 = require("../../../../property-grid/localization/localization_utils");
var ConfigureMasterDetailRelationshipsPage = (function (_super) {
    __extends(ConfigureMasterDetailRelationshipsPage, _super);
    function ConfigureMasterDetailRelationshipsPage(_sqlDataSourceResultSchema) {
        var _this = _super.call(this) || this;
        _this._sqlDataSourceResultSchema = _sqlDataSourceResultSchema;
        _this._relations = ko.observableArray([]);
        _this._customResetOptions = $.noop;
        _this._relationsEditor = ko.observable(null);
        var callback = function () { return _this._onChange(); };
        _this._disposables.push(_utils_1.subscribeArray(_this._relations, function (relation) {
            var _a;
            (_a = relation._disposables).push.apply(_a, _utils_1.subscribeProperties([relation.detailQuery, relation.name, relation.masterQuery], callback));
            relation._disposables.push(_utils_1.subscribeArray(relation.keyColumns, function (column) {
                var _a;
                (_a = relation._disposables).push.apply(_a, _utils_1.subscribeProperties([column.detailColumn, column.masterColumn], callback));
            }, callback));
        }, callback));
        return _this;
    }
    ConfigureMasterDetailRelationshipsPage.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.disposeObservableArray(this._relations);
    };
    ConfigureMasterDetailRelationshipsPage.prototype._updateRelations = function () {
        var _this = this;
        var relations = this._relations();
        relations.forEach(function (relation, index) {
            var detailTable = _this._resultSet.tables().filter(function (table) { return table.tableName() === relation.detailQuery(); })[0];
            var masterTable = _this._resultSet.tables().filter(function (table) { return table.tableName() === relation.masterQuery(); })[0];
            if (!detailTable || !masterTable) {
                relations.splice(index, 1);
                return;
            }
            var keyColumns = relation.keyColumns();
            keyColumns.forEach(function (keyColumn, index) {
                if (detailTable.columns().every(function (x) { return x.name() !== keyColumn.detailColumn(); }) ||
                    masterTable.columns().every(function (x) { return x.name() !== keyColumn.masterColumn(); }))
                    keyColumns.splice(index, 1);
            });
            if (keyColumns.length === 0)
                relations.splice(index, 1);
        });
        this._relations.valueHasMutated();
    };
    ConfigureMasterDetailRelationshipsPage.prototype.canNext = function () {
        return false;
    };
    ConfigureMasterDetailRelationshipsPage.prototype.canFinish = function () {
        return this._relations().every(function (relation) { return relation.keyColumns()
            .every(function (keyColumn) { return !!keyColumn.detailColumn() && !!keyColumn.masterColumn(); }); });
    };
    ConfigureMasterDetailRelationshipsPage.prototype._getResultSet = function (dataSource) {
        var deferred = $.Deferred();
        if (dataSource.resultSet) {
            deferred.resolve((dataSource.resultSet));
        }
        else {
            this._sqlDataSourceResultSchema(dataSource).done((function (result) {
                deferred.resolve(new resultSet_1.ResultSet(JSON.parse(result.resultSchemaJSON)));
            })).fail(function (result) {
                deferred.reject(result);
            });
        }
        return deferred.promise();
    };
    ConfigureMasterDetailRelationshipsPage.prototype.initialize = function (state) {
        var _this = this;
        this.relationsSubscription && this.relationsSubscription.dispose();
        this._sqlDataSourceWrapper = dataSourceWizardState_1._restoreSqlDataSourceFromState(state);
        this._disposables.push(this.relationsSubscription = this._relations.subscribe(function (changes) {
            var isRelationsChanged = changes.some(function (change) {
                return !change['moved'] && change['moved'] !== 0;
            });
            if (isRelationsChanged) {
                _this._customResetOptions();
            }
        }, null, 'arrayChange'));
        return this._getResultSet(this._sqlDataSourceWrapper.sqlDataSource)
            .done(function (result) {
            _this._resultSet = result;
            _this._updateRelations();
            _this._relationsEditor(new _masterDetailEditor_1.MasterDetailEditor(_this._relations, _this._resultSet, $.noop));
        })
            .fail(function (result) {
            if (_infoMessageHelpers_1.getErrorMessage(result))
                _infoMessageHelpers_1.ShowMessage(_infoMessageHelpers_1.getErrorMessage(result));
        });
    };
    ConfigureMasterDetailRelationshipsPage.prototype.commit = function () {
        this.relationsSubscription.dispose();
        this._sqlDataSourceWrapper.sqlDataSource.relations(this._relations());
        this._sqlDataSourceWrapper.sqlDataSource.resultSet = this._resultSet;
        var serializer = new serializer_1.ModelSerializer();
        return $.Deferred().resolve({
            sqlDataSourceJSON: this._sqlDataSourceWrapper.sqlDataSourceJSON,
            customQueries: this._sqlDataSourceWrapper.saveCustomQueries(),
            relations: this._relations().map(function (x) { return JSON.stringify(serializer.serialize(x)); }),
        }).promise();
    };
    return ConfigureMasterDetailRelationshipsPage;
}(wizardPage_1.WizardPageBase));
exports.ConfigureMasterDetailRelationshipsPage = ConfigureMasterDetailRelationshipsPage;
function _registerConfigureMasterDetailRelationshipsPage(factory, sqlDataSourceResultSchema) {
    factory.registerMetadata(pageId_1.DataSourceWizardPageId.ConfigureMasterDetailRelationshipsPage, {
        create: function () {
            return new ConfigureMasterDetailRelationshipsPage(sqlDataSourceResultSchema);
        },
        setState: function (data, state) {
            state.relations = data.relations;
        },
        getState: function (state) {
            return state.sqlDataSourceWizard;
        },
        resetState: function (state, defaultState) {
            state.relations = defaultState.relations;
        },
        description: localization_utils_1.getLocalization('Configure master-detail relationships.', 'AnalyticsCoreStringId.SqlDSWizard_PageConfigureMasterDetailRelations'),
        template: 'dxrd-wizard-configure-relations-page'
    });
}
exports._registerConfigureMasterDetailRelationshipsPage = _registerConfigureMasterDetailRelationshipsPage;
