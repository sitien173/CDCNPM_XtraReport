/**
* DevExpress Analytics (query-builder\wizard\pages\objectDataSourceWizard\chooseObjectDataSourceTypesPage.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var wizardPage_1 = require("../wizardPage");
var requestwrapper_1 = require("../../../utils/requestwrapper");
var _objectSchemaProvider_1 = require("../../internal/objectDataSource/_objectSchemaProvider");
var _chooseObjectTypes_1 = require("../../internal/objectDataSource/_chooseObjectTypes");
var objectDataSource_1 = require("../../../dataSource/object/objectDataSource");
var objectSchema_1 = require("../../../dataSource/object/objectSchema");
var pageId_1 = require("../../pageId");
var localization_utils_1 = require("../../../../property-grid/localization/localization_utils");
var ChooseObjectDataSourceTypesPage = (function (_super) {
    __extends(ChooseObjectDataSourceTypesPage, _super);
    function ChooseObjectDataSourceTypesPage(_requestWrapper) {
        if (_requestWrapper === void 0) { _requestWrapper = new requestwrapper_1.RequestWrapper(); }
        var _this = _super.call(this) || this;
        _this._requestWrapper = _requestWrapper;
        _this._objectDataSource = new objectDataSource_1.ObjectDataSource();
        _this._types = ko.observableArray([]);
        _this._disposables.push(_this._provider = new _objectSchemaProvider_1.ObjectSchemaProvider(_this._requestWrapper), _this._chooseObjectType = new _chooseObjectTypes_1.ChooseObjectTypes(_this._types, _this._provider));
        return _this;
    }
    ChooseObjectDataSourceTypesPage.prototype.canNext = function () {
        return !!this._selectedTypeName;
    };
    ChooseObjectDataSourceTypesPage.prototype.canFinish = function () {
        return false;
    };
    ChooseObjectDataSourceTypesPage.prototype.commit = function () {
        return $.Deferred().resolve({
            selectedType: this._selectedTypeName,
            selectedObjectType: this._chooseObjectType.selectedType(),
            ctor: this._chooseObjectType.selectedCtor()
        }).promise();
    };
    ChooseObjectDataSourceTypesPage.prototype.initialize = function (state) {
        var _this = this;
        this._objectDataSource.setState(state);
        this._provider.getObjectTypeDescriptions(state.context).done(function (schema) {
            schema.types.forEach(function (type) { return type.members.splice(0, 0, objectSchema_1.ObjectDataMember.empty()); });
            _this._types(schema.types || []);
            if (schema.types.length > 0) {
                _this._chooseObjectType.selectedPath(schema.types[0].name);
            }
        });
        return $.Deferred().resolve().promise();
    };
    Object.defineProperty(ChooseObjectDataSourceTypesPage.prototype, "_selectedTypeName", {
        get: function () {
            return !!this._chooseObjectType.selectedType() ? this._chooseObjectType.selectedType().name : null;
        },
        enumerable: true,
        configurable: true
    });
    return ChooseObjectDataSourceTypesPage;
}(wizardPage_1.WizardPageBase));
exports.ChooseObjectDataSourceTypesPage = ChooseObjectDataSourceTypesPage;
function _registerChooseObjectDataSourceTypesPage(factory, dataSourceWizardOptions) {
    factory.registerMetadata(pageId_1.ObjectDataSourceWizardPageId.ChooseTypesPage, {
        setState: function (data, state) {
            state.selectedType = data.selectedType;
            state.selectedObjectType = data.selectedObjectType;
            state.ctor = data.ctor;
        },
        getState: function (state) {
            return state.objectDataSourceWizard;
        },
        resetState: function (state, defaultState) {
            state.selectedType = defaultState.selectedType;
            state.selectedObjectType = defaultState.selectedObjectType;
            state.ctor = defaultState.ctor;
        },
        create: function () {
            return new ChooseObjectDataSourceTypesPage(dataSourceWizardOptions.requestWrapper);
        },
        description: localization_utils_1.getLocalization('Choose the type and its constructor.', 'AnalyticsCoreStringId.ObjectDSWizard_ChooseType_Description'),
        template: 'dxrd-page-objectdatasource-types'
    });
}
exports._registerChooseObjectDataSourceTypesPage = _registerChooseObjectDataSourceTypesPage;
