/**
* DevExpress Analytics (query-builder\widgets\filterEditor\_operandParameterQBSurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var operandParameterSurface_1 = require("../../../widgets/filtereditor/operators/operandParameterSurface");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var parameterModel_1 = require("../../elements/parameterModel");
var OperandParameterQBSurface = (function (_super) {
    __extends(OperandParameterQBSurface, _super);
    function OperandParameterQBSurface(operator, parent, fieldListProvider, path) {
        var _this = _super.call(this, operator, parent, fieldListProvider, path) || this;
        _this.createParameter = function () {
            if (_this.canCreateParameters) {
                _this.model.parameterName = _this.parameterName();
                _this._createParameter(_this.parameterName(), _this._parameterType);
                _this.helper.onChange();
            }
        };
        _this._parameterName = ko.observable('');
        _this.isEditable = ko.observable(false);
        _this.defaultDisplay = OperandParameterQBSurface.defaultDisplay;
        _this._parameterName(ko.unwrap(operator.parameterName));
        _this.canCreateParameters = _this.helper.canCreateParameters;
        _this.fieldsOptions = parent.leftPart.fieldsOptions;
        _this.parameterName = ko.pureComputed({
            read: function () {
                return _this._parameterName() || (_this.canCreateParameters && OperandParameterQBSurface.defaultDisplay() || '');
            },
            write: function (newVal) {
                if (newVal !== OperandParameterQBSurface.defaultDisplay() && newVal) {
                    _this.model.parameterName = ko.unwrap(newVal);
                    _this._parameterName(_this.model.parameterName);
                }
            }
        });
        if (_this.canCreateParameters && !_this.isDefaultTextDisplayed() && !ko.unwrap(_this.fieldListProvider).hasParameter(operator.parameterName)) {
            _this.createParameter();
        }
        return _this;
    }
    Object.defineProperty(OperandParameterQBSurface.prototype, "_parameterType", {
        get: function () {
            return this.fieldsOptions() && this.fieldsOptions().selected() && this.fieldsOptions().selected()['dataType'] || 'System.String';
        },
        enumerable: true,
        configurable: true
    });
    OperandParameterQBSurface.prototype._createParameter = function (name, dataType) {
        if (name !== '' && name !== OperandParameterQBSurface.defaultDisplay() && this.helper.parameters().filter(function (parameter) { return parameter.name() === name; }).length === 0) {
            var parameter = new parameterModel_1.ParameterViewModel({ '@Name': name, '@Type': dataType });
            this.helper.newParameters.push(parameter);
        }
    };
    OperandParameterQBSurface.prototype.isDefaultTextDisplayed = function () {
        return this.parameterName() === OperandParameterQBSurface.defaultDisplay();
    };
    OperandParameterQBSurface.defaultDisplay = function () { return localization_utils_1.getLocalization('Create new parameter', 'AnalyticsCoreStringId.FilterEditor_Operand_CreateNewParameter'); };
    return OperandParameterQBSurface;
}(operandParameterSurface_1.OperandParameterSurface));
exports.OperandParameterQBSurface = OperandParameterQBSurface;
