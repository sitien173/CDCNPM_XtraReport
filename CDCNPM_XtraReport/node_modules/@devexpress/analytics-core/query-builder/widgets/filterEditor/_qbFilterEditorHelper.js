/**
* DevExpress Analytics (query-builder\widgets\filterEditor\_qbFilterEditorHelper.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var helper_1 = require("../../../widgets/filtereditor/helpers/helper");
var _addon_1 = require("../../../widgets/filtereditor/helpers/_addon");
var _operandParameterQBSurface_1 = require("./_operandParameterQBSurface");
var _operandPropertyQBSurface_1 = require("./_operandPropertyQBSurface");
var parameterModelMeta_1 = require("../../elements/parameterModelMeta");
var utils_1 = require("../../../widgets/criteria/utils");
var parameter_1 = require("../../../widgets/criteria/operators/parameter");
var QBFilterEditorHelper = (function (_super) {
    __extends(QBFilterEditorHelper, _super);
    function QBFilterEditorHelper(parametersMode) {
        var _this = _super.call(this) || this;
        _this.handlers.changeParameter = function (criteria, popupService) {
            return {
                data: new _addon_1.FilterEditorAddOn(criteria, popupService, 'changeParameter', 'items', 'dxqb-filtereditor-parameterspopup'),
                templateName: 'dxqb-filtereditor-changeparameter'
            };
        };
        _this.mapper.Parameter = _operandParameterQBSurface_1.OperandParameterQBSurface;
        _this.mapper.Property = _operandPropertyQBSurface_1.OperandPropertyQBSurface;
        if (parametersMode === parameterModelMeta_1.ParametersMode.ReadWrite) {
            _this.canCreateParameters = true;
            _this.newParameters = ko.observableArray([]);
            _this.onEditorFocusOut = function (criteria) {
                if (!criteria)
                    return;
                var parameters = _this.newParameters();
                var usesParameters = [];
                utils_1.criteriaForEach(criteria, function (child) {
                    if (child instanceof parameter_1.OperandParameter) {
                        var parameter = parameters.filter(function (x) { return x.name() === child.parameterName; })[0];
                        if (parameter)
                            usesParameters.push(parameter);
                    }
                });
                if (usesParameters.length === 0) {
                    _this.newParameters.splice(0);
                    return;
                }
                var uselessParameters = parameters.filter(function (x) { return usesParameters.indexOf(x) === -1; });
                for (var i = 0; i < uselessParameters.length; i++) {
                    var parameterIndex = parameters.indexOf(uselessParameters[i]);
                    if (parameterIndex !== -1)
                        parameters.splice(parameterIndex, 1);
                }
                _this.newParameters.valueHasMutated();
            };
            _this.onClosing = function () {
                _this.newParameters([]);
            };
        }
        _this.canSelectLists = false;
        _this.getDisplayPropertyName = function () { return $.Deferred().resolve('').promise(); };
        return _this;
    }
    return QBFilterEditorHelper;
}(helper_1.FilterEditorHelper));
exports.QBFilterEditorHelper = QBFilterEditorHelper;
exports.QBFilterEditorHelperDefault = QBFilterEditorHelper;
function _setQBFilterEditorHelperDefault(helperType) {
    exports.QBFilterEditorHelperDefault = helperType;
}
exports._setQBFilterEditorHelperDefault = _setQBFilterEditorHelperDefault;
