/**
* DevExpress Analytics (query-builder\widgets\filterEditor\_groupFilterEditorSerializer.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _serializer_1 = require("../../../widgets/filtereditor/helpers/_serializer");
var _arrayutils_1 = require("../../../core/utils/_arrayutils");
var _queryBuilderObjectsProvider_1 = require("./_queryBuilderObjectsProvider");
var property_1 = require("../../../widgets/criteria/operators/property");
var criteriaOperator_1 = require("../../../widgets/criteria/operators/criteriaOperator");
var utils_1 = require("../../../widgets/criteria/utils");
var GroupFilterEditorSerializer = (function (_super) {
    __extends(GroupFilterEditorSerializer, _super);
    function GroupFilterEditorSerializer(_columns) {
        var _this = _super.call(this) || this;
        _this._columns = _columns;
        _this._aggregatePropertyName = function (operand) {
            var itemColumnAggregate = _this._findAggregatedColumn(function (c) { return c.actualName() === operand.propertyName; });
            return itemColumnAggregate ? _this._columnDisplayName(itemColumnAggregate) : operand.propertyName;
        };
        return _this;
    }
    GroupFilterEditorSerializer.prototype._columnDisplayName = function (column) {
        return column.table() + '.' + column.actualName();
    };
    GroupFilterEditorSerializer.prototype._findAggregatedColumn = function (predicate) {
        return _arrayutils_1.find(this._columns(), function (c) { return _queryBuilderObjectsProvider_1.isAggregatedExpression(c) && predicate(c); });
    };
    GroupFilterEditorSerializer.prototype.serializeOperandProperty = function (operand) {
        var _this = this;
        var column = this._findAggregatedColumn(function (c) { return operand.propertyName === _this._columnDisplayName(c); });
        return '[' + (column ? column.actualName() : operand.propertyName) + ']';
    };
    GroupFilterEditorSerializer.prototype.deserialize = function (stringCriteria) {
        var _this = this;
        var operand = criteriaOperator_1.CriteriaOperator.parse(stringCriteria);
        if (operand) {
            utils_1.criteriaForEach(operand, function (operator) {
                if (operator instanceof property_1.OperandProperty) {
                    operator['propertyName'] = _this._aggregatePropertyName(operator);
                }
            });
        }
        return _super.prototype.deserializeOperand.call(this, operand);
    };
    return GroupFilterEditorSerializer;
}(_serializer_1.FilterEditorSerializer));
exports.GroupFilterEditorSerializer = GroupFilterEditorSerializer;
