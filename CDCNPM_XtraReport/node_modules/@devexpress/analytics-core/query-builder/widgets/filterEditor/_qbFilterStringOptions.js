/**
* DevExpress Analytics (query-builder\widgets\filterEditor\_qbFilterStringOptions.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var filtereditoroptions_1 = require("../../../widgets/filtereditor/filtereditoroptions");
var _qbFilterEditorHelper_1 = require("./_qbFilterEditorHelper");
var parameterModelMeta_1 = require("../../elements/parameterModelMeta");
var parameter_1 = require("../../../widgets/criteria/operators/parameter");
var QBFilterStringOptions = (function (_super) {
    __extends(QBFilterStringOptions, _super);
    function QBFilterStringOptions(filterString, dataMember, disabled, title) {
        return _super.call(this, filterString, dataMember, disabled, title) || this;
    }
    QBFilterStringOptions.prototype.initializeFilterStringHelper = function (parameters, parametersMode, serializer) {
        var _this = this;
        var helper = new _qbFilterEditorHelper_1.QBFilterEditorHelperDefault(parametersMode);
        helper.canChoiceParameters = parametersMode !== parameterModelMeta_1.ParametersMode.Disabled;
        if (serializer) {
            helper.serializer = serializer;
        }
        if (parametersMode === parameterModelMeta_1.ParametersMode.ReadWrite) {
            helper.parameters = ko.computed(function () { return [].concat(parameters(), helper.newParameters()); });
            helper.onSave = function (operandProperty) {
                var newParameters = helper.newParameters();
                parameters.push.apply(parameters, newParameters);
                helper.newParameters([]);
            };
        }
        else {
            if (parametersMode === parameterModelMeta_1.ParametersMode.Read)
                helper.parameters = parameters;
            var oldCheckRightPart = helper.criteriaTreeValidator._checkRightPart;
            helper.criteriaTreeValidator._checkRightPart = function (criteriaOperator) {
                if (!(criteriaOperator instanceof parameter_1.OperandParameter))
                    return oldCheckRightPart.apply(_this, [criteriaOperator]);
                if (parametersMode === parameterModelMeta_1.ParametersMode.Disabled) {
                    return false;
                }
                else if (parametersMode === parameterModelMeta_1.ParametersMode.Read) {
                    var parameterName = criteriaOperator.parameterName;
                    return parameters.peek().filter(function (x) { return x.name() === parameterName; }).length !== 0;
                }
            };
        }
        this.helper = helper;
    };
    return QBFilterStringOptions;
}(filtereditoroptions_1.FilterStringOptions));
exports.QBFilterStringOptions = QBFilterStringOptions;
