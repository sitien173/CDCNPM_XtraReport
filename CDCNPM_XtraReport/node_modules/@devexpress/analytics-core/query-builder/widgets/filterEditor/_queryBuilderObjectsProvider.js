/**
* DevExpress Analytics (query-builder\widgets\filterEditor\_queryBuilderObjectsProvider.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var columnModelMeta_1 = require("../../elements/columnModelMeta");
var _arrayutils_1 = require("../../../core/utils/_arrayutils");
function isAggregatedExpression(object) {
    return object.aggregate() !== columnModelMeta_1.AggregationType.None;
}
exports.isAggregatedExpression = isAggregatedExpression;
var QueryBuilderObjectsProvider = (function () {
    function QueryBuilderObjectsProvider(query, objectFilter) {
        this.getItems = function (pathRequest) {
            var result = $.Deferred();
            var items = [];
            if (pathRequest.fullPath === '') {
                items = objectFilter.filterTables(query().tables())
                    .map(QueryBuilderObjectsProvider._createTableInfo);
            }
            else {
                var table = _arrayutils_1.findFirstItemMatchesCondition(query().tables(), function (table) { return table.actualName() === pathRequest.fullPath; });
                items = objectFilter.filterColumns(table && table.columns() || [])
                    .map(function (column) { return QueryBuilderObjectsProvider._createColumnInfo(column, objectFilter); });
            }
            result.resolve(items);
            return result.promise();
        };
        this.hasParameter = function (name) {
            return query().parameters().filter(function (parameter) { return parameter.name() === name; }).length > 0;
        };
        this.getColumnInfo = function (propertyName) {
            if (propertyName) {
                var table = _arrayutils_1.find(query().tables(), function (t) { return propertyName.indexOf(t.actualName() + '.') === 0; });
                if (table) {
                    var column = _arrayutils_1.find(objectFilter.filterColumns(table.columns() || []), function (c) { return propertyName === (table.actualName() + '.' + objectFilter.getColumnName(c)); });
                    return column ? QueryBuilderObjectsProvider._createColumnInfo(column, objectFilter) : null;
                }
            }
            return null;
        };
    }
    QueryBuilderObjectsProvider._createTableInfo = function (table) {
        return {
            displayName: table.actualName(),
            name: table.actualName(),
            isList: true,
            specifics: 'Default',
            collapsed: ko.observable(true)
        };
    };
    QueryBuilderObjectsProvider._createColumnInfo = function (column, objectFilter) {
        return {
            displayName: objectFilter.getColumnName(column),
            isList: false,
            specifics: objectFilter.getSpecifics(column),
            dataType: objectFilter.getDataType(column),
            name: objectFilter.getColumnName(column)
        };
    };
    QueryBuilderObjectsProvider.whereClauseObjectsFilter = {
        filterColumns: function (columns) { return columns; },
        filterTables: function (tables) { return tables; },
        getColumnName: function (column) { return column.name.peek(); },
        getSpecifics: function (column) { return column.specifics; },
        getDataType: function (column) { return column.dataType.peek(); }
    };
    QueryBuilderObjectsProvider.groupByObjectsFilter = {
        filterColumns: function (columns) { return columns.filter(isAggregatedExpression); },
        filterTables: function (tables) { return tables.filter(function (table) { return table.columns().some(isAggregatedExpression); }); },
        getColumnName: function (column) { return column.actualName.peek(); },
        getSpecifics: function (column) {
            switch (column.aggregate()) {
                case columnModelMeta_1.AggregationType.Avg:
                case columnModelMeta_1.AggregationType.AvgDistinct:
                    return 'Float';
                case columnModelMeta_1.AggregationType.Count:
                case columnModelMeta_1.AggregationType.CountDistinct:
                    return 'Integer';
                default:
                    return column.specifics;
            }
        },
        getDataType: function (column) { return null; }
    };
    return QueryBuilderObjectsProvider;
}());
exports.QueryBuilderObjectsProvider = QueryBuilderObjectsProvider;
