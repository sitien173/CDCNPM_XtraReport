/**
* DevExpress Analytics (query-builder\widgets\masterdetaileditor\_masterQuerySurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var masterDetailRelation_1 = require("../../dataSource/sql/masterDetailRelation");
var _masterDetailRelationSurface_1 = require("./_masterDetailRelationSurface");
var _arrayutils_1 = require("../../../core/utils/_arrayutils");
var _getNameHelpers_1 = require("../../../core/internal/_getNameHelpers");
var MasterQuerySurface = (function () {
    function MasterQuerySurface(masterQueryName, relations) {
        var _this = this;
        this.relations = ko.observableArray();
        this.queryName = masterQueryName;
        this.add = function (relation) {
            _this.relations.push(new _masterDetailRelationSurface_1.MasterDetailRelationSurface(relation, _this));
        };
        this.create = function (detailQueryItem) {
            var newRelation = new masterDetailRelation_1.MasterDetailRelation({ '@Master': _this.queryName, '@Detail': detailQueryItem.name });
            if (_arrayutils_1.getFirstItemByPropertyValue(_this.relations(), 'relationName', newRelation.name())) {
                newRelation.name(_getNameHelpers_1.getUniqueName(_this.relations().map(function (item) { return item.relationName(); }), newRelation.name() + '_'));
            }
            newRelation.createKeyColumn();
            _this.add(newRelation);
            relations.push(newRelation);
        };
        this.remove = function (relationSurface) {
            _this.relations.remove(relationSurface);
            relations.remove(function (item) { return item.name === relationSurface.relationName; });
        };
    }
    return MasterQuerySurface;
}());
exports.MasterQuerySurface = MasterQuerySurface;
