/**
* DevExpress Analytics (query-builder\widgets\masterdetaileditor\_masterDetailEditor.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var _localizationStringIds_1 = require("../../../property-grid/localization/_localizationStringIds");
var _popupService_1 = require("../../../property-grid/internal/_popupService");
var _infoMessageHelpers_1 = require("../../../core/utils/_infoMessageHelpers");
var _masterDetailEditorPopupManager_1 = require("./_masterDetailEditorPopupManager");
var _arrayutils_1 = require("../../../core/utils/_arrayutils");
var _masterQuerySurface_1 = require("./_masterQuerySurface");
var MasterDetailEditor = (function () {
    function MasterDetailEditor(relations, resultSet, saveCallBack) {
        var _this = this;
        this.isValid = ko.observable(true);
        this.popupVisible = ko.observable(false);
        this.loadPanelVisible = ko.observable(false);
        this.buttonItems = [];
        this.masterQueries = ko.observableArray();
        this.popupService = new _popupService_1.PopupService();
        this.save = function () {
            var emptyFieldsExist = relations().some(function (relation) {
                return !relation.detailQuery() || !relation.masterQuery() ||
                    relation.keyColumns().some(function (column) { return (!column.detailColumn() || !column.masterColumn()); });
            });
            if (emptyFieldsExist) {
                _infoMessageHelpers_1.ShowMessage(localization_utils_1.getLocalization('Some fields are empty. Please fill all empty fields or remove the corresponding conditions to proceed.', 'DataAccessUIStringId.JoinEditorFillAllFieldsException'));
            }
            else {
                saveCallBack().done(function () { _this.popupVisible(false); });
            }
        };
        this.createRelation = function (target) {
            var popupItems = resultSet.tables()
                .filter(function (table) { return table.tableName() !== target.queryName; })
                .map(function (table) { return { name: table.tableName() }; });
            return {
                data: new _masterDetailEditorPopupManager_1.MasterDetailEditorPopupManager(target, _this.popupService, 'create', popupItems),
                templateName: 'dx-filtereditor-create'
            };
        };
        this.setColumn = function (target) {
            var table = _arrayutils_1.getFirstItemByPropertyValue(resultSet.tables(), 'tableName', target.queryName);
            return {
                data: new _masterDetailEditorPopupManager_1.MasterDetailEditorPopupManager(target, _this.popupService, 'setColumn', table ? table.columns() : []),
                templateName: 'dx-masterdetail-editor-setColumn'
            };
        };
        this._createMainPopupButtons();
        var masterQueries = {};
        resultSet.tables().forEach(function (table) {
            masterQueries[table.tableName()] = new _masterQuerySurface_1.MasterQuerySurface(table.tableName(), relations);
        });
        relations().forEach(function (relation) {
            masterQueries[relation.masterQuery()] = masterQueries[relation.masterQuery()] || new _masterQuerySurface_1.MasterQuerySurface(relation.masterQuery(), relations);
            masterQueries[relation.masterQuery()].add(relation);
        });
        this.masterQueries($.map(masterQueries, function (value) { return value; }));
    }
    MasterDetailEditor.prototype._createMainPopupButtons = function () {
        var self = this;
        this.buttonItems = [
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: localization_utils_1.getLocalization('Save', _localizationStringIds_1.StringId.DataAccessBtnOK), onClick: function () { self.save(); } } },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: localization_utils_1.getLocalization('Cancel', _localizationStringIds_1.StringId.DataAccessBtnCancel), onClick: function () { self.popupVisible(false); } } }
        ];
    };
    MasterDetailEditor.prototype.title = function () {
        return localization_utils_1.getLocalization('Master-Detail Relation Editor', _localizationStringIds_1.StringId.MasterDetailRelationsEditor);
    };
    return MasterDetailEditor;
}());
exports.MasterDetailEditor = MasterDetailEditor;
