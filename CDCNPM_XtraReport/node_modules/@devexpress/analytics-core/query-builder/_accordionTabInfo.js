/**
* DevExpress Analytics (query-builder\_accordionTabInfo.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var propertygrid_1 = require("../property-grid/propertygrid");
var tabPanel_1 = require("../core/tools/tabPanel");
var localization_utils_1 = require("../property-grid/localization/localization_utils");
var parameterModel_1 = require("./elements/parameterModel");
var queryModel_1 = require("./elements/queryModel");
var _controlProperties_1 = require("../core/widgets/propertygrid/_controlProperties");
var parametersInfo = { propertyName: 'parameters', displayName: 'parameters', editor: { custom: 'dxqb-parameterspanel' } };
var selectedItemInfo = { propertyName: 'selectedItem', displayName: 'selectedItem', editor: { custom: 'dxqb-propertygrid' } };
var fieldsInfo = { propertyName: 'fields', displayName: 'fields', editor: { custom: 'dxqb-fieldspanel' } };
var queryInfo = { propertyName: 'query', displayName: 'query', editor: { custom: 'dxqb-propertygrid' } };
var AccordionTabInfo = (function (_super) {
    __extends(AccordionTabInfo, _super);
    function AccordionTabInfo(query, itemPropertiesTabInfoModel, undoEngine, focused, showParameters) {
        var _this = _super.call(this, {
            text: 'Properties',
            template: 'dxqb-properties-wrapper',
            model: AccordionTabInfo._createQBPropertyGrid(query, itemPropertiesTabInfoModel, undoEngine, showParameters)
        }) || this;
        _this.active(true);
        _this._getGroupByName('Fields').collapsed(false);
        _this._disposables.push(focused.subscribe(function (newVal) {
            if (!(newVal instanceof queryModel_1.QueryViewModel)) {
                var group = _this._getGroupByName('SelectedItem');
                group.collapsed(false);
            }
        }));
        return _this;
    }
    AccordionTabInfo._getSelectedItemPropertyName = function (model) {
        var text = 'Selection Properties';
        var id = 'AnalyticsCoreStringId.QueryBuilder_SelectionProperties';
        switch (model && model.controlType) {
            case 'Query':
                text = 'Query Properties';
                id = 'AnalyticsCoreStringId.QueryBuilder_QueryProperties';
                break;
            case 'Table':
                text = 'Table Properties';
                id = 'AnalyticsCoreStringId.QueryBuilder_TableProperties';
                break;
            case 'Column':
                text = 'Column Properties';
                id = 'AnalyticsCoreStringId.QueryBuilder_ColumnProperties';
                break;
            case 'JoinCondition':
                text = 'Relation Properties';
                id = 'AnalyticsCoreStringId.QueryBuilder_RelationProperties';
                break;
        }
        return localization_utils_1.getLocalization(text, id);
    };
    AccordionTabInfo._createWrappedObject = function (query, commonModel, undoEngine, showParameters) {
        var modelProperties = new propertygrid_1.ObjectProperties(query, null, 1);
        var modelValues = ko.computed(function () { return query() && query().parameters; });
        var info = [queryInfo, selectedItemInfo, fieldsInfo];
        var object = {
            selectedItem: commonModel,
            query: {
                editableObject: query,
                properties: modelProperties
            },
            fields: commonModel,
            isPropertyVisible: function (propertyName) {
                if (propertyName === 'selectedItem') {
                    return commonModel.editableObject() !== query();
                }
                return true;
            }
        };
        if (showParameters) {
            object['parameters'] = {
                values: modelValues,
                addHandler: function () { return new parameterModel_1.ParameterViewModel({ '@Type': 'System.String' }); },
                collapsed: false,
                undoEngine: undoEngine,
                isVisibleButton: function (index, button) { return button === 'add' || button === 'delete'; },
                template: '#dxqb-collectioneditor-template',
                textEmptyArray: { text: 'Click the Add button to create a parameter.', localizationId: 'AnalyticsCoreStringId.QueryBuilder_PageConfigureParametersEmpty' }
            };
            info.push(parametersInfo);
        }
        object['getInfo'] = function () { return info; };
        return object;
    };
    AccordionTabInfo._createGroups = function (editableObject, showParameters) {
        var _this = this;
        var groups = {
            'Query': {
                info: [queryInfo],
                displayName: function () { return localization_utils_1.getLocalization('Query Properties', 'AnalyticsCoreStringId.QueryBuilder_QueryProperties'); }
            },
            'SelectedItem': {
                info: [selectedItemInfo],
                displayName: function () { return _this._getSelectedItemPropertyName(editableObject()); }
            },
            'Fields': {
                info: [fieldsInfo],
                displayName: function () { return localization_utils_1.getLocalization('Available tables and views', 'AnalyticsCoreStringId.QueryBuilder_AvailableTables'); }
            }
        };
        if (showParameters)
            groups['Parameters'] = {
                info: [parametersInfo],
                displayName: function () { return localization_utils_1.getLocalization('Parameters', 'AnalyticsCoreStringId.QueryBuilder_Parameters'); }
            };
        return groups;
    };
    AccordionTabInfo._createQBPropertyGrid = function (query, commonModel, undoEngine, showParameters) {
        var object = this._createWrappedObject(query, commonModel, undoEngine, showParameters);
        var grid = new _controlProperties_1.ControlProperties(ko.observable(object), {
            groups: this._createGroups(commonModel.editableObject, showParameters),
            editors: object['getInfo']()
        }, undefined, false);
        return grid;
    };
    AccordionTabInfo.prototype._getGroupByName = function (name) {
        return this.model.groups.filter(function (x) { return x['_displayName'] === name; })[0];
    };
    return AccordionTabInfo;
}(tabPanel_1.TabInfo));
exports.AccordionTabInfo = AccordionTabInfo;
