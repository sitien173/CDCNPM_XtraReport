/**
* DevExpress Analytics (query-builder\dragDrop\_dbObjectDragDropHandler.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _dragDropHandler_1 = require("../../core/dragDrop/_dragDropHandler");
var controlsFactory_1 = require("../utils/controlsFactory");
var size_1 = require("../../core/elements/size");
var rectangle_1 = require("../../core/elements/rectangle");
var _surfaceHelpers_1 = require("../../core/internal/_surfaceHelpers");
var _utils_1 = require("../../serializer/_utils");
var DbObjectDragDropHandler = (function (_super) {
    __extends(DbObjectDragDropHandler, _super);
    function DbObjectDragDropHandler(surface, selection, _undoEngine, snapHelper, dragHelperContent) {
        var _this = _super.call(this, surface, selection, _undoEngine, snapHelper, dragHelperContent) || this;
        _this._undoEngine = _undoEngine;
        _this._query = function () { return _this._querySurface().getControlModel(); };
        _this._querySurface = surface;
        _this.cursor = 'arrow';
        _this.containment = '.dxqb-designer';
        _this['cursorAt'] = {
            top: 0,
            left: 0
        };
        _this['helper'] = function (draggable) {
            _super.prototype.helper.call(_this, draggable);
            _this.recalculateSize(size_1.Size.fromString('199, 123'));
            dragHelperContent.setContent(new rectangle_1.Rectangle(0, 0, _this._size.width(), _this._size.height()));
        };
        _this._drop = DbObjectDragDropHandler.getDropCallback(_this._undoEngine, false);
        return _this;
    }
    DbObjectDragDropHandler.prototype.startDrag = function (draggable) {
        if (draggable && draggable.name) {
            this._query().dbSchemaProvider.getDbTable(draggable.name);
        }
    };
    DbObjectDragDropHandler.prototype.doStopDrag = function (ui, draggable) {
        this.dragHelperContent.reset();
        if (this.selection.dropTarget) {
            var position = this._getAbsoluteSurfacePosition(ui);
            this._querySurface().underCursor().x = position.left - this._querySurface()['absolutePosition'].x();
            this._querySurface().underCursor().y = position.top - this._querySurface()['absolutePosition'].y();
            var item = draggable;
            var control = this._drop(item.data, this._query());
            this.addControl(control, this._querySurface(), this._size);
        }
    };
    DbObjectDragDropHandler.prototype.addControl = function (control, dropTargetSurface, size) {
        dropTargetSurface.getControlModel().addChild(control);
        var controlSurface = _surfaceHelpers_1.findSurface(control);
        if (!controlSurface)
            return;
        controlSurface.rect({ left: dropTargetSurface.underCursor().x, top: dropTargetSurface.underCursor().y, width: size.width() });
        this.selection.initialize(controlSurface);
    };
    DbObjectDragDropHandler.getDropCallback = function (undoEngine, suggestLocation) { return (function (memberInfo, query) {
        var newControl = query.createChild(_utils_1.extend({ '@ControlType': 'Table', '@Name': memberInfo.name }, controlsFactory_1.controlsFactory.controlsMap['Table'].defaultVal));
        if (newControl.isInitialized()) {
            query.tryToCreateRelationsByFK(newControl);
        }
        else {
            newControl.isInitialized.subscribe(function () {
                undoEngine().start();
                query.tryToCreateRelationsByFK(newControl);
                undoEngine().end();
            });
        }
        if (suggestLocation) {
            var posX = Math.max.apply(null, query.tables.peek()
                .filter(function (t) { return t !== newControl; })
                .map(function (t) { return t.location.x.peek() + t.size.width.peek() * 3 / 2; })
                .concat([30]));
            newControl.location.x(posX);
            newControl.location.y(65);
        }
        return newControl;
    }); };
    return DbObjectDragDropHandler;
}(_dragDropHandler_1.DragDropHandler));
exports.DbObjectDragDropHandler = DbObjectDragDropHandler;
