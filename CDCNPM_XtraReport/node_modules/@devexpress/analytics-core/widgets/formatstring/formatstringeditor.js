/**
* DevExpress Analytics (widgets\formatstring\formatstringeditor.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../serializer/utils");
var _patterns_1 = require("./_patterns");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var _localizationStringIds_1 = require("../../property-grid/localization/_localizationStringIds");
var _popupService_1 = require("../../property-grid/internal/_popupService");
var scroll_view_1 = require("devextreme/ui/scroll_view");
var FormatStringEditor = (function (_super) {
    __extends(FormatStringEditor, _super);
    function FormatStringEditor(value, disabled, defaultPatterns, customPatterns, actions, rtl, popupContainer) {
        var _this = _super.call(this) || this;
        _this._isDisabled = ko.observable(false);
        _this._timeout = null;
        _this.currentType = ko.observable();
        _this.patternList = ko.observableArray([]);
        _this.canAddCustomFormat = ko.observable(false);
        _this.formatPrefix = ko.observable('');
        _this.formatSuffix = ko.observable('');
        _this.previewString = ko.observable('Preview string');
        _this.formatResult = ko.observable('');
        _this.selectedFormats = ko.observable([]);
        _this.selectedTypes = ko.observable([]);
        _this.popupVisible = ko.observable(false);
        _this.localizationIdMap = {
            'title': { text: 'FormatString Editor', localizationId: 'AnalyticsCoreStringId.FormatStringEditor_Title' },
            'category': { text: 'Category', localizationId: 'AnalyticsCoreStringId.Category' },
            'preview': { text: 'Preview', localizationId: 'AnalyticsCoreStringId.TooltipButtons_Preview' },
            'types': { text: 'Types', localizationId: 'AnalyticsCoreStringId.FormatStringEditor_Types' },
            'add': { text: 'Add', localizationId: 'DataAccessUIStringId.Button_Add' },
            'prefix': { text: 'Prefix', localizationId: 'AnalyticsCoreStringId.Prefix' },
            'suffix': { text: 'Suffix', localizationId: 'AnalyticsCoreStringId.FormatStringEditor_Suffix' }
        };
        _this.option('value', value);
        _this.option('disabled', disabled || false);
        _this.option('rtl', rtl || false);
        _this.option('popupContainer', popupContainer || '.dx-designer-viewport');
        var self = _this;
        _this.popupService = new _popupService_1.PopupService();
        _this._standardPatternSource = defaultPatterns || _patterns_1.formatStringStandardPatterns;
        _this._customPatternSource = customPatterns || {};
        _this.types = _this._convertArray(Object.keys(_this._standardPatternSource));
        _this._disposables.push(_this.currentType.subscribe(function (newVal) {
            if (self.isGeneralType) {
                self.formatResult('');
                self.selectedFormats([]);
            }
            else {
                self._updateFormatList();
            }
        }));
        _this.currentType(_this.types[0].name);
        _this._disposables.push(_this.formatResult.subscribe(function (newVal) {
            self._updateCanAddCustomFormat(newVal);
            self._updatePreview();
        }));
        _this._disposables.push(_this.formatPrefix.subscribe(function (newVal) {
            self._updatePreview();
        }));
        _this._disposables.push(_this.formatSuffix.subscribe(function (newVal) {
            self._updatePreview();
        }));
        _this._disposables.push(_this.popupVisible.subscribe(function (newVal) {
            if (!newVal)
                return;
            self._initEditor(value());
            self.selectedTypes(self.types.filter(function (item) { return item.name === self.currentType(); }));
        }));
        _this._createMainPopupButtons();
        actions && actions.updatePreview && (_this.updatePreview = actions.updatePreview);
        _this.setType = function (e) {
            self.currentType(e.itemData.name);
            self._updateSelection();
        };
        _this.setFormat = function (e) {
            self.formatResult(e.itemData.name);
        };
        _this.addCustomFormat = function () {
            if (self.formatResult() && self.canAddCustomFormat()) {
                self.customPatterns.push(self.formatResult());
                self._updateFormatList();
                self._scrollToBottom();
                actions && actions.saveCustomPattern(self.currentType(), self.formatResult());
                self._updateSelection(self.patternList().length - 1);
                self.canAddCustomFormat(false);
            }
        };
        _this.removeCustomFormat = function (data) {
            var currentSelection = self.selectedFormats()[0];
            var patternList = self.patternList();
            var removedItemIndex = patternList.map(function (item) { return item.name; }).indexOf(data.name);
            self.customPatterns.splice(self.customPatterns.indexOf(data.name), 1);
            self._updateFormatList();
            actions && actions.removeCustomPattern(self.currentType(), data.name);
            if (currentSelection.name === data.name) {
                self._updateSelection(removedItemIndex === (patternList.length - 1) ? (self.patternList().length - 1) : removedItemIndex);
            }
            else {
                self.selectedFormats(self.patternList().filter(function (item) { return item.name === currentSelection.name; }));
            }
        };
        return _this;
    }
    FormatStringEditor.prototype.okAction = function () {
        var result = this.isGeneralType ? this._getGeneralPreview('{0}') : this._wrapFormat();
        this.option('value', result);
        this.popupVisible(false);
    };
    FormatStringEditor.prototype._createMainPopupButtons = function () {
        var self = this;
        this.buttonItems = [
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: localization_utils_1.getLocalization('OK', _localizationStringIds_1.StringId.DataAccessBtnOK), disabled: this._isDisabled, onClick: function () { self.okAction(); } } },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: localization_utils_1.getLocalization('Cancel', _localizationStringIds_1.StringId.DataAccessBtnCancel), onClick: function () { self.popupVisible(false); } } }
        ];
    };
    FormatStringEditor.prototype._convertArray = function (array, canRemove) {
        return array.map(function (item) { return { name: item, displayName: localization_utils_1.getLocalization(item), canRemove: !!canRemove }; });
    };
    FormatStringEditor.prototype._scrollToBottom = function () {
        var $scrollView = $('.dx-format-string .dx-format-string-formats').find('.dx-scrollview').filter(':visible');
        var scrollViewInstance = scroll_view_1.default.getInstance($scrollView.get(0));
        scrollViewInstance && scrollViewInstance['scrollTo'] && scrollViewInstance['scrollTo'](scrollViewInstance['scrollHeight']());
    };
    FormatStringEditor.prototype._updateFormatList = function () {
        this.selectedFormats([]);
        var currentTypeInfo = this._standardPatternSource[this.currentType()];
        this.patternList(this._convertArray(currentTypeInfo.patterns).concat(this._convertArray(this.customPatterns, true)));
    };
    FormatStringEditor.prototype._updateSelection = function (selectedItemIndex) {
        var currectFormat = this.patternList()[selectedItemIndex || 0];
        if (currectFormat) {
            this.selectedFormats([currectFormat]);
            this.formatResult(currectFormat.name);
        }
    };
    FormatStringEditor.prototype._setPreviewString = function (previewString) {
        this.previewString(previewString);
        this._isDisabled(false);
    };
    FormatStringEditor.prototype._setErrorMessage = function (setDisabled) {
        this.previewString(localization_utils_1.getLocalization('Preview string is not available', 'AnalyticsCoreStringId.FormatStringEditor_PreviewNotAvailable_Text'));
        this._isDisabled(setDisabled);
    };
    FormatStringEditor.prototype._updatePreview = function () {
        var _this = this;
        this._timeout && clearTimeout(this._timeout);
        this._timeout = setTimeout(function () {
            if (_this.isGeneralType) {
                _this.previewString(_this._getGeneralPreview(undefined));
                return;
            }
            var category = _this._standardPatternSource[_this.currentType()];
            var updatedPreviewPromise = _this.updatePreview(category.value, category.type, _this._wrapFormat());
            _this._lastUpdatePreviewPromise = updatedPreviewPromise;
            updatedPreviewPromise
                .done(function (previewResult) {
                if (_this._lastUpdatePreviewPromise === updatedPreviewPromise) {
                    if (previewResult.Result)
                        _this._setPreviewString(previewResult.Result);
                    else
                        _this._setErrorMessage(previewResult.IsError);
                }
            }).fail(function (error) {
                if (_this._lastUpdatePreviewPromise === updatedPreviewPromise)
                    _this.previewString(localization_utils_1.getLocalization('Preview string is not available', 'AnalyticsCoreStringId.FormatStringEditor_PreviewNotAvailable_Text'));
            });
        }, 100);
    };
    FormatStringEditor.prototype._getGeneralPreview = function (value) {
        if (value === void 0) { value = '###'; }
        return this.formatPrefix() + value + this.formatSuffix();
    };
    FormatStringEditor.prototype._wrapFormat = function (format) {
        var pattern = format || this.formatResult();
        if (pattern && pattern.indexOf('{0:') !== -1) {
            return pattern;
        }
        return pattern ? '{0:' + pattern + '}' : '';
    };
    FormatStringEditor.prototype._updateCanAddCustomFormat = function (newFormat) {
        var _this = this;
        if (!newFormat) {
            this.canAddCustomFormat(false);
            return;
        }
        var canAddCustomFormat = true;
        Object.keys(this._standardPatternSource).some(function (name) {
            canAddCustomFormat = _this._standardPatternSource[name].patterns.indexOf(newFormat) === -1;
            return !canAddCustomFormat;
        });
        this.canAddCustomFormat(canAddCustomFormat ? this.customPatterns.indexOf(newFormat) === -1 : canAddCustomFormat);
    };
    FormatStringEditor.prototype._initEditor = function (formatStringValue) {
        var _this = this;
        if (!formatStringValue) {
            this.setType({ itemData: this.types[0] });
            return;
        }
        if (formatStringValue.indexOf('{0}') !== -1) {
            this.currentType('General');
            this.formatPrefix(formatStringValue.substring(0, formatStringValue.indexOf('{0}')));
            this.formatSuffix(formatStringValue.substring(formatStringValue.indexOf('{0}') + 3));
            return;
        }
        var startIndex = formatStringValue.indexOf('{0:'), closingBracketIndex = formatStringValue.indexOf('}', startIndex), formatPattern = formatStringValue.substring(startIndex + 3, closingBracketIndex), isFormatPatternFind;
        var selectTypePatternPair = function (name) {
            _this.currentType(name);
            if (startIndex === 0 && closingBracketIndex === (formatStringValue.length - 1)) {
                _this.selectedFormats(_this.patternList().filter(function (item) { return item.name === formatPattern; }));
                _this.formatResult(formatPattern);
                isFormatPatternFind = true;
            }
        };
        Object.keys(this._standardPatternSource).some(function (name) {
            if (_this._standardPatternSource[name].patterns.indexOf(formatPattern) !== -1) {
                selectTypePatternPair(name);
                return true;
            }
            var customPatterns = _this._customPatternSource[_this._standardPatternSource[name].type];
            if (customPatterns && customPatterns.indexOf(formatPattern) !== -1) {
                selectTypePatternPair(name);
                return true;
            }
            return false;
        });
        if (!isFormatPatternFind) {
            this.currentType(this.types[0].name);
            this.selectedFormats([]);
            this.formatResult(formatStringValue);
        }
    };
    FormatStringEditor.prototype.updateInputText = function (propertyName, componentInstance) {
        this[propertyName](componentInstance.option('text'));
    };
    FormatStringEditor.prototype.option = function (name, value) {
        if (value !== void 0) {
            if (ko.isObservable(this[name])) {
                this[name](value);
            }
            else {
                this[name] = value;
            }
        }
        return ko.unwrap(this[name]);
    };
    FormatStringEditor.prototype.updatePreview = function (value, category, pattern) {
        return $.Deferred().resolve({ Result: value || 'preview string' }).promise();
    };
    Object.defineProperty(FormatStringEditor.prototype, "customPatterns", {
        get: function () {
            var currentTypeInfo = this._standardPatternSource[this.currentType()];
            return this._customPatternSource[currentTypeInfo.type] = this._customPatternSource[currentTypeInfo.type] || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormatStringEditor.prototype, "isGeneralType", {
        get: function () {
            return this.currentType() === 'General';
        },
        enumerable: true,
        configurable: true
    });
    FormatStringEditor.prototype.getDisplayText = function (key) {
        return localization_utils_1.getLocalization(this.localizationIdMap[key].text, this.localizationIdMap[key].localizationId);
    };
    FormatStringEditor.prototype.getPopupContainer = function (el) {
        return $(el).closest(this.option('popupContainer'));
    };
    return FormatStringEditor;
}(utils_1.Disposable));
exports.FormatStringEditor = FormatStringEditor;
