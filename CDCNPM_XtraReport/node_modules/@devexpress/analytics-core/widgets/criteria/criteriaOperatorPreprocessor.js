/**
* DevExpress Analytics (widgets\criteria\criteriaOperatorPreprocessor.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var criteriaOperator_1 = require("./operators/criteriaOperator");
var binary_1 = require("./operators/binary");
var function_1 = require("./operators/function");
var aggregate_1 = require("./operators/aggregate");
var group_1 = require("./operators/group");
var in_1 = require("./operators/in");
var value_1 = require("./operators/value");
var constant_1 = require("./operators/constant");
var parameter_1 = require("./operators/parameter");
var property_1 = require("./operators/property");
var unary_1 = require("./operators/unary");
var between_1 = require("./operators/between");
var join_1 = require("./operators/join");
var CriteriaOperatorPreprocessor = (function () {
    function CriteriaOperatorPreprocessor() {
        this._func = [];
    }
    CriteriaOperatorPreprocessor.prototype.CriteriaOperator = function () {
        return new criteriaOperator_1.CriteriaOperator();
    };
    CriteriaOperatorPreprocessor.prototype.BinaryOperator = function (options) {
        return new binary_1.BinaryOperator(options.left, options.right, options.operatorType);
    };
    CriteriaOperatorPreprocessor.prototype.FunctionOperator = function (options) {
        return new function_1.FunctionOperator(options.operatorType, options.operands);
    };
    CriteriaOperatorPreprocessor.prototype.AggregateOperand = function (options) {
        return new aggregate_1.AggregateOperand(options.property, options.aggregatedExpression, options.aggregateType, options.condition);
    };
    CriteriaOperatorPreprocessor.prototype.GroupOperator = function (options) {
        return new group_1.GroupOperator(options.operation, options.operands);
    };
    CriteriaOperatorPreprocessor.prototype.InOperator = function (options) {
        return new in_1.InOperator(options.criteriaOperator, options.operands);
    };
    CriteriaOperatorPreprocessor.prototype.ConstantValue = function (options) {
        return new constant_1.ConstantValue(options.value);
    };
    CriteriaOperatorPreprocessor.prototype.OperandValue = function (options) {
        return new value_1.OperandValue(options.value);
    };
    CriteriaOperatorPreprocessor.prototype.OperandParameter = function (options) {
        return new parameter_1.OperandParameter(options.parameterName, options.value);
    };
    CriteriaOperatorPreprocessor.prototype.OperandProperty = function (options) {
        return new property_1.OperandProperty(options.propertyName, options.startColumn, options.startLine, options.originalPropertyLength, options.circumflex);
    };
    CriteriaOperatorPreprocessor.prototype.UnaryOperator = function (options) {
        return new unary_1.UnaryOperator(options.operatorType, options.operator);
    };
    CriteriaOperatorPreprocessor.prototype.BetweenOperator = function (options) {
        return new between_1.BetweenOperator(options.property, options.begin, options.end);
    };
    CriteriaOperatorPreprocessor.prototype.JoinOperator = function (options) {
        return new join_1.JoinOperand(options.joinTypeName, options.condition, options.type, options.aggregated);
    };
    CriteriaOperatorPreprocessor.prototype.addListener = function (func) {
        var index = this._func.indexOf(func);
        if (index === -1) {
            this._func.push(func);
        }
    };
    CriteriaOperatorPreprocessor.prototype.removeListener = function (func) {
        var index = this._func.indexOf(func);
        if (index !== -1) {
            this._func.splice(index, 1);
        }
    };
    CriteriaOperatorPreprocessor.prototype.process = function (operatorType, options) {
        var operand = this.CriteriaOperator();
        switch (operatorType) {
            case 'join':
                operand = this.JoinOperator(options);
                break;
            case 'between':
                operand = this.BetweenOperator(options);
                break;
            case 'property':
                operand = this.OperandProperty(options);
                break;
            case 'parameter':
                operand = this.OperandParameter(options);
                break;
            case 'value':
                operand = this.OperandValue(options);
                break;
            case 'in':
                operand = this.InOperator(options);
                break;
            case 'function':
                operand = this.FunctionOperator(options);
                break;
            case 'unary':
                operand = this.UnaryOperator(options);
                break;
            case 'group':
                operand = this.GroupOperator(options);
                break;
            case 'binary':
                operand = this.BinaryOperator(options);
                break;
            case 'const':
                operand = this.ConstantValue(options);
                break;
            case 'aggregate':
                operand = this.AggregateOperand(options);
                break;
        }
        this._func.forEach(function (func) { operand = func(operand, { operatorType: operatorType, options: options }); });
        return operand;
    };
    return CriteriaOperatorPreprocessor;
}());
exports.CriteriaOperatorPreprocessor = CriteriaOperatorPreprocessor;
exports.criteriaCreator = new CriteriaOperatorPreprocessor();
