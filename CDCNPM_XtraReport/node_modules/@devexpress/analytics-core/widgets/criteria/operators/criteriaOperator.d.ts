/**
* DevExpress Analytics (widgets\criteria\operators\criteriaOperator.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
export interface _IToken {
    type: string;
    val?: string;
    start: number;
    end: number;
}
export declare class MachineState {
    private tokenName;
    private alphabet;
    private startTerm;
    private endTerm;
    private tokenLength;
    isActiveState: boolean;
    tokens: _IToken[];
    constructor(tokenName: 'comment' | 'field' | 'value', alphabet: string, startTerm: string, endTerm: string);
    private _isSubline;
    private _getToken;
    processTransitionFunction(pos: number): number;
}
export declare class CriteriaOperatorStateMachine {
    private stringCriteria;
    private machineStates;
    private _inputStringCriteria;
    constructor(stringCriteria: string);
    _tokenize(): _IToken[];
    _replaceTokenToAnotherToken(tokens: _IToken[], newTokenChar: string, tokenName: string): string;
    replaceCommentsToChar(char?: string): CriteriaOperatorStateMachine;
    getCriteria(): CriteriaOperator;
}
export declare class CriteriaOperator {
    static operators(enums: any): any;
    static parse(stringCriteria: string, saveOriginalStringLength?: boolean): CriteriaOperator;
    static create(operatorType: any): CriteriaOperator;
    static and(left: CriteriaOperator, right: CriteriaOperator): CriteriaOperator;
    static or(left: CriteriaOperator, right: CriteriaOperator): CriteriaOperator;
    static getNotValidRange(value: string, errorMessage: string): {
        start: number;
        end: number;
    };
    readonly displayType: string;
    readonly enumType: any;
    operatorType: any;
    type: string;
    operands: any;
    create: (operatorType: any, field: CriteriaOperator) => CriteriaOperator;
    remove: (operand: CriteriaOperator) => void;
    change: (operandType: any, operand: CriteriaOperator, incorrectSpecificsForAggregate: boolean) => CriteriaOperator;
    changeValueType: (type: any, location: IPropertyLocation) => CriteriaOperator;
    changeValue: (operand: CriteriaOperator, reverse: boolean, location: IPropertyLocation) => CriteriaOperator;
    assignLeftPart: (criteriaOperator: any) => any;
    assignRightPart: (criteriaOperator: any) => any;
    assignType: (type: any) => void;
    readonly leftPart: any;
    readonly rightPart: any;
    resetrightPart: (value: any) => any;
    assignFrom(criteriaOperator: any, incorrectSpecificsForAggregate?: boolean, needAssignRightPart?: boolean): void;
    children(): any[];
    accept(visitor: ICriteriaOperatorVisitor): CriteriaOperator;
}
import { IPropertyLocation, ICriteriaOperatorVisitor } from '../utils';
