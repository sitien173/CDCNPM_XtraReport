/**
* DevExpress Analytics (widgets\criteria\operators\binary.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var criteriaOperator_1 = require("./criteriaOperator");
var utils_1 = require("../utils");
var BinaryOperatorType;
(function (BinaryOperatorType) {
    BinaryOperatorType[BinaryOperatorType["Equal"] = 0] = "Equal";
    BinaryOperatorType[BinaryOperatorType["NotEqual"] = 1] = "NotEqual";
    BinaryOperatorType[BinaryOperatorType["Greater"] = 2] = "Greater";
    BinaryOperatorType[BinaryOperatorType["Less"] = 3] = "Less";
    BinaryOperatorType[BinaryOperatorType["LessOrEqual"] = 4] = "LessOrEqual";
    BinaryOperatorType[BinaryOperatorType["GreaterOrEqual"] = 5] = "GreaterOrEqual";
    BinaryOperatorType[BinaryOperatorType["Like"] = 6] = "Like";
    BinaryOperatorType[BinaryOperatorType["BitwiseAnd"] = 7] = "BitwiseAnd";
    BinaryOperatorType[BinaryOperatorType["BitwiseOr"] = 8] = "BitwiseOr";
    BinaryOperatorType[BinaryOperatorType["BitwiseXor"] = 9] = "BitwiseXor";
    BinaryOperatorType[BinaryOperatorType["Divide"] = 10] = "Divide";
    BinaryOperatorType[BinaryOperatorType["Modulo"] = 11] = "Modulo";
    BinaryOperatorType[BinaryOperatorType["Multiply"] = 12] = "Multiply";
    BinaryOperatorType[BinaryOperatorType["Plus"] = 13] = "Plus";
    BinaryOperatorType[BinaryOperatorType["Minus"] = 14] = "Minus";
})(BinaryOperatorType = exports.BinaryOperatorType || (exports.BinaryOperatorType = {}));
var BinaryOperator = (function (_super) {
    __extends(BinaryOperator, _super);
    function BinaryOperator(left, right, operatorType) {
        var _this = _super.call(this) || this;
        _this.assignLeftPart = function (criteriaOperator) {
            _this.leftOperand = criteriaOperator.leftPart;
        };
        _this.assignRightPart = function (criteriaOperator) {
            if (criteriaOperator.rightPart.length !== null && criteriaOperator.rightPart.length !== undefined) {
                if (criteriaOperator.rightPart.length) {
                    _this.rightOperand = criteriaOperator.rightPart[0];
                }
            }
            else {
                _this.rightOperand = criteriaOperator.rightPart;
            }
        };
        _this.type = 'Binary';
        _this.leftOperand = left || new criteriaOperator_1.CriteriaOperator();
        _this.rightOperand = right || new criteriaOperator_1.CriteriaOperator();
        _this.operatorType = operatorType;
        return _this;
    }
    Object.defineProperty(BinaryOperator.prototype, "leftPart", {
        get: function () {
            return this.leftOperand;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BinaryOperator.prototype, "rightPart", {
        get: function () {
            return this.rightOperand;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BinaryOperator.prototype, "displayType", {
        get: function () {
            return utils_1.operatorTokens[BinaryOperatorType[this.operatorType]] || BinaryOperatorType[this.operatorType];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BinaryOperator.prototype, "enumType", {
        get: function () {
            return BinaryOperatorType;
        },
        enumerable: true,
        configurable: true
    });
    BinaryOperator.prototype.accept = function (visitor) {
        return visitor.visitBinaryOperator
            ? visitor.visitBinaryOperator(this)
            : new BinaryOperator(this.leftOperand && this.leftOperand.accept(visitor), this.rightOperand && this.rightOperand.accept(visitor), this.operatorType);
    };
    return BinaryOperator;
}(criteriaOperator_1.CriteriaOperator));
exports.BinaryOperator = BinaryOperator;
