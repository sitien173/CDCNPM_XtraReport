/**
* DevExpress Analytics (widgets\criteria\operators\group.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var criteriaOperator_1 = require("./criteriaOperator");
var criteriaOperatorPreprocessor_1 = require("../criteriaOperatorPreprocessor");
var binary_1 = require("./binary");
var value_1 = require("./value");
var aggregate_1 = require("./aggregate");
var GroupOperatorType;
(function (GroupOperatorType) {
    GroupOperatorType[GroupOperatorType["And"] = 0] = "And";
    GroupOperatorType[GroupOperatorType["Or"] = 1] = "Or";
})(GroupOperatorType = exports.GroupOperatorType || (exports.GroupOperatorType = {}));
var GroupOperator = (function (_super) {
    __extends(GroupOperator, _super);
    function GroupOperator(operation, operands) {
        var _this = _super.call(this) || this;
        _this.create = function (isGroup, property, specifics) {
            var operator = new binary_1.BinaryOperator(property, new value_1.OperandValue(''), binary_1.BinaryOperatorType.Equal);
            if (isGroup) {
                operator = new GroupOperator(GroupOperatorType.And, []);
            }
            else if (specifics && specifics === 'list') {
                operator = new aggregate_1.AggregateOperand(property, null, aggregate_1.Aggregate.Exists, new GroupOperator(GroupOperatorType.And, []));
            }
            _this.operands.push(operator);
            return _this.operands[_this.operands.indexOf(operator)];
        };
        _this.change = function (operationType, item, incorrectSpecificsForAggregate) {
            if (incorrectSpecificsForAggregate === void 0) { incorrectSpecificsForAggregate = false; }
            var position = _this.operands.indexOf(item);
            if (position !== -1) {
                var operator = criteriaOperator_1.CriteriaOperator.create(operationType);
                if (operationType.type !== operator.enumType) {
                    operator.leftPart.assignFrom(item, incorrectSpecificsForAggregate, !operationType.emptyRightPart);
                }
                else {
                    operator.assignFrom(item, incorrectSpecificsForAggregate, !operationType.emptyRightPart);
                }
                _this.operands[position] = operator;
            }
            else {
                throw Error('dont have this element in operands collection');
            }
            item = null;
            return _this.operands[position];
        };
        _this.remove = function (operator) {
            _this.operands.splice(_this.operands.indexOf(operator), 1);
        };
        _this.assignLeftPart = function (operator) {
            _this.operands = operator.operands;
        };
        _this.operands = [];
        _this.type = 'Group';
        _this.operatorType = operation;
        operands = operands || [new criteriaOperator_1.CriteriaOperator(), new criteriaOperator_1.CriteriaOperator()];
        operands.forEach(function (operand) { return _this.operands.push(operand); });
        return _this;
    }
    GroupOperator.combine = function (operation, operands) {
        var combinedOperands = [];
        (operands || []).forEach(function (operand) {
            if (operand instanceof GroupOperator && operand.operatorType === operation) {
                combinedOperands.push.apply(combinedOperands, operand.operands);
            }
            else {
                combinedOperands.push(operand);
            }
        });
        if (combinedOperands.length === 1) {
            return combinedOperands[0];
        }
        return criteriaOperatorPreprocessor_1.criteriaCreator.process('group', { operands: combinedOperands, operation: operation });
    };
    GroupOperator.prototype.children = function () {
        return this.operands;
    };
    Object.defineProperty(GroupOperator.prototype, "displayType", {
        get: function () {
            return GroupOperatorType[this.operatorType];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GroupOperator.prototype, "enumType", {
        get: function () {
            return GroupOperatorType;
        },
        enumerable: true,
        configurable: true
    });
    GroupOperator.prototype.accept = function (visitor) {
        return visitor.visitGroupOperator
            ? visitor.visitGroupOperator(this)
            : new GroupOperator(this.operatorType, this.operands && this.operands.map(function (op) { return op.accept(visitor); }));
    };
    return GroupOperator;
}(criteriaOperator_1.CriteriaOperator));
exports.GroupOperator = GroupOperator;
