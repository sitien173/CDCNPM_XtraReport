/**
* DevExpress Analytics (widgets\criteria\operators\value.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var criteriaOperator_1 = require("./criteriaOperator");
var _internal_1 = require("../../../property-grid/widgets/internal/_internal");
var _localization_1 = require("../../../property-grid/localization/_localization");
var OperandValue = (function (_super) {
    __extends(OperandValue, _super);
    function OperandValue(value) {
        var _this = _super.call(this) || this;
        _this.type = 'Value';
        var result = value !== null && value !== undefined ? value : '';
        var isGuid = _internal_1.validateGuid(value);
        if (value && value['length'] && ((value[0] === "'" && value[value.length - 1] === "'") || isGuid)) {
            _this.specifics = 'string';
            if (isGuid && value[0] === '{' && value[value.length - 1] === '}')
                _this.specifics = 'guid';
            result = _this._processStringValue(value);
        }
        else if (value && value['length'] && value[0] === '#' && value[value.length - 1] === '#') {
            result = value.slice(1, value.length - 1);
            result = _localization_1.parseDate(result);
            if (!result) {
                result = _localization_1.parseDate(value.slice(1, value.length - 1));
            }
        }
        else if (String(value).toLowerCase() === 'true' || String(value).toLowerCase() === 'false') {
            result = String(value).toLowerCase() === 'true' ? 'True' : 'False';
        }
        _this.value = result;
        return _this;
    }
    OperandValue.prototype._processStringValue = function (value) {
        var result = value.slice(1, value.length - 1);
        if (result.indexOf("''") !== -1)
            result = result.replace("''", "'");
        return result;
    };
    Object.defineProperty(OperandValue.prototype, "displayType", {
        get: function () {
            return this.value || '?';
        },
        enumerable: true,
        configurable: true
    });
    return OperandValue;
}(criteriaOperator_1.CriteriaOperator));
exports.OperandValue = OperandValue;
