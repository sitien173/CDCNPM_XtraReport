/**
* DevExpress Analytics (widgets\criteria\operators\join.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var criteriaOperator_1 = require("./criteriaOperator");
var criteriaOperatorPreprocessor_1 = require("../criteriaOperatorPreprocessor");
var JoinOperand = (function (_super) {
    __extends(JoinOperand, _super);
    function JoinOperand(joinTypeName, condition, type, aggregated) {
        var _this = _super.call(this) || this;
        _this.type = 'Join';
        _this.joinTypeName = joinTypeName;
        _this.condition = condition;
        _this.operatorType = type;
        _this.aggregatedExpression = aggregated;
        return _this;
    }
    JoinOperand.joinOrAggregate = function (collectionProperty, condition, type, aggregated) {
        if (collectionProperty === null || collectionProperty.propertyName.length < 2 || collectionProperty.propertyName[0] != '<' || collectionProperty.propertyName[collectionProperty.propertyName.length - 1] != '>') {
            return criteriaOperatorPreprocessor_1.criteriaCreator.process('aggregate', {
                property: collectionProperty,
                aggregatedExpression: aggregated,
                aggregateType: type,
                condition: condition
            });
        }
        else {
            return criteriaOperatorPreprocessor_1.criteriaCreator.process('join', {
                joinTypeName: collectionProperty.propertyName.substring(1, collectionProperty.propertyName.length - 2),
                condition: condition,
                type: type,
                aggregated: aggregated
            });
        }
    };
    JoinOperand.prototype.accept = function (visitor) {
        return visitor.visitJoinOperand
            ? visitor.visitJoinOperand(this)
            : new JoinOperand(this.joinTypeName, this.condition && this.condition.accept(visitor), this.operatorType, this.aggregatedExpression && this.aggregatedExpression.accept(visitor));
    };
    return JoinOperand;
}(criteriaOperator_1.CriteriaOperator));
exports.JoinOperand = JoinOperand;
