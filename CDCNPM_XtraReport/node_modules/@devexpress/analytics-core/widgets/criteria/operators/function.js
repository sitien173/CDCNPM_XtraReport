/**
* DevExpress Analytics (widgets\criteria\operators\function.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var criteriaOperator_1 = require("./criteriaOperator");
var utils_1 = require("../utils");
var value_1 = require("./value");
var FunctionOperatorType;
(function (FunctionOperatorType) {
    FunctionOperatorType[FunctionOperatorType["None"] = 0] = "None";
    FunctionOperatorType[FunctionOperatorType["Custom"] = 1] = "Custom";
    FunctionOperatorType[FunctionOperatorType["CustomNonDeterministic"] = 2] = "CustomNonDeterministic";
    FunctionOperatorType[FunctionOperatorType["Iif"] = 3] = "Iif";
    FunctionOperatorType[FunctionOperatorType["IsNull"] = 4] = "IsNull";
    FunctionOperatorType[FunctionOperatorType["IsNullOrEmpty"] = 5] = "IsNullOrEmpty";
    FunctionOperatorType[FunctionOperatorType["Trim"] = 6] = "Trim";
    FunctionOperatorType[FunctionOperatorType["Len"] = 7] = "Len";
    FunctionOperatorType[FunctionOperatorType["Substring"] = 8] = "Substring";
    FunctionOperatorType[FunctionOperatorType["Upper"] = 9] = "Upper";
    FunctionOperatorType[FunctionOperatorType["Lower"] = 10] = "Lower";
    FunctionOperatorType[FunctionOperatorType["Concat"] = 11] = "Concat";
    FunctionOperatorType[FunctionOperatorType["Ascii"] = 12] = "Ascii";
    FunctionOperatorType[FunctionOperatorType["Char"] = 13] = "Char";
    FunctionOperatorType[FunctionOperatorType["ToStr"] = 14] = "ToStr";
    FunctionOperatorType[FunctionOperatorType["Replace"] = 15] = "Replace";
    FunctionOperatorType[FunctionOperatorType["Reverse"] = 16] = "Reverse";
    FunctionOperatorType[FunctionOperatorType["Insert"] = 17] = "Insert";
    FunctionOperatorType[FunctionOperatorType["CharIndex"] = 18] = "CharIndex";
    FunctionOperatorType[FunctionOperatorType["Remove"] = 19] = "Remove";
    FunctionOperatorType[FunctionOperatorType["Abs"] = 20] = "Abs";
    FunctionOperatorType[FunctionOperatorType["Sqr"] = 21] = "Sqr";
    FunctionOperatorType[FunctionOperatorType["Cos"] = 22] = "Cos";
    FunctionOperatorType[FunctionOperatorType["Sin"] = 23] = "Sin";
    FunctionOperatorType[FunctionOperatorType["Atn"] = 24] = "Atn";
    FunctionOperatorType[FunctionOperatorType["Exp"] = 25] = "Exp";
    FunctionOperatorType[FunctionOperatorType["Log"] = 26] = "Log";
    FunctionOperatorType[FunctionOperatorType["Rnd"] = 27] = "Rnd";
    FunctionOperatorType[FunctionOperatorType["Tan"] = 28] = "Tan";
    FunctionOperatorType[FunctionOperatorType["Power"] = 29] = "Power";
    FunctionOperatorType[FunctionOperatorType["Sign"] = 30] = "Sign";
    FunctionOperatorType[FunctionOperatorType["Round"] = 31] = "Round";
    FunctionOperatorType[FunctionOperatorType["Ceiling"] = 32] = "Ceiling";
    FunctionOperatorType[FunctionOperatorType["Floor"] = 33] = "Floor";
    FunctionOperatorType[FunctionOperatorType["Max"] = 34] = "Max";
    FunctionOperatorType[FunctionOperatorType["Min"] = 35] = "Min";
    FunctionOperatorType[FunctionOperatorType["Acos"] = 36] = "Acos";
    FunctionOperatorType[FunctionOperatorType["Asin"] = 37] = "Asin";
    FunctionOperatorType[FunctionOperatorType["Atn2"] = 38] = "Atn2";
    FunctionOperatorType[FunctionOperatorType["BigMul"] = 39] = "BigMul";
    FunctionOperatorType[FunctionOperatorType["Cosh"] = 40] = "Cosh";
    FunctionOperatorType[FunctionOperatorType["Log10"] = 41] = "Log10";
    FunctionOperatorType[FunctionOperatorType["Sinh"] = 42] = "Sinh";
    FunctionOperatorType[FunctionOperatorType["Tanh"] = 43] = "Tanh";
    FunctionOperatorType[FunctionOperatorType["PadLeft"] = 44] = "PadLeft";
    FunctionOperatorType[FunctionOperatorType["PadRight"] = 45] = "PadRight";
    FunctionOperatorType[FunctionOperatorType["StartsWith"] = 46] = "StartsWith";
    FunctionOperatorType[FunctionOperatorType["EndsWith"] = 47] = "EndsWith";
    FunctionOperatorType[FunctionOperatorType["Contains"] = 48] = "Contains";
    FunctionOperatorType[FunctionOperatorType["ToInt"] = 49] = "ToInt";
    FunctionOperatorType[FunctionOperatorType["ToLong"] = 50] = "ToLong";
    FunctionOperatorType[FunctionOperatorType["ToFloat"] = 51] = "ToFloat";
    FunctionOperatorType[FunctionOperatorType["ToDouble"] = 52] = "ToDouble";
    FunctionOperatorType[FunctionOperatorType["ToDecimal"] = 53] = "ToDecimal";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeThisYear"] = 54] = "LocalDateTimeThisYear";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeThisMonth"] = 55] = "LocalDateTimeThisMonth";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeLastWeek"] = 56] = "LocalDateTimeLastWeek";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeThisWeek"] = 57] = "LocalDateTimeThisWeek";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeYesterday"] = 58] = "LocalDateTimeYesterday";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeToday"] = 59] = "LocalDateTimeToday";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeNow"] = 60] = "LocalDateTimeNow";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeTomorrow"] = 61] = "LocalDateTimeTomorrow";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeDayAfterTomorrow"] = 62] = "LocalDateTimeDayAfterTomorrow";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeNextWeek"] = 63] = "LocalDateTimeNextWeek";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeTwoWeeksAway"] = 64] = "LocalDateTimeTwoWeeksAway";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeNextMonth"] = 65] = "LocalDateTimeNextMonth";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeNextYear"] = 66] = "LocalDateTimeNextYear";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalBeyondThisYear"] = 67] = "IsOutlookIntervalBeyondThisYear";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalLaterThisYear"] = 68] = "IsOutlookIntervalLaterThisYear";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalLaterThisMonth"] = 69] = "IsOutlookIntervalLaterThisMonth";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalNextWeek"] = 70] = "IsOutlookIntervalNextWeek";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalLaterThisWeek"] = 71] = "IsOutlookIntervalLaterThisWeek";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalTomorrow"] = 72] = "IsOutlookIntervalTomorrow";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalToday"] = 73] = "IsOutlookIntervalToday";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalYesterday"] = 74] = "IsOutlookIntervalYesterday";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalEarlierThisWeek"] = 75] = "IsOutlookIntervalEarlierThisWeek";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalLastWeek"] = 76] = "IsOutlookIntervalLastWeek";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalEarlierThisMonth"] = 77] = "IsOutlookIntervalEarlierThisMonth";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalEarlierThisYear"] = 78] = "IsOutlookIntervalEarlierThisYear";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalPriorThisYear"] = 79] = "IsOutlookIntervalPriorThisYear";
    FunctionOperatorType[FunctionOperatorType["IsLastMonth"] = 80] = "IsLastMonth";
    FunctionOperatorType[FunctionOperatorType["IsLastYear"] = 81] = "IsLastYear";
    FunctionOperatorType[FunctionOperatorType["IsNextMonth"] = 82] = "IsNextMonth";
    FunctionOperatorType[FunctionOperatorType["IsNextYear"] = 83] = "IsNextYear";
    FunctionOperatorType[FunctionOperatorType["IsThisWeek"] = 84] = "IsThisWeek";
    FunctionOperatorType[FunctionOperatorType["IsThisMonth"] = 85] = "IsThisMonth";
    FunctionOperatorType[FunctionOperatorType["IsThisYear"] = 86] = "IsThisYear";
    FunctionOperatorType[FunctionOperatorType["IsJanuary"] = 87] = "IsJanuary";
    FunctionOperatorType[FunctionOperatorType["IsFebruary"] = 88] = "IsFebruary";
    FunctionOperatorType[FunctionOperatorType["IsMarch"] = 89] = "IsMarch";
    FunctionOperatorType[FunctionOperatorType["IsApril"] = 90] = "IsApril";
    FunctionOperatorType[FunctionOperatorType["IsMay"] = 91] = "IsMay";
    FunctionOperatorType[FunctionOperatorType["IsJune"] = 92] = "IsJune";
    FunctionOperatorType[FunctionOperatorType["IsJuly"] = 93] = "IsJuly";
    FunctionOperatorType[FunctionOperatorType["IsAugust"] = 94] = "IsAugust";
    FunctionOperatorType[FunctionOperatorType["IsSeptember"] = 95] = "IsSeptember";
    FunctionOperatorType[FunctionOperatorType["IsOctober"] = 96] = "IsOctober";
    FunctionOperatorType[FunctionOperatorType["IsNovember"] = 97] = "IsNovember";
    FunctionOperatorType[FunctionOperatorType["IsDecember"] = 98] = "IsDecember";
    FunctionOperatorType[FunctionOperatorType["IsSameDay"] = 99] = "IsSameDay";
    FunctionOperatorType[FunctionOperatorType["IsYearToDate"] = 100] = "IsYearToDate";
    FunctionOperatorType[FunctionOperatorType["DateDiffTick"] = 101] = "DateDiffTick";
    FunctionOperatorType[FunctionOperatorType["DateDiffSecond"] = 102] = "DateDiffSecond";
    FunctionOperatorType[FunctionOperatorType["DateDiffMilliSecond"] = 103] = "DateDiffMilliSecond";
    FunctionOperatorType[FunctionOperatorType["DateDiffMinute"] = 104] = "DateDiffMinute";
    FunctionOperatorType[FunctionOperatorType["DateDiffHour"] = 105] = "DateDiffHour";
    FunctionOperatorType[FunctionOperatorType["DateDiffDay"] = 106] = "DateDiffDay";
    FunctionOperatorType[FunctionOperatorType["DateDiffMonth"] = 107] = "DateDiffMonth";
    FunctionOperatorType[FunctionOperatorType["DateDiffYear"] = 108] = "DateDiffYear";
    FunctionOperatorType[FunctionOperatorType["GetDate"] = 109] = "GetDate";
    FunctionOperatorType[FunctionOperatorType["GetMilliSecond"] = 110] = "GetMilliSecond";
    FunctionOperatorType[FunctionOperatorType["GetSecond"] = 111] = "GetSecond";
    FunctionOperatorType[FunctionOperatorType["GetMinute"] = 112] = "GetMinute";
    FunctionOperatorType[FunctionOperatorType["GetHour"] = 113] = "GetHour";
    FunctionOperatorType[FunctionOperatorType["GetDay"] = 114] = "GetDay";
    FunctionOperatorType[FunctionOperatorType["GetMonth"] = 115] = "GetMonth";
    FunctionOperatorType[FunctionOperatorType["GetYear"] = 116] = "GetYear";
    FunctionOperatorType[FunctionOperatorType["GetDayOfWeek"] = 117] = "GetDayOfWeek";
    FunctionOperatorType[FunctionOperatorType["GetDayOfYear"] = 118] = "GetDayOfYear";
    FunctionOperatorType[FunctionOperatorType["GetTimeOfDay"] = 119] = "GetTimeOfDay";
    FunctionOperatorType[FunctionOperatorType["Now"] = 120] = "Now";
    FunctionOperatorType[FunctionOperatorType["UtcNow"] = 121] = "UtcNow";
    FunctionOperatorType[FunctionOperatorType["Today"] = 122] = "Today";
    FunctionOperatorType[FunctionOperatorType["AddTimeSpan"] = 123] = "AddTimeSpan";
    FunctionOperatorType[FunctionOperatorType["AddTicks"] = 124] = "AddTicks";
    FunctionOperatorType[FunctionOperatorType["AddMilliSeconds"] = 125] = "AddMilliSeconds";
    FunctionOperatorType[FunctionOperatorType["AddSeconds"] = 126] = "AddSeconds";
    FunctionOperatorType[FunctionOperatorType["AddMinutes"] = 127] = "AddMinutes";
    FunctionOperatorType[FunctionOperatorType["AddHours"] = 128] = "AddHours";
    FunctionOperatorType[FunctionOperatorType["AddDays"] = 129] = "AddDays";
    FunctionOperatorType[FunctionOperatorType["AddMonths"] = 130] = "AddMonths";
    FunctionOperatorType[FunctionOperatorType["AddYears"] = 131] = "AddYears";
    FunctionOperatorType[FunctionOperatorType["OrderDescToken"] = 132] = "OrderDescToken";
})(FunctionOperatorType = exports.FunctionOperatorType || (exports.FunctionOperatorType = {}));
var FunctionOperator = (function (_super) {
    __extends(FunctionOperator, _super);
    function FunctionOperator(operatorType, operands) {
        var _this = _super.call(this) || this;
        _this.toString = function (reverse) {
            var result = (utils_1.operatorTokens[_this.displayType] || _this.displayType) + '(' + _this.operands.map(function (operand) {
                return operand.toString();
            }).join(', ') + ')';
            return reverse ? 'Not ' + result : result;
        };
        _this.assignLeftPart = function (criteriaOperator) {
            _this.operands = [criteriaOperator.leftPart];
        };
        _this.assignRightPart = function (criteriaOperator) {
            if (criteriaOperator.rightPart.length !== null && criteriaOperator.rightPart.length !== undefined) {
                if (criteriaOperator.rightPart.length) {
                    _this.operands.push(criteriaOperator.rightPart[0]);
                }
                else {
                    _this.operands.push(new value_1.OperandValue());
                }
            }
            else {
                _this.operands.push(criteriaOperator.rightPart);
            }
        };
        _this.operands = [];
        _this.type = 'Function';
        _this.operatorType = operatorType;
        operands = operands || [new criteriaOperator_1.CriteriaOperator()];
        operands.forEach(function (operand) { return _this.operands.push(operand); });
        return _this;
    }
    Object.defineProperty(FunctionOperator.prototype, "leftPart", {
        get: function () {
            return this.operands[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionOperator.prototype, "rightPart", {
        get: function () {
            return this.operands.filter(function (_, index) { return index !== 0; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionOperator.prototype, "displayType", {
        get: function () {
            return FunctionOperatorType[this.operatorType] || this.operatorType.toString();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionOperator.prototype, "enumType", {
        get: function () {
            return FunctionOperatorType;
        },
        enumerable: true,
        configurable: true
    });
    FunctionOperator.prototype.accept = function (visitor) {
        return visitor.visitFunctionOperator
            ? visitor.visitFunctionOperator(this)
            : new FunctionOperator(this.operatorType, this.operands && this.operands.map(function (op) { return op.accept(visitor); }));
    };
    return FunctionOperator;
}(criteriaOperator_1.CriteriaOperator));
exports.FunctionOperator = FunctionOperator;
