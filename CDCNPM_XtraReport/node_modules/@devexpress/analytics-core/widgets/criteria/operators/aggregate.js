/**
* DevExpress Analytics (widgets\criteria\operators\aggregate.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var criteriaOperator_1 = require("./criteriaOperator");
var group_1 = require("./group");
var unary_1 = require("./unary");
var Aggregate;
(function (Aggregate) {
    Aggregate[Aggregate["Count"] = 0] = "Count";
    Aggregate[Aggregate["Exists"] = 1] = "Exists";
    Aggregate[Aggregate["Min"] = 2] = "Min";
    Aggregate[Aggregate["Max"] = 3] = "Max";
    Aggregate[Aggregate["Avg"] = 4] = "Avg";
    Aggregate[Aggregate["Sum"] = 5] = "Sum";
    Aggregate[Aggregate["Single"] = 6] = "Single";
})(Aggregate = exports.Aggregate || (exports.Aggregate = {}));
var AggregateOperand = (function (_super) {
    __extends(AggregateOperand, _super);
    function AggregateOperand(property, aggregatedExpression, aggregateType, condition) {
        var _this = _super.call(this) || this;
        _this.change = function (operationType, item) {
            var operator = null;
            if (operationType.type === group_1.GroupOperatorType) {
                operator = criteriaOperator_1.CriteriaOperator.create(operationType);
                if (operationType.type !== operator.enumType) {
                    operator.leftPart.assignFrom(item);
                }
                else {
                    operator.assignFrom(item);
                }
                _this.condition = operator;
            }
            return operator;
        };
        _this.assignLeftPart = function (criteriaOperator) {
            if (criteriaOperator.leftPart instanceof AggregateOperand) {
                _this.assignFrom(criteriaOperator.leftPart);
            }
            else {
                if (criteriaOperator_1.CriteriaOperator instanceof AggregateOperand) {
                    _this.property = criteriaOperator.property;
                    if (_this.aggregatedExpression && criteriaOperator.aggregatedExpression) {
                        _this.aggregatedExpression = criteriaOperator.aggregatedExpression;
                    }
                    _this.condition = criteriaOperator.property;
                }
                else {
                    _this.property = criteriaOperator.leftPart;
                }
            }
        };
        _this.type = 'Aggregate';
        _this.property = property;
        if (condition instanceof group_1.GroupOperator) {
            _this.condition = condition;
        }
        else {
            if (condition instanceof unary_1.UnaryOperator && condition.operatorType === unary_1.UnaryOperatorType.Not) {
                if (condition.operand instanceof group_1.GroupOperator) {
                    _this.condition = new unary_1.UnaryOperator(unary_1.UnaryOperatorType.Not, condition.operand);
                }
                else {
                    _this.condition = new unary_1.UnaryOperator(unary_1.UnaryOperatorType.Not, new group_1.GroupOperator(group_1.GroupOperatorType.And, condition.operand ? [condition.operand] : []));
                }
            }
            else {
                _this.condition = new group_1.GroupOperator(group_1.GroupOperatorType.And, condition ? [condition] : []);
            }
        }
        _this.operatorType = aggregateType;
        _this.aggregatedExpression = aggregatedExpression;
        return _this;
    }
    Object.defineProperty(AggregateOperand.prototype, "displayType", {
        get: function () {
            return Aggregate[this.operatorType];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AggregateOperand.prototype, "enumType", {
        get: function () {
            return Aggregate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AggregateOperand.prototype, "leftPart", {
        get: function () {
            return this.property;
        },
        enumerable: true,
        configurable: true
    });
    AggregateOperand.prototype.children = function () {
        var operands = [];
        this.condition && operands.push(this.condition);
        this.aggregatedExpression && operands.push(this.aggregatedExpression);
        return operands;
    };
    AggregateOperand.prototype.accept = function (visitor) {
        return visitor.visitAggregateOperand
            ? visitor.visitAggregateOperand(this)
            : new AggregateOperand(this.property && this.property.accept(visitor), this.aggregatedExpression && this.aggregatedExpression.accept(visitor), this.operatorType, this.condition && this.condition.accept(visitor));
    };
    return AggregateOperand;
}(criteriaOperator_1.CriteriaOperator));
exports.AggregateOperand = AggregateOperand;
