/**
* DevExpress Analytics (widgets\criteria\utils.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { CriteriaOperator } from './operators/criteriaOperator';
import { AggregateOperand } from './operators/aggregate';
import { GroupOperator } from './operators/group';
import { OperandProperty } from './operators/property';
import { ConstantValue } from './operators/constant';
import { OperandParameter } from './operators/parameter';
import { JoinOperand } from './operators/join';
import { BetweenOperator } from './operators/between';
import { InOperator } from './operators/in';
import { BinaryOperator } from './operators/binary';
import { UnaryOperator } from './operators/unary';
import { FunctionOperator } from './operators/function';
export interface IPropertyLocation {
    index?: number;
    name?: string;
}
export declare var operatorTokens: {
    'Plus': string;
    'Minus': string;
    'Equal': string;
    'NotEqual': string;
    'Greater': string;
    'Less': string;
    'LessOrEqual': string;
    'GreaterOrEqual': string;
};
export declare function criteriaForEach(operator: CriteriaOperator, callback: (operator: CriteriaOperator, path?: any) => void, path?: string): void;
export interface ICriteriaOperatorVisitor {
    visitGroupOperator?: (element: GroupOperator) => CriteriaOperator;
    visitOperandProperty?: (element: OperandProperty) => CriteriaOperator;
    visitConstantValue?: (element: ConstantValue) => CriteriaOperator;
    visitOperandParameter?: (element: OperandParameter) => CriteriaOperator;
    visitAggregateOperand?: (element: AggregateOperand) => CriteriaOperator;
    visitJoinOperand?: (element: JoinOperand) => CriteriaOperator;
    visitBetweenOperator?: (element: BetweenOperator) => CriteriaOperator;
    visitInOperator?: (element: InOperator) => CriteriaOperator;
    visitBinaryOperator?: (element: BinaryOperator) => CriteriaOperator;
    visitUnaryOperator?: (element: UnaryOperator) => CriteriaOperator;
    visitFunctionOperator?: (element: FunctionOperator) => CriteriaOperator;
}
