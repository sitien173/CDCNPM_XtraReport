/**
* DevExpress Analytics (widgets\ace\_binding.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var _utils_1 = require("../_utils");
var _internal_1 = require("../../serializer/_internal");
var ace_1 = require("ace-builds/src-noconflict/ace");
var _ace_available_1 = require("./_ace-available");
var ext_language_tools_1 = require("ace-builds/src-noconflict/ext-language_tools");
var mode_sql_1 = require("ace-builds/src-noconflict/mode-sql");
var mode_text_1 = require("ace-builds/src-noconflict/mode-text");
var mode_json_1 = require("ace-builds/src-noconflict/mode-json");
var theme_ambiance_1 = require("ace-builds/src-noconflict/theme-ambiance");
var theme_dreamweaver_1 = require("ace-builds/src-noconflict/theme-dreamweaver");
_ace_available_1.aceAvailable(!!ace_1.default);
if (!window['ace'] && _ace_available_1.aceAvailable()) {
    ace_1.default.config.setModuleUrl('ace/ext/language_tools', ext_language_tools_1.default);
    ace_1.default.config.setModuleUrl('ace/mode/sql', mode_sql_1.default);
    ace_1.default.config.setModuleUrl('ace/mode/text', mode_text_1.default);
    ace_1.default.config.setModuleUrl('ace/mode/json', mode_json_1.default);
    ace_1.default.config.setModuleUrl('ace/theme/ambiance', theme_ambiance_1.default);
    ace_1.default.config.setModuleUrl('ace/theme/dreamweaver', theme_dreamweaver_1.default);
}
require("./_ace-mode-doc-comment");
require("./_ace-mode-criteria");
ko.bindingHandlers['dxAceEditor'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var values = valueAccessor(), text = values.value, editorContainer = values.editorContainer, editor, shouldProcessOnChangeEvent = true, _setEditorText = function (editorInstance, text) {
            shouldProcessOnChangeEvent = false;
            editorInstance.getSession().setValue((text && text.toString()) || '');
            editorInstance.clearSelection();
            editorInstance.getSession().getUndoManager().reset();
            shouldProcessOnChangeEvent = true;
        };
        if (ace_1.default) {
            var showGutter = values.options.showGutter != undefined ? values.options.showGutter : true;
            var additionalOptions = values.additionalOptions;
            var langTools = ace_1.default.require('ace/ext/language_tools');
            editor = ace_1.default.edit(element);
            var guid = ko.observable(null);
            var theme = values.theme;
            if (!theme)
                theme = _utils_1.isDarkTheme() ? 'ace/theme/ambiance' : 'ace/theme/dreamweaver';
            editor.setTheme(theme);
            editor.$blockScrolling = Infinity;
            var languageMode = viewModel.languageHelper.getLanguageMode();
            var session = editor.getSession();
            session.gutterRenderer = {
                getWidth: function (session, lastLineNumber, config) {
                    return lastLineNumber.toString().length * config.characterWidth;
                },
                getText: function (session, row) {
                    return row + 1;
                }
            };
            session.setMode(languageMode);
            var onBlur = function () { editor.completer && editor.completer.popup && editor.completer.popup.hide(); }, onChange, onFocus, onChangeAnnotation;
            if (additionalOptions) {
                if (additionalOptions.onChange) {
                    var timer = null;
                    onChange = function (e) {
                        if (timer !== null)
                            clearTimeout(timer);
                        if (shouldProcessOnChangeEvent) {
                            timer = setTimeout(function () {
                                if (text() !== session.getValue() || (session.getAnnotations() || []).some(function (x) { return x.type === 'error'; })) {
                                    additionalOptions.onChange(session);
                                }
                            }, additionalOptions && additionalOptions.changeTimeout || 1000);
                        }
                    };
                    session.on('change', onChange);
                }
                if (additionalOptions.overrideEditorFocus) {
                    editor.focus = function (a, e) {
                        editor.textInput.getElement().focus();
                    };
                }
                if (additionalOptions.onFocus) {
                    onFocus = function () { additionalOptions.onFocus(session); };
                    editor.on('focus', onFocus);
                }
                if (additionalOptions.onBlur) {
                    onBlur = function () {
                        editor.completer && editor.completer.popup && editor.completer.popup.hide();
                        return additionalOptions.onBlur(session);
                    };
                }
                if (additionalOptions.onChangeAnnotation) {
                    onChangeAnnotation = function (a, e) {
                        additionalOptions.onChangeAnnotation(e);
                    };
                    session.on('changeAnnotation', onChangeAnnotation);
                }
            }
            editor.on('blur', onBlur);
            var completers = viewModel.languageHelper.createCompleters(editor, bindingContext, viewModel);
            langTools.setCompleters(completers);
            editor.setOptions(values.options);
            if (additionalOptions && 'setUseWrapMode' in additionalOptions) {
                editor.getSession().setUseWrapMode(additionalOptions.setUseWrapMode);
            }
            if (!showGutter) {
                editor.renderer.setShowGutter(showGutter);
            }
            if (editor.renderer.$gutter) {
                var gutterClassName = editor.renderer.$gutter.className + ' dxd-border-primary dxd-text-primary dxd-back-primary';
                editor.renderer.$gutter.className = gutterClassName;
            }
            var oldMouseMove = editor._defaultHandlers.guttermousemove;
            editor._defaultHandlers.guttermousemove = function (e) {
                var rect = element.getBoundingClientRect();
                e.x = e.x - rect.left;
                e.y = e.y - rect.top;
                oldMouseMove(e);
            };
            if (ko.isSubscribable(text)) {
                var subscription = text.subscribe(function (newText) {
                    if (newText !== session.getValue()) {
                        _setEditorText(editor, newText);
                    }
                    if (additionalOptions && additionalOptions.onValueChange)
                        additionalOptions.onValueChange(editor);
                });
            }
            _setEditorText(editor, ko.unwrap(text));
            if (values.callbacks)
                values.callbacks.focus = function () {
                    setTimeout(function () {
                        editor.textInput.getElement().focus();
                    }, 10);
                };
            _internal_1.addDisposeCallback(element, function () {
                editor.completers && editor.completers.splice(0);
                editor._defaultHandlers.guttermousemove = oldMouseMove;
                subscription.dispose();
                if (values.callbacks)
                    values.callbacks.focus = $.noop;
                completers.forEach(function (x) { return x.dispose && x.dispose(); });
                onBlur && editor.off('blur', onBlur);
                onFocus && editor.off('focus', onFocus);
                onChange && session.off('change', onChange);
                onChangeAnnotation && session.off('changeAnnotation', onChangeAnnotation);
                editor.destroy();
            });
        }
        if (ko.isObservable(editorContainer)) {
            editorContainer(editor);
        }
    }
};
