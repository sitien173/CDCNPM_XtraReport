/**
* DevExpress Analytics (widgets\_searchHighlighting.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var _utils_1 = require("../property-grid/widgets/internal/_utils");
var utils_1 = require("../serializer/utils");
var _internal_1 = require("../serializer/_internal");
function cloneHtmlBinding(data, element, valueAccessor, allBindings, viewModel, bindingContext) {
    _internal_1.addDisposeCallback(element, function () {
        data.dispose();
    });
    setTimeout(function () {
        var isInitialized = false;
        ko.computed({
            read: function () {
                if (!isInitialized && ko.bindingHandlers['html'].init) {
                    ko.bindingHandlers['html'].init(element, function () { return data.content; }, allBindings, viewModel, bindingContext);
                    isInitialized = true;
                }
                if (ko.bindingHandlers['html'].update) {
                    ko.bindingHandlers['html'].update(element, function () {
                        data.update(valueAccessor());
                        return data.content;
                    }, allBindings, viewModel, bindingContext);
                }
            },
            disposeWhenNodeIsRemoved: element
        });
    }, 1);
}
exports.cloneHtmlBinding = cloneHtmlBinding;
var HighlightEngine = (function (_super) {
    __extends(HighlightEngine, _super);
    function HighlightEngine(options) {
        var _this = _super.call(this) || this;
        _this._$spanProtect = $('<span>');
        _this._$spanSearch = $('<span>').addClass('dx-datagrid-search-text');
        _this.content = ko.observable('');
        _this._options = options;
        if (ko.isSubscribable(_this._options.text)) {
            _this._disposables.push(_this._options.text.subscribe(function (newText) {
                _this._update();
            }));
        }
        _this._disposables.push(_this._options.textToSearch.subscribe(function (newFind) {
            _this._update();
        }));
        _this._update();
        return _this;
    }
    HighlightEngine.prototype._update = function () {
        this.content(this._getHighlightContent(ko.unwrap(this._options.text), ko.unwrap(this._options.textToSearch), ko.unwrap(this._options.searchOptions)));
    };
    HighlightEngine.prototype.update = function (options) {
        this._options = options;
        this._update();
    };
    HighlightEngine.prototype._getHighlightContent = function (text, textToSearch, options) {
        var _this = this;
        var searchPattern = textToSearch;
        var result = text;
        if (searchPattern) {
            var match = _utils_1.findMatchesInString(result, searchPattern, options);
            if (match) {
                var newResult = '', curIndex = 0, subString = result;
                match.forEach(function (item, index) {
                    var itemIndex = subString.indexOf(item);
                    var textBeforeMath = result.substr(curIndex, itemIndex);
                    subString = subString.substr(itemIndex + item.length);
                    if (textBeforeMath) {
                        _this._$spanProtect.text(textBeforeMath);
                        newResult += _this._$spanProtect[0].outerHTML;
                    }
                    _this._$spanSearch.text(item);
                    newResult += _this._$spanSearch[0].outerHTML;
                    curIndex = result.length - subString.length;
                    if (index === match.length - 1) {
                        if (subString) {
                            _this._$spanProtect.text(subString);
                            newResult += _this._$spanProtect[0].outerHTML;
                        }
                    }
                });
                return newResult;
            }
        }
        this._$spanProtect.text(result);
        result = this._$spanProtect[0].outerHTML;
        return result;
    };
    return HighlightEngine;
}(utils_1.Disposable));
exports.HighlightEngine = HighlightEngine;
ko.bindingHandlers['searchHighlighting'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        cloneHtmlBinding(new HighlightEngine(valueAccessor()), element, valueAccessor, allBindings, viewModel, bindingContext);
    }
};
