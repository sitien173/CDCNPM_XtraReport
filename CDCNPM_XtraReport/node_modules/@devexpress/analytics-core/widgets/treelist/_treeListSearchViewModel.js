/**
* DevExpress Analytics (widgets\treelist\_treeListSearchViewModel.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var _utils_1 = require("../../property-grid/widgets/internal/_utils");
var utils_1 = require("../../serializer/utils");
var _localization_1 = require("../../property-grid/localization/_localization");
var templateUtils_1 = require("../../property-grid/widgets/templateUtils");
var TreeListSearchOptions = (function () {
    function TreeListSearchOptions() {
        this.globalMatch = true;
        this.canUseRegex = false;
        this.caseSensitive = false;
        this.searchMode = _utils_1.SearchMode.contains;
        this.searchTimeout = 500;
        this.searchExpr = 'displayName';
        this.searchBoxTemplate = 'dx-treelist-searchbox';
    }
    return TreeListSearchOptions;
}());
exports.TreeListSearchOptions = TreeListSearchOptions;
var TreeListSearchViewModel = (function (_super) {
    __extends(TreeListSearchViewModel, _super);
    function TreeListSearchViewModel() {
        var _this = _super.call(this) || this;
        _this._processedNodes = [];
        _this._currentProcess = [];
        _this.searchTimeout = 500;
        _this._roots = [];
        _this.searchPlaceholder = function () { return _localization_1.searchPlaceholder(); };
        var _textToSearch = ko.observable('');
        var timeout = null;
        _this._disposables.push(_this.value = ko.computed({
            read: function () { return _textToSearch(); },
            write: function (newVal) {
                clearTimeout(timeout);
                timeout = setTimeout(function () {
                    _textToSearch(newVal);
                }, _this.searchTimeout);
            }
        }));
        _this._disposables.push(_this.value.subscribe(function (newValue) { return _this.valueChanged(newValue); }));
        return _this;
    }
    TreeListSearchViewModel.createController = function (element, controllers, modelType, templateName) {
        if (modelType === void 0) { modelType = TreeListSearchViewModel; }
        if (templateName === void 0) { templateName = 'dx-treelist-search-panel'; }
        var model = new modelType();
        var $element = $(element);
        var subscriptions = [];
        controllers.forEach(function (controller) {
            if (!controller)
                return;
            controller.root = controller.root || ko.observable();
            subscriptions.push(controller.root.subscribe(function (newRoot) {
                model.addController(newRoot);
                model.valueChanged('');
            }));
        });
        model._disposables.push({
            dispose: function () {
                controllers.forEach(function (controller) {
                    if (controller) {
                        controller.root(null);
                        delete controller.root;
                    }
                });
            }
        });
        var template = templateUtils_1.getTemplate(templateName);
        $element.addClass('dxrd-treelist-search-panel-container').addClass('dxd-border-primary');
        $element.children().remove();
        $element.append(template);
        ko.cleanNode($element.children()[0]);
        ko.applyBindings(model, $element.children()[0]);
        var disposeCallback = function () {
            subscriptions.forEach(function (x) { return x.dispose(); });
            model && model.dispose();
            ko.utils.domNodeDisposal.removeDisposeCallback(element, disposeCallback);
        };
        ko.utils.domNodeDisposal.addDisposeCallback(element, disposeCallback);
    };
    TreeListSearchViewModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.clearProcess();
    };
    TreeListSearchViewModel.prototype.clearProcess = function () {
        this._currentProcess.forEach(function (x) { return x.stop && x.stop(); });
        this._currentProcess = [];
        this._processedNodes = [];
    };
    TreeListSearchViewModel.prototype.valueChanged = function (newValue) {
        var _this = this;
        if (!newValue)
            this._processedNodes.forEach(function (x) { return x.setVisible(true); });
        this.clearProcess();
        this._roots.forEach(function (root) {
            root.treeListController.textToSearch(newValue);
            if (newValue) {
                _this._currentProcess.push(root.walkOnTree(function (node) {
                    var regexResult = _utils_1.findMatchesInString(node.data[root.treeListController.searchOptions.searchExpr], newValue, root.treeListController.searchOptions);
                    _this._processedNodes.push(node);
                    node.setVisible(!!regexResult);
                    regexResult && _this._collapseTreeBranch(node);
                }));
            }
            else {
                root.items.valueHasMutated();
            }
        });
    };
    TreeListSearchViewModel.prototype._collapseTreeBranch = function (node) {
        if (node.parent) {
            if (node.parent.collapsed())
                node.parent.toggleCollapsed();
            this._collapseTreeBranch(node.parent);
        }
    };
    TreeListSearchViewModel.prototype.addController = function (root) {
        this._roots = this._roots.filter(function (a) { return !a.isDisposing; });
        root.treeListController.textToSearch = root.treeListController.textToSearch || ko.observable('');
        if (this._roots.indexOf(root) === -1)
            this._roots.push(root);
        this.searchTimeout = Math.max.apply(Math, this._roots.map(function (x) { return x.treeListController.searchOptions.searchTimeout; })) || 500;
    };
    return TreeListSearchViewModel;
}(utils_1.Disposable));
exports.TreeListSearchViewModel = TreeListSearchViewModel;
