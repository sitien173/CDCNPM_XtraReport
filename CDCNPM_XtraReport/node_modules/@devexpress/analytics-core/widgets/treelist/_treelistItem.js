/**
* DevExpress Analytics (widgets\treelist\_treelistItem.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var utils_1 = require("../../serializer/utils");
var _svgTemplateEngine_1 = require("../../property-grid/widgets/internal/_svgTemplateEngine");
var pathRequest_1 = require("../common/pathRequest");
var _codeResolver_1 = require("../../property-grid/internal/_codeResolver");
var options_1 = require("./options");
var _internal_1 = require("../../serializer/_internal");
exports.maxSearchLevel = _internal_1.createGlobalModuleVariableFunc(5);
exports.treeListEditAction = {
    templateName: 'dx-treelist-edit-action',
    imageClassName: '',
    text: 'Edit',
    clickAction: $.noop,
    displayText: function () { return localization_utils_1.getLocalization('Edit', 'AnalyticsCoreStringId.Group_Edit'); }
};
var DefaultTreeListItemFactory = (function () {
    function DefaultTreeListItemFactory() {
    }
    DefaultTreeListItemFactory.prototype.createRootItem = function (options, path, onItemsVisibilityChanged, rtl) {
        return new TreeListRootItemViewModel(options, path, onItemsVisibilityChanged, rtl);
    };
    DefaultTreeListItemFactory.prototype.createItem = function (options, path, onItemsVisibilityChanged, rtl, resolver) {
        return new TreeListItemViewModel(options, path, onItemsVisibilityChanged, rtl, resolver);
    };
    return DefaultTreeListItemFactory;
}());
exports.DefaultTreeListItemFactory = DefaultTreeListItemFactory;
var TreeListEllipsisButton = (function () {
    function TreeListEllipsisButton(_availableItemsCount, padding, pageSize) {
        this._availableItemsCount = _availableItemsCount;
        this.padding = padding;
        this.pageSize = pageSize;
        this.templateName = 'dx-treelist-item-ellipsis';
        this.collapsed = function () { return true; };
        this.visibleItems = function () { return []; };
        this.text = function () { return localization_utils_1.getLocalization('Show more...', 'AnalyticsCoreStringId.QueryBuilder_Tables_ShowMore'); };
    }
    TreeListEllipsisButton.prototype.renderNext = function () {
        this._availableItemsCount(this._availableItemsCount() + this.pageSize);
    };
    return TreeListEllipsisButton;
}());
exports.TreeListEllipsisButton = TreeListEllipsisButton;
var TreeListItemViewModel = (function (_super) {
    __extends(TreeListItemViewModel, _super);
    function TreeListItemViewModel(options, path, onItemsVisibilityChanged, rtl, resolver) {
        if (path === void 0) { path = []; }
        if (onItemsVisibilityChanged === void 0) { onItemsVisibilityChanged = $.noop; }
        if (rtl === void 0) { rtl = false; }
        if (resolver === void 0) { resolver = new _codeResolver_1.CodeResolver(); }
        var _this = _super.call(this) || this;
        _this.resolver = resolver;
        _this._rtl = false;
        _this._data = ko.observable(null);
        _this._actions = ko.observable([]);
        _this._isVisible = ko.observable(true);
        _this._pageSize = -1;
        _this._actionsSubscription = null;
        _this._iconName = function () { return (ko.unwrap((_this.data && _this.data.icon) || (_this.data && _this.data.specifics)) || 'default').split('.').join('_').toLowerCase(); };
        _this._nodeIsLocked = false;
        _this.level = -1;
        _this.items = ko.observableArray();
        _this.collapsed = ko.observable(true);
        _this.isSelected = ko.observable(false);
        _this.isHovered = ko.observable(false);
        _this.isMultiSelected = ko.observable(false);
        _this._pageSize = options.pageSize || -1;
        _this._path = path;
        _this._rtl = rtl;
        _this._factory = options.factory || new DefaultTreeListItemFactory();
        _this._treeListController = options.treeListController;
        _this._templateName = options.templateName;
        _this._onItemsVisibilityChanged = onItemsVisibilityChanged;
        _this.dragDropHandler = options.treeListController.dragDropHandler;
        _this.getItems = function () {
            if (_this.items().length > 0)
                return $.Deferred().resolve(_this.items()).promise();
            return _this._loadItems(options);
        };
        _this._initPaginate();
        _this.toggleSelected = function (_, event) {
            if (event && (event.shiftKey || event.ctrlKey || event.metaKey) && _this.selectedItems().length > 0 && _this._treeListController.canMultiSelect && _this._treeListController.canMultiSelect(_this)) {
                options.selectedPath('');
                _this._treeListController.multiSelect(_this, event.shiftKey, event.ctrlKey || event.metaKey);
            }
            else if (_this._treeListController.canSelect(_this)) {
                options.treeListController.clickHandler && options.treeListController.clickHandler(_this);
                options.selectedPath(_this.path);
            }
        };
        if (options.treeListController.dblClickHandler) {
            _this.dblClickHandler = function (item) {
                options.treeListController.dblClickHandler && options.treeListController.dblClickHandler(item);
            };
        }
        _this.toggleCollapsed = function () {
            if (_this.hasItems) {
                _this.collapsed(!_this.collapsed.peek());
                if (!_this.collapsed.peek() && _this.items().length === 0) {
                    _this._loadItems(options, options_1.LoadChildItemsForCollapsedNodes()).always(function () { onItemsVisibilityChanged(); });
                }
                else if (options_1.LoadChildItemsForCollapsedNodes()) {
                    _this.items().forEach(function (item) {
                        item._treeListController.hasItems(item.data) && item.items().length === 0 && item._loadItems(options);
                    });
                    onItemsVisibilityChanged();
                }
            }
        };
        _this.nodeImageClass = _this._getNodeImageClassName();
        return _this;
    }
    TreeListItemViewModel.prototype._equal = function (obj1, obj2) {
        var ignore = ['innerActions', 'noDragable', 'dragData'];
        if (obj2 === obj1)
            return true;
        return Object.keys(obj2).filter(function (key) { return ignore.indexOf(key) === -1; }).every(function (key) {
            return obj2[key] === obj1[key];
        });
    };
    TreeListItemViewModel.prototype._getImageClassName = function (showIcon) {
        var _this = this;
        return ko.computed(function () {
            return 'dx-image-fieldlist-'
                + _this._iconName()
                + (!showIcon ? ' dx-treelist-image-empty' : '');
        });
    };
    TreeListItemViewModel.prototype._getImageTemplateName = function () {
        var _this = this;
        return ko.computed(function () {
            var _templateName = 'dxrd-svg-fieldlist-' + _this._iconName();
            return _svgTemplateEngine_1.SvgTemplatesEngine.getExistingTemplate(_templateName);
        });
    };
    TreeListItemViewModel.prototype._getNodeImageClassName = function () {
        var _this = this;
        var imageClassName = ko.observable('dx-collapsing-image');
        return ko.computed({
            read: function () {
                if (!_this.hasItems) {
                    return 'dx-image-leaf-node';
                }
                return _this.collapsed() ? 'dx-collapsing-image' : imageClassName();
            },
            write: function (newValue) {
                imageClassName(newValue);
            }
        });
    };
    TreeListItemViewModel.prototype._createItemsObj = function (items) {
        var obj = {};
        for (var i = 0; i < items.length; i++) {
            obj[items[i].name] = { item: items[i], index: i };
        }
        return obj;
    };
    TreeListItemViewModel.prototype._loadItems = function (options, loadInnerItems) {
        var _this = this;
        if (loadInnerItems === void 0) { loadInnerItems = false; }
        var deferred = $.Deferred();
        if (this._loader) {
            this._loader.dispose();
        }
        this._disposables.reverse().forEach(function (x) { return x.dispose && x.dispose(); });
        this._disposables.splice(0);
        var promise = ko.observable();
        var subscription = promise.subscribe(function (value) {
            if (!value)
                return;
            value.done(function (data) {
                if (_this.isDisposing) {
                    deferred.reject();
                    return;
                }
                var _data = data;
                var items = _this.items.peek();
                var dataObj = _this._createItemsObj(_data);
                var isMutated = false;
                var splicedItems = 0;
                var tempItems = [].concat.apply([], items);
                for (var i = 0; i < tempItems.length; i++) {
                    if (!dataObj[tempItems[i].data.name]) {
                        tempItems[i].dispose();
                        items.splice(i - splicedItems, 1);
                        splicedItems++;
                        isMutated = true;
                    }
                }
                var itemsObj = _this._createItemsObj(items);
                var resorted = false;
                var showIconsForChildItems = !_this._treeListController.showIconsForChildItems || _this._treeListController.showIconsForChildItems(_this);
                var showIconTemplate = _this._treeListController.showIconsForChildItems && _this._treeListController.showIconsForChildItems(_this);
                _data.forEach(function (d, index) {
                    var currentItem = itemsObj[d.name];
                    if (!currentItem) {
                        isMutated = true;
                        var newItem = _this._factory.createItem(options, _this.pathParts, _this._onItemsVisibilityChanged, _this._rtl, _this.resolver);
                        newItem.data = d;
                        newItem.level = _this.level + 1;
                        newItem.parent = _this;
                        newItem.padding = _this._applyPadding(_this._rtl ? 'right' : 'left', 20 * newItem.level + 12);
                        newItem.imageClassName = newItem._getImageClassName(showIconsForChildItems);
                        newItem.imageTemplateName = newItem._getImageTemplateName();
                        newItem.showIcon = showIconTemplate;
                        items.splice(index, 0, newItem);
                        itemsObj[d.name] = { item: newItem, index: index };
                    }
                    else {
                        if (!_this._equal(d, currentItem.item.data))
                            currentItem.item.data = d;
                        if (!resorted)
                            resorted = currentItem.index !== index;
                    }
                });
                if (resorted) {
                    var index = items.reduce(function (acc, x, index) {
                        var max = Math.abs(index - (dataObj[x.data.name] ? dataObj[x.data.name].index : -1));
                        if (!acc || acc.max < max) {
                            return { max: max, index: index };
                        }
                        return acc;
                    }, null).index;
                    var curItem = items[index];
                    items.splice(index, 1);
                    items.splice(dataObj[curItem.data.name] ? dataObj[curItem.data.name].index : -1, 0, curItem);
                    isMutated = true;
                }
                dataObj = null;
                itemsObj = null;
                if (isMutated) {
                    _this.items.valueHasMutated();
                    _this._onItemsChanged();
                }
                if (!_this.collapsed() || loadInnerItems) {
                    _this.items().forEach(function (item) {
                        if (item._treeListController.hasItems(item.data)) {
                            item._loadItems(options);
                        }
                    });
                }
                _this.nodeImageClass(_this.items.peek().some(function (x) { return x.visible; }) ? 'dx-collapsing-image dx-image-expanded' : 'dx-image-leaf-node');
                deferred.resolve(_this.items.peek());
                var selectedPath = options.selectedPath.peek();
                if (selectedPath) {
                    var item2Select = _this.items.peek().filter(function (item) { return selectedPath.indexOf(item.path) === 0; })[0];
                    if (item2Select) {
                        _this._selectItem(item2Select.name + selectedPath.substring(item2Select.path.length));
                    }
                }
            });
        });
        this._disposables.push({
            dispose: function () {
                subscription.dispose();
                promise(null);
            }
        });
        this._disposables.push(this._loader = ko.computed(function () {
            promise(options.itemsProvider.getItems(new pathRequest_1.PathRequest(_this.path, _this.pathParts)));
        }));
        return deferred.promise();
    };
    TreeListItemViewModel.prototype._onItemsChanged = function () { };
    TreeListItemViewModel.prototype._getTemplateName = function () {
        return this._templateName || this.data && this.data.templateName || 'dx-treelist-item';
    };
    TreeListItemViewModel.prototype._selectItem = function (itemPath) {
        var _this = this;
        if (!this.hasItems) {
            return;
        }
        var selectItemDelegate = function () {
            _this._find(itemPath);
            if (_this.collapsed.peek()) {
                _this.toggleCollapsed();
            }
        };
        if (this.items.peek().length === 0) {
            this.getItems().done(function (items) {
                selectItemDelegate();
            });
        }
        else {
            selectItemDelegate();
        }
    };
    TreeListItemViewModel.prototype._find = function (itemPath) {
        var item = itemPath && this.items.peek().filter(function (childItem) {
            return itemPath === childItem.name
                || itemPath.indexOf(childItem.name) === 0 && itemPath[childItem.name.length] === '.';
        })[0];
        if (item) {
            if (itemPath.length > item.name.length) {
                item._selectItem(itemPath.substr(item.name.length + 1));
            }
            else {
                this._treeListController.select(item);
            }
        }
    };
    TreeListItemViewModel.prototype._getItemsWithLock = function () {
        var _this = this;
        var deffered = $.Deferred();
        if (this._nodeIsLocked)
            return deffered.reject().promise();
        this._nodeIsLocked = true;
        this.getItems().done(function (result) {
            _this._nodeIsLocked = false;
            deffered.resolve(result);
        }).fail(function () {
            _this._nodeIsLocked = false;
            deffered.reject();
        });
        return deffered.promise();
    };
    TreeListItemViewModel.prototype._applyPadding = function (position, value) {
        var padding = {};
        padding['padding-' + position] = value;
        return padding;
    };
    TreeListItemViewModel.prototype._initPaginate = function () {
        var _this = this;
        if (this._pageSize === -1)
            return;
        this.maxItemsCount = ko.observable(this._pageSize);
        this.visibleItems = ko.computed(function () {
            if (_this.items().length === 0)
                return [];
            var result = _this.items().filter(function (x) { return x._isVisible.peek(); });
            if (result.length > _this.maxItemsCount()) {
                result = result.slice(0, _this.maxItemsCount());
                result.push(new TreeListEllipsisButton(_this.maxItemsCount, result[0].padding, _this._pageSize));
            }
            return result;
        });
    };
    Object.defineProperty(TreeListItemViewModel.prototype, "hasItems", {
        get: function () {
            if (!this.data) {
                return true;
            }
            var hasItems = this._treeListController.hasItems(this.data);
            return options_1.LoadChildItemsForCollapsedNodes() ?
                hasItems && this.items().some(function (item) { return item.visible; }) :
                hasItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeListItemViewModel.prototype, "data", {
        get: function () {
            return this._data();
        },
        set: function (newVal) {
            var _this = this;
            this._data(newVal);
            this._actionsSubscription && this._actionsSubscription.dispose();
            this._actionsSubscription = ko.computed(function () {
                _this._actions(_this._treeListController && _this._treeListController.getActions ? _this._treeListController.getActions(_this) : []);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeListItemViewModel.prototype, "name", {
        get: function () {
            return ko.unwrap(this.data && this.data.name);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeListItemViewModel.prototype, "path", {
        get: function () {
            return this.pathParts.join('.');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeListItemViewModel.prototype, "pathParts", {
        get: function () {
            if (this.name) {
                return (ko.unwrap(this._path) || []).concat([this.name]);
            }
            else {
                return ko.unwrap(this._path);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeListItemViewModel.prototype, "text", {
        get: function () {
            return this.data && this.data.displayName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeListItemViewModel.prototype, "templateName", {
        get: function () {
            return this._getTemplateName();
        },
        enumerable: true,
        configurable: true
    });
    TreeListItemViewModel.prototype.actionsTemplate = function () {
        return this.data && ko.unwrap(this.data['actionsTemplate']) || 'dx-treelist-item-actions-with-edit';
    };
    TreeListItemViewModel.prototype.treeListEditAction = function () {
        return exports.treeListEditAction;
    };
    Object.defineProperty(TreeListItemViewModel.prototype, "hasContent", {
        get: function () {
            return this.data && this.data['contenttemplate'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeListItemViewModel.prototype, "actions", {
        get: function () {
            return this._actions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeListItemViewModel.prototype, "isDraggable", {
        get: function () {
            if (this.data && this.data['dragData']) {
                return !this.data['dragData'].noDragable;
            }
            if (this._treeListController.isDraggable) {
                return this._treeListController.isDraggable(this);
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeListItemViewModel.prototype, "treeListController", {
        get: function () {
            return this._treeListController;
        },
        enumerable: true,
        configurable: true
    });
    TreeListItemViewModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._actions([]);
        this.visibleItems && this.visibleItems.dispose();
        this._actionsSubscription && this._actionsSubscription.dispose();
        this.disposeObservableArray(this.items);
        this.resetObservableArray(this.items);
        this.parent = null;
    };
    Object.defineProperty(TreeListItemViewModel.prototype, "visible", {
        get: function () {
            if (this.data && this._treeListController.itemsFilter && !this._treeListController.itemsFilter(this.data, this.path))
                return false;
            return this._isVisible();
        },
        enumerable: true,
        configurable: true
    });
    TreeListItemViewModel.prototype.setVisible = function (value) {
        this._isVisible(value);
        if (value && this.parent && !this.parent.visible)
            this.parent.setVisible(true);
    };
    TreeListItemViewModel.prototype.mouseenter = function () {
        this.isHovered(true);
    };
    TreeListItemViewModel.prototype.mouseleave = function () {
        this.isHovered(false);
    };
    TreeListItemViewModel.prototype.selectedItems = function () {
        return this._treeListController.selectedItems && this._treeListController.selectedItems() || [];
    };
    return TreeListItemViewModel;
}(utils_1.Disposable));
exports.TreeListItemViewModel = TreeListItemViewModel;
var TreeListRootItemViewModel = (function (_super) {
    __extends(TreeListRootItemViewModel, _super);
    function TreeListRootItemViewModel(_options, path, onItemsVisibilityChanged, rtl) {
        if (path === void 0) { path = []; }
        if (onItemsVisibilityChanged === void 0) { onItemsVisibilityChanged = $.noop; }
        if (rtl === void 0) { rtl = false; }
        var _this = _super.call(this, _options, path, onItemsVisibilityChanged, rtl) || this;
        _this._options = _options;
        _this._resolver = new _codeResolver_1.CodeResolver();
        _this._selectedPathSubscription = null;
        _this.resolver.done(function () {
            onItemsVisibilityChanged();
        });
        _this._selectedPathSubscription = _options.selectedPath.subscribe(function (newPath) {
            _this._selectItem(!!_this.path ? newPath.substr(_this.path.length + 1) : newPath);
        });
        _this._selectItem(!!_this.path ? _this.path + '.' + _options.selectedPath() : _options.selectedPath());
        return _this;
    }
    TreeListRootItemViewModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._resolver.clear();
        if (this._selectedPathSubscription) {
            this._selectedPathSubscription.dispose();
            this._selectedPathSubscription = null;
        }
    };
    TreeListRootItemViewModel.prototype.walkOnTree = function (walkCallBack) {
        var _this = this;
        this._resolver.clear();
        this._visitNextNode(this, walkCallBack);
        if (this['_pageSize'] != -1)
            this._resolver.doneOnce(function () { return _this.items.valueHasMutated(); });
        return { stop: function () { return _this._resolver.clear(); } };
    };
    TreeListRootItemViewModel.prototype._visitNextNode = function (item, walkCallback) {
        var _this = this;
        if (walkCallback === void 0) { walkCallback = function (_item) { }; }
        if (item.data && !item.data.specifics)
            throw new Error('Specific should be set');
        if (item.level >= exports.maxSearchLevel())
            return;
        var processItemsFunc = null;
        if (item.items().length > 0) {
            processItemsFunc = function () { return item.items().forEach(function (node) {
                walkCallback(node);
                _this._visitNextNode(node, walkCallback);
            }); };
        }
        else if (!item.data || item.treeListController.hasItems(item.data)) {
            processItemsFunc = function () { return item._getItemsWithLock().done(function (result) {
                result.forEach(function (node) {
                    walkCallback(node);
                    _this._visitNextNode(node, walkCallback);
                });
            }); };
        }
        if (processItemsFunc)
            this._resolver.execute(processItemsFunc, 1);
    };
    TreeListRootItemViewModel.prototype._onItemsChanged = function () {
        if (this._options.expandRootItems)
            this.items().forEach(function (item) {
                item.collapsed(false);
            });
    };
    return TreeListRootItemViewModel;
}(TreeListItemViewModel));
exports.TreeListRootItemViewModel = TreeListRootItemViewModel;
