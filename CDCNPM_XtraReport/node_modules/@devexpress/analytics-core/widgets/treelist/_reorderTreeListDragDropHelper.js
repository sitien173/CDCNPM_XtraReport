/**
* DevExpress Analytics (widgets\treelist\_reorderTreeListDragDropHelper.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var rectangle_1 = require("../../core/elements/rectangle");
var _arrayutils_1 = require("../../core/utils/_arrayutils");
var utils_1 = require("../../serializer/utils");
var $ = require("jquery");
var ReorderTreeListDragDropHelper = (function (_super) {
    __extends(ReorderTreeListDragDropHelper, _super);
    function ReorderTreeListDragDropHelper(dragHelperContent) {
        var _this = _super.call(this) || this;
        _this.dragHelperContent = dragHelperContent;
        _this.droppableClassName = 'dxrd-treelist-droppable';
        _this.approveClassName = 'dxrd-drop-approve';
        _this.classDropBefore = 'drop-before';
        _this.classDropAfter = 'drop-after';
        _this.started = false;
        return _this;
    }
    ReorderTreeListDragDropHelper.prototype._getElementViewModel = function (item) {
        return item && item.data && item.data['data'];
    };
    ReorderTreeListDragDropHelper.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._targetElement = null;
        this._target = null;
        this._draggable = null;
    };
    ReorderTreeListDragDropHelper.prototype.isDragToBottom = function () {
        var _this = this;
        return _arrayutils_1.find(this._draggable.parent.items(), function (item) { return item === _this._draggable || item === _this._target; }) === this._draggable;
    };
    ReorderTreeListDragDropHelper.prototype.start = function (draggable) {
        this.started = true;
        this._draggable = draggable;
        this._draggableModel = this._getElementViewModel(draggable);
    };
    ReorderTreeListDragDropHelper.prototype.canDrop = function () {
        return this._draggable !== this._target && this._draggable.parent === this._target.parent;
    };
    ReorderTreeListDragDropHelper.prototype.reorderSiblings = function (isDragToBottom) {
        if (isDragToBottom === void 0) { isDragToBottom = this.isDragToBottom(); }
        var siblings = this.getSiblings();
        if (siblings) {
            var _siblings = siblings.peek();
            var index = _siblings.indexOf(this._draggableModel);
            if (index > -1)
                _siblings.splice(index, 1);
            _siblings.splice(_siblings.indexOf(this._targetModel) + (isDragToBottom ? 1 : 0), 0, this._draggableModel);
            siblings.valueHasMutated();
        }
    };
    ReorderTreeListDragDropHelper.prototype.clearDroppableClasses = function () {
        this._removeClass(this._targetElement);
    };
    ReorderTreeListDragDropHelper.prototype.getDroppablePosition = function () {
        return this.isDragToBottom() ? this.classDropAfter : this.classDropBefore;
    };
    ReorderTreeListDragDropHelper.prototype.drag = function (elementModel, element) {
        this.clearDroppableClasses();
        this._target = elementModel;
        this._targetElement = $(element).closest('.dx-treelist-item').get(0);
        this._targetModel = this._getElementViewModel(this._target);
    };
    ReorderTreeListDragDropHelper.prototype.stop = function () {
        this.clearDroppableClasses();
        this.started = false;
    };
    ReorderTreeListDragDropHelper.prototype.helper = function (draggable, event) {
        var item = draggable;
        var target = $(event.target).closest('.ui-draggable');
        var rect = new rectangle_1.Rectangle(6, 6, null, target.height());
        rect.className = 'dxrd-image-ghost-report';
        this.dragHelperContent.reset();
        this.dragHelperContent.setContent(rect, {
            template: 'dxrd-drag-helper-source-reorder-treelist',
            data: {
                imageClassName: item.imageClassName,
                imageTemplateName: item.imageTemplateName,
                text: item.text
            }
        });
    };
    ReorderTreeListDragDropHelper.prototype.addDroppableClass = function () {
        var className = this.droppableClassName;
        if (this.canDrop()) {
            className = className + ' ' + this.approveClassName + ' ' + this.getDroppablePosition();
        }
        $(this._targetElement).addClass(className);
    };
    ReorderTreeListDragDropHelper.prototype._removeClass = function (target) {
        $(target).removeClass(this.droppableClassName + ' ' + this.approveClassName + ' ' + this.classDropBefore + ' ' + this.classDropAfter);
    };
    return ReorderTreeListDragDropHelper;
}(utils_1.Disposable));
exports.ReorderTreeListDragDropHelper = ReorderTreeListDragDropHelper;
