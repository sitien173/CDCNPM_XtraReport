/**
* DevExpress Analytics (widgets\common\_codeCompletor.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var _functions_1 = require("../expressioneditor/tools/_functions");
var utils_1 = require("../../serializer/utils");
var _utils_1 = require("../_utils");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var pathRequest_1 = require("./pathRequest");
var _expressioneditor_1 = require("../expressioneditor/_expressioneditor");
var _operatorNames_1 = require("../expressioneditor/tools/_operatorNames");
var criteriaOperator_1 = require("../criteria/operators/criteriaOperator");
var CodeCompletor = (function (_super) {
    __extends(CodeCompletor, _super);
    function CodeCompletor(_options) {
        var _this = _super.call(this) || this;
        _this._options = _options;
        _this._contextPath = null;
        _this._isInContext = function () { return _this._contextPath !== null; };
        _this._getPath = function () { return _this._contextPath ? _this._path() + '.' + _this._contextPath : _this._path(); };
        _this.identifierRegexps = [/\./, /\[/];
        _this._fieldListProvider = _options.fieldListProvider;
        _this._path = _options.path;
        _this._editor = _options.editor;
        _this._functions = ko.computed(function () { return ko.unwrap(_options.functions) || _functions_1.functionDisplay(); });
        _this._rootItems = _options.rootItems || [{ name: 'Parameters', needPrefix: true }];
        _this._disposables.push(_this._functions);
        return _this;
    }
    CodeCompletor.prototype._previousSymbol = function () {
        var cursorPosition = this._editor.getCursorPosition();
        return this._editor.session.getLine(cursorPosition.row)[cursorPosition.column - 1];
    };
    CodeCompletor.prototype.beforeInsertMatch = function (editor, token, parentPrefix) {
        var cursorPosition = editor.getCursorPosition();
        if (parentPrefix === 'Parameters.') {
            token = token || !this['_isInContext']() && editor.session.getTokenAt(cursorPosition.row, cursorPosition.column);
            if (token) {
                if ((token.type === 'support.variable.other' || token.type === 'support.function')) {
                    editor.session.remove({
                        start: { column: token.start - 1 || 0, row: cursorPosition.row },
                        end: { column: Math.max(token.start + token.value.length || 0, cursorPosition.column), row: cursorPosition.row }
                    });
                }
                else if (token.type === 'support.variable.parameter') {
                    editor.session.remove({
                        start: { column: token.start || 0, row: cursorPosition.row },
                        end: { column: Math.max(token.start + token.value.length + 1 || 0, cursorPosition.column), row: cursorPosition.row }
                    });
                }
                else if (token.type === 'text' && token.value[token.value.length - 1] === '?') {
                    editor.session.remove({
                        start: { column: token.start + token.value.length - 1 || 0, row: cursorPosition.row },
                        end: { column: token.start + token.value.length || 0, row: cursorPosition.row },
                    });
                }
            }
        }
        else {
            token = token || editor.session.getTokenAt(cursorPosition.row, cursorPosition.column);
            if (!token)
                return;
            var endColumn = null;
            if (token.type === 'support.variable.other' || token.type === 'support.function') {
                endColumn = Math.max(token.start + token.value.length || 0, cursorPosition.column);
            }
            else if (token.type === 'support.context.start' && cursorPosition.column < token.start + token.value.length) {
                endColumn = token.start + token.value.length - 1 || 0;
            }
            if (endColumn !== null)
                editor.session.remove({
                    start: { column: token.start || 0, row: cursorPosition.row },
                    end: { column: endColumn, row: cursorPosition.row }
                });
        }
    };
    CodeCompletor.prototype.insertMatch = function (editor, parentPrefix, fieldName) {
        if (parentPrefix === 'Parameters.') {
            editor.insert('?' + fieldName);
        }
        else {
            editor.insert('[' + (parentPrefix || '') + fieldName + ']');
        }
    };
    CodeCompletor.prototype.generateFieldDisplayName = function (parentPrefix, displayName) {
        if (parentPrefix === 'Parameters.') {
            return '?' + displayName;
        }
        return '[' + displayName + ']';
    };
    CodeCompletor.prototype._convertDataMemberInfoToCompletions = function (fields, token, parentPrefix) {
        var _this = this;
        if (parentPrefix === void 0) { parentPrefix = ''; }
        return (fields || []).map(function (field) {
            var displayName = _this.generateFieldDisplayName(parentPrefix, field.displayName);
            return {
                caption: field.displayName || field.name,
                snippet: displayName,
                meta: _utils_1.isList(field) && localization_utils_1.getLocalization('list', 'DxDesignerStringId.CodeCompletion_List') || localization_utils_1.getLocalization('field', 'DxDesignerStringId.CodeCompletion_Field'),
                score: _utils_1.isList(field) && 200 || 100,
                completer: {
                    insertMatch: function (editor, data) {
                        _this.beforeInsertMatch(editor, token, parentPrefix);
                        _this.insertMatch(editor, parentPrefix, _this._options.getRealExpression ? (field.displayName || field.name) : field.name);
                    }
                }
            };
        });
    };
    CodeCompletor.prototype._combinePath = function (parentPrefix) {
        var path = this._getPath();
        if (parentPrefix) {
            var rootItem = this._rootItems.filter(function (item) { return parentPrefix.indexOf(item.name) === 0; })[0];
            if (rootItem && rootItem.rootPath)
                path = [rootItem.rootPath, parentPrefix].join('.');
            else
                path = [path, parentPrefix].join('.');
        }
        return path;
    };
    CodeCompletor.prototype._getParentPrefix = function (token) {
        var position = this._editor.getCursorPosition().column - token.start - 1;
        var dotIndex = token.value.lastIndexOf('.', position);
        var closeIndex = token.value.lastIndexOf(']', position);
        dotIndex = Math.max(closeIndex, dotIndex);
        var startIndex = token.type === 'support.variable.other' || token.type === 'support.context.start' ? 1 : 0;
        var parentPrefix = token.value.substring(startIndex, dotIndex);
        if (parentPrefix[0] === '[')
            parentPrefix = parentPrefix.substr(1);
        if (parentPrefix[parentPrefix.length - 1] === ']')
            parentPrefix = parentPrefix.substring(0, parentPrefix.length - 1);
        return parentPrefix;
    };
    CodeCompletor.prototype._getRealPath = function (path) {
        var pathArray = path.split('.');
        var $deferred = $.Deferred();
        if (this._options.getRealExpression) {
            this._options.getRealExpression(pathArray[0], this.generateFieldDisplayName(null, pathArray.splice(1).join('.'))).done(function (result) {
                result = result.slice(1, result.length - 1);
                $deferred.resolve(result && [pathArray[0], result].join('.') || pathArray[0]);
            }).fail(function () { $deferred.resolve(path); });
        }
        else {
            $deferred.resolve(path);
        }
        return $deferred.promise();
    };
    CodeCompletor.prototype._getFields = function (token, completions, ignorePrefix) {
        var _this = this;
        if (token === void 0) { token = null; }
        if (completions === void 0) { completions = []; }
        if (ignorePrefix === void 0) { ignorePrefix = false; }
        var $deferred = $.Deferred();
        var parentPrefix = undefined;
        if (token && (token.type === 'support.variable.other' || token.type === 'support.function' || token.type === 'support.context.start')) {
            parentPrefix = this._getParentPrefix(token);
        }
        this._getRealPath(this._combinePath(parentPrefix)).done(function (path) {
            var $fields = ko.unwrap(_this._fieldListProvider).getItems(new pathRequest_1.PathRequest(path))
                .done(function (fields) {
                completions.push.apply(completions, _this._convertDataMemberInfoToCompletions(CodeCompletor._cleanupFields(fields), token, ignorePrefix ? null : parentPrefix && parentPrefix + '.'));
            });
            var $deferreds = [$fields];
            var rootPathRequests = [];
            if (!parentPrefix) {
                _this._rootItems.forEach(function (item) {
                    var path = item.rootPath || item.name;
                    if (rootPathRequests.indexOf(path) === -1) {
                        rootPathRequests.push(path);
                        $deferreds.push(ko.unwrap(_this._fieldListProvider).getItems(new pathRequest_1.PathRequest(path))
                            .done(function (fields) {
                            _this._processFields($deferreds, fields, completions, path, token, item.needPrefix ? item.name + '.' : '', true);
                        }));
                    }
                });
            }
            $.when($deferreds).always(function () { $deferred.resolve(completions); });
        });
        return $deferred.promise();
    };
    CodeCompletor._cleanupFields = function (fields) {
        if (fields === void 0) { fields = []; }
        return fields.filter(function (x) { return x.specifics !== 'parameters' && x.specifics !== 'none'; });
    };
    CodeCompletor.prototype._processFields = function ($deferreds, fields, completions, path, token, parentPrefix, needCleanup) {
        var _this = this;
        if (parentPrefix === void 0) { parentPrefix = ''; }
        if (needCleanup === void 0) { needCleanup = false; }
        var pushToCompletions = function (fields) {
            completions.push.apply(completions, _this._convertDataMemberInfoToCompletions(needCleanup ? CodeCompletor._cleanupFields(fields) : fields, token, parentPrefix));
        };
        fields.forEach(function (item) {
            if (item.specifics === _expressioneditor_1.RangeSpecific && _utils_1.isList(item)) {
                $deferreds.push(ko.unwrap(_this._fieldListProvider).getItems(new pathRequest_1.PathRequest(path + '.' + item.name))
                    .done(function (subFields) {
                    pushToCompletions(subFields);
                })
                    .fail(function () {
                    pushToCompletions([item]);
                }));
            }
            else {
                pushToCompletions([item]);
            }
        });
    };
    CodeCompletor.prototype.getFunctionsCompletions = function () {
        var functions = [];
        var functionsWithoutAggregates = ko.unwrap(this._functions).filter(function (fnDisplay) { return fnDisplay.category !== 'Aggregate'; });
        functionsWithoutAggregates.forEach(function (fnDisplay) {
            Object.keys(fnDisplay.items).forEach(function (fnKey) {
                if (fnDisplay.items[fnKey]) {
                    functions.push(createFunctionCompletion(fnDisplay.items[fnKey][0], fnKey));
                }
            });
        });
        return functions;
    };
    CodeCompletor.prototype.getAggregateCompletions = function () {
        var functions = [];
        var aggregates = ko.unwrap(this._functions).filter(function (fnDisplay) { return fnDisplay.category === 'Aggregate'; })[0];
        if (aggregates)
            Object.keys(aggregates.items).forEach(function (fnKey) {
                if (aggregates.items[fnKey]) {
                    functions.push(createFunctionCompletion(aggregates.items[fnKey][0], fnKey, fnKey + '()'));
                }
            });
        return functions;
    };
    CodeCompletor.prototype.getOperatorCompletions = function (prefix) {
        return _operatorNames_1.operatorNames.map(function (operator) {
            return { caption: operator.text, snippet: prefix + operator.text, meta: localization_utils_1.getLocalization('operator', 'DxDesignerStringId.CodeCompletion_Operator') };
        });
    };
    CodeCompletor.prototype._addFunctions = function (completions) {
        completions.push.apply(completions, this.getFunctionsCompletions());
    };
    CodeCompletor.prototype._addAggregates = function (completions) {
        completions.push.apply(completions, this.getAggregateCompletions());
    };
    CodeCompletor.prototype._addOperators = function (completions, text) {
        var prefix = /\s/.test(text[text.length - 1]) ? '' : ' ';
        completions.push.apply(completions, this.getOperatorCompletions(prefix));
    };
    CodeCompletor.prototype._addParameterOperators = function (completions, token) {
        var _this = this;
        var $deferred = $.Deferred();
        var $parametersPromises = [];
        var paramPath = 'Parameters';
        $parametersPromises.push(ko.unwrap(this['_fieldListProvider']).getItems(new pathRequest_1.PathRequest(paramPath))
            .done(function (fields) {
            _this._processFields($parametersPromises, fields, completions, paramPath, token, paramPath + '.');
        }));
        $.when($parametersPromises).always(function () { $deferred.resolve(completions); });
        return $deferred.promise();
    };
    CodeCompletor.prototype._getOperands = function (token) {
        if (token === void 0) { token = null; }
        var result = [];
        this._addFunctions(result);
        return this._getFields(token, result);
    };
    CodeCompletor.prototype._getOperandsOrOperators = function (token, text, completions) {
        var exceptionInfo;
        try {
            criteriaOperator_1.CriteriaOperator.parse(text);
        }
        catch (exception) {
            exceptionInfo = exception.hash;
        }
        var trimmedText = text.trim();
        var lastNonSpaceSymbol = trimmedText[trimmedText.length - 1];
        if (lastNonSpaceSymbol === '?' && text[text.length - 1] !== ' ') {
            this._addParameterOperators(completions, token);
        }
        else if (!exceptionInfo && trimmedText || (lastNonSpaceSymbol === ']' || lastNonSpaceSymbol === ')')) {
            this._addOperators(completions, text);
        }
        else {
            return this._getOperands();
        }
    };
    CodeCompletor.prototype._findStartContextTokenPosition = function (tokens, index) {
        var blocks = 0;
        var path = [];
        for (var i = index; i > -1; i--) {
            if (tokens[i].type === 'support.context.end') {
                blocks++;
            }
            else if (tokens[i].type === 'support.context.start') {
                if (blocks > 0)
                    blocks--;
                else
                    return i;
            }
        }
    };
    CodeCompletor.prototype._findOpenedStartContext = function (tokens, index) {
        var openedContextIndexes = [];
        var contextItems = tokens.filter(function (token, tokenIndex) { return (token.type === 'support.context.start' || token.type === 'support.context.end') && tokenIndex < index; });
        for (var i = 0; i < contextItems.length; i++) {
            if (contextItems[i].type === 'support.context.start') {
                openedContextIndexes.push(tokens.indexOf(contextItems[i]));
            }
            else {
                openedContextIndexes.pop();
            }
        }
        return openedContextIndexes;
    };
    CodeCompletor.prototype._findOpenedAggregates = function (tokens, index) {
        var openedAggregatesIndexes = [];
        var aggregates = tokens.filter(function (token, tokenIndex) { return token.type === 'support.other.aggregate' && tokenIndex < index; });
        if (aggregates.length > 0) {
            var currentToken = tokens[index];
            var currentCursorPosition = this._editor.getCursorPosition().column - (currentToken && currentToken.start || 0);
            for (var i = aggregates.length - 1; i > -1; i--) {
                var aggregateIndex = tokens.indexOf(aggregates[i]);
                var openBrace = 0;
                var closeBrace = 0;
                var isClosedAggregate = false;
                if (aggregateIndex + 1 === index && tokens[aggregateIndex + 1].value.substr(0, currentCursorPosition).indexOf('()') !== -1 ||
                    aggregateIndex + 1 < index && tokens[aggregateIndex + 1].value.indexOf('()') !== -1) {
                    isClosedAggregate = true;
                    index = aggregateIndex;
                    continue;
                }
                for (var j = aggregateIndex; j < index; j++) {
                    if (tokens[j].value.trim() === '(') {
                        openBrace++;
                    }
                    else if (tokens[j].value.trim() === ')') {
                        closeBrace++;
                    }
                    if (openBrace === closeBrace && openBrace !== 0) {
                        isClosedAggregate = true;
                        break;
                    }
                }
                if (!isClosedAggregate)
                    openedAggregatesIndexes.splice(0, 0, aggregateIndex);
                index = aggregateIndex;
            }
        }
        return openedAggregatesIndexes;
    };
    CodeCompletor.prototype._getContextPath = function (tokens, currentPosition) {
        var path = [];
        var openedAggregatePositions = this._findOpenedAggregates(tokens, currentPosition);
        var openedContextPositions = this._findOpenedStartContext(tokens, currentPosition);
        var contextPath = openedContextPositions.concat.apply(openedContextPositions, openedAggregatePositions).sort(function (a, b) { return a - b; });
        if (contextPath.length > 0) {
            for (var i = 0; i < contextPath.length; i++) {
                if (tokens[contextPath[i]].type === 'support.other.aggregate') {
                    if (tokens[contextPath[i] - 1].type === 'support.context.end') {
                        var startContextToken = this._findStartContextTokenPosition(tokens, contextPath[i] - 2);
                        var member = trimBrackets(tokens[startContextToken].value.match(/^\[(?:[^\]\)])*\]/)[0]);
                        path.push(member);
                    }
                    else if (tokens[contextPath[i] - 1].type === 'support.variable.other') {
                        path.push(trimBrackets(tokens[contextPath[i] - 1].value));
                    }
                }
                else {
                    var member = trimBrackets(tokens[contextPath[i]].value.match(/^\[(?:[^\]\)])*\]/)[0]);
                    path.push(member);
                }
            }
        }
        return path.filter(function (x) { return !!x; }).join('.');
    };
    CodeCompletor.prototype._getCompletions = function (editor, session, pos, prefix) {
        var $deferred;
        var completions = [];
        var currentToken = session.getTokenAt(pos.row, pos.column);
        var text = editor.session.getLine(pos.row).substring(0, pos.column);
        var tokens = session.getTokens(pos.row);
        var currentTokenIndex = currentToken ? currentToken.index : -1;
        this._contextPath = this._getContextPath(tokens, currentTokenIndex);
        if (!currentToken) {
            $deferred = this._getOperands();
        }
        else if (currentToken.type === 'support.context.start') {
            var ignorePrefix = this._editor.getCursorPosition().column - currentToken.start === currentToken.value.length;
            if (ignorePrefix) {
                var functions = [];
                this._addFunctions(functions);
            }
            $deferred = this._getFields(currentToken, functions, ignorePrefix);
        }
        else if (currentToken.type === 'string.quoted.single') {
        }
        else if (currentToken.type.indexOf('support.variable') === 0) {
            $deferred = this._getFields(currentToken);
        }
        else if (currentToken.type === 'support.function') {
            $deferred = this.defaultProcess(currentToken, text.substring(0, currentToken.start), completions);
        }
        else if (currentToken.type === 'support.other.aggregate') {
            var previousToken = tokens[currentTokenIndex - 1];
            this._addAggregates(completions);
            if (previousToken && trimBrackets(previousToken.value).trim()) {
                $deferred = this._getFields({
                    start: (currentToken.start - (previousToken.value || '').length) || 0,
                    value: previousToken.value + currentToken.value,
                    type: 'support.function'
                }, completions);
            }
        }
        else {
            if (!(currentToken.type.indexOf('comment') === 0)) {
                $deferred = this.defaultProcess(currentToken, text, completions);
            }
        }
        return $deferred ? $deferred.promise() : $.Deferred().resolve(completions).promise();
    };
    CodeCompletor.prototype.defaultProcess = function (token, text, completions) {
        return this._getOperandsOrOperators(token, text, completions);
    };
    CodeCompletor.prototype.getCompletions = function (aceEditor, session, pos, prefix, callback) {
        this._getCompletions(aceEditor, session, pos, prefix).done(function (completions) {
            callback(null, completions);
        });
    };
    CodeCompletor.prototype.getDocTooltip = function (item) {
        if (item.tooltip && !item.docHTML) {
            item.docHTML = [
                item.tooltip
            ].join('');
        }
    };
    return CodeCompletor;
}(utils_1.Disposable));
exports.CodeCompletor = CodeCompletor;
function createFunctionCompletion(fnInfo, name, insertValue) {
    if (insertValue === void 0) { insertValue = null; }
    var insertValue = insertValue || fnInfo.text;
    return {
        caption: name,
        snippet: insertValue,
        meta: localization_utils_1.getLocalization('function', 'DxDesignerStringId.CodeCompletion_Function'),
        tooltip: fnInfo.description || localization_utils_1.getLocalization(fnInfo.text, fnInfo.descriptionStringId) || null,
        score: 10,
        completer: {
            insertMatch: function (editor, data) {
                var completions = editor.completer.completions;
                if (completions.filterText) {
                    var ranges = editor.selection.getAllRanges();
                    for (var i = 0, range; range = ranges[i]; i++) {
                        range.start.column -= completions.filterText.length;
                        editor.session.remove(range);
                    }
                }
                if (insertValue.substr(0, 3) === '[].') {
                    var ranges = editor.selection.getAllRanges();
                    for (var i = 0, range; range = ranges[i]; i++) {
                        range.start.column -= 2;
                        if (editor.session.getTextRange(range) === '].')
                            insertValue = insertValue.substr(3);
                    }
                }
                editor.insert(insertValue);
                _utils_1.setCursorInFunctionParameter(fnInfo.paramCount, editor, insertValue);
            }
        }
    };
}
exports.createFunctionCompletion = createFunctionCompletion;
function trimBrackets(value) {
    return value.substring(value[0] === '[' ? 1 : 0, value[value.length - 1] === ']' ? value.length - 1 : value.length);
}
exports.trimBrackets = trimBrackets;
