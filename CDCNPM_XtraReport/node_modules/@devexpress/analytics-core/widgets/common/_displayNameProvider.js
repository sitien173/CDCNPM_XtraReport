/**
* DevExpress Analytics (widgets\common\_displayNameProvider.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var criteriaOperator_1 = require("../criteria/operators/criteriaOperator");
var property_1 = require("../criteria/operators/property");
var _serializer_1 = require("../filtereditor/helpers/_serializer");
var utils_1 = require("../criteria/utils");
var DisplayExpressionConverter = (function () {
    function DisplayExpressionConverter(displayNameProvider) {
        this.displayNameProvider = displayNameProvider;
    }
    DisplayExpressionConverter.prototype._replaceNames = function (path, expression, getDisplayExpression) {
        var _this = this;
        var def = $.Deferred();
        if (!expression)
            return def.resolve('').promise();
        try {
            var expressionCriteria = criteriaOperator_1.CriteriaOperator.parse(expression, true);
        }
        catch (e) {
            return def.reject().promise();
        }
        var requests = [];
        var result = [];
        var serializer = new _serializer_1.FilterEditorSerializer();
        utils_1.criteriaForEach(expressionCriteria, function (operator, innerPath) {
            if (operator instanceof property_1.OperandProperty) {
                var isContainsParentRelationshipTraversalOperator = operator.propertyName.indexOf('^.') === 0;
                var propertyName = isContainsParentRelationshipTraversalOperator ? operator.propertyName.substring(2) : operator.propertyName;
                propertyName = innerPath ? [innerPath, propertyName].join('.') : propertyName;
                var request = getDisplayExpression ? _this.displayNameProvider.getDisplayNameByPath(path, propertyName) :
                    _this.displayNameProvider.getRealName(path, propertyName);
                requests.push(request.done(function (data) {
                    var convertedName = isContainsParentRelationshipTraversalOperator ? '^.' + data : data;
                    convertedName = innerPath ? convertedName.split('.').slice(innerPath.split('.').length).join('.') : convertedName;
                    result.push({
                        operand: operator,
                        convertedName: convertedName
                    });
                }));
            }
        });
        if (requests.length === 0) {
            def.resolve(expression);
        }
        else {
            var processedRequestsCount = 0;
            var onAlways = function () {
                if (++processedRequestsCount < requests.length)
                    return;
                var lines = expression.split('\n');
                for (var i = 0; i < lines.length; i++) {
                    var operands = result.filter(function (value) { return value.operand.startPosition.line === i; }).sort(function (a, b) {
                        return a.operand.startPosition.column - b.operand.startPosition.column;
                    });
                    for (var j = 0, delta = 0; j < operands.length; j++) {
                        var column = operands[j].operand.startPosition.column;
                        var propertyName = operands[j].operand.propertyName;
                        var deltaName = 0;
                        if (operands[j].operand.originalPropertyLength !== propertyName.length) {
                            deltaName = Math.max(0, operands[j].operand.originalPropertyLength - serializer.serialize(operands[j].operand, false).length);
                        }
                        var convertedName = operands[j].convertedName;
                        if (!propertyName || column < 0)
                            continue;
                        lines[i] = lines[i].substring(0, column + delta) + convertedName + lines[i].substring(column + propertyName.length + deltaName + delta);
                        delta += convertedName.length - propertyName.length - deltaName;
                    }
                }
                def.resolve(lines.join('\n'));
            };
            requests.forEach(function (r) { return r.always(onAlways); });
        }
        return def.promise();
    };
    DisplayExpressionConverter.prototype.toDisplayExpression = function (path, expression) {
        return this._replaceNames(path, expression, true);
    };
    DisplayExpressionConverter.prototype.toRealExpression = function (path, expression) {
        return this._replaceNames(path, expression, false);
    };
    return DisplayExpressionConverter;
}());
exports.DisplayExpressionConverter = DisplayExpressionConverter;
