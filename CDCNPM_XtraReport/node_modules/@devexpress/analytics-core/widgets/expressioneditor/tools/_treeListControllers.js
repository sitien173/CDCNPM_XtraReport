/**
* DevExpress Analytics (widgets\expressioneditor\tools\_treeListControllers.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var _treelistController_1 = require("../../treelist/_treelistController");
var ExpressionEditorTreeListController = (function (_super) {
    __extends(ExpressionEditorTreeListController, _super);
    function ExpressionEditorTreeListController(fieldName, putSelectionHandler, selectionHandler) {
        var _this = _super.call(this) || this;
        _this.fieldName = fieldName;
        _this.putSelectionHandler = putSelectionHandler;
        _this.selectionHandler = selectionHandler;
        return _this;
    }
    ExpressionEditorTreeListController.prototype.itemsFilter = function (item) {
        return item.specifics !== 'none' && item.name !== 'ReportItems';
    };
    ExpressionEditorTreeListController.prototype.select = function (value) {
        if (this.selectionHandler)
            this.selectionHandler(value);
        else
            _super.prototype.select.call(this, value);
    };
    ExpressionEditorTreeListController.prototype.getActions = function (item) {
        var _this = this;
        return [{ clickAction: function (element) { return _this.putSelectionHandler(item, $(element)); } }];
    };
    ExpressionEditorTreeListController.prototype.canSelect = function (value) {
        return true;
    };
    return ExpressionEditorTreeListController;
}(_treelistController_1.TreeListController));
exports.ExpressionEditorTreeListController = ExpressionEditorTreeListController;
var ExpressionEditorParametersTreeListController = (function (_super) {
    __extends(ExpressionEditorParametersTreeListController, _super);
    function ExpressionEditorParametersTreeListController(customFilter, putSelectionHandler, selectionHandler) {
        var _this = _super.call(this) || this;
        _this.customFilter = customFilter;
        _this.putSelectionHandler = putSelectionHandler;
        _this.selectionHandler = selectionHandler;
        return _this;
    }
    ExpressionEditorParametersTreeListController.prototype.itemsFilter = function (item) {
        return item.specifics !== 'none' && (!this.customFilter || this.customFilter(item));
    };
    ExpressionEditorParametersTreeListController.prototype.select = function (value) {
        this.selectionHandler(value);
    };
    ExpressionEditorParametersTreeListController.prototype.getActions = function (item) {
        var _this = this;
        return [{
                clickAction: function (element) {
                    if (item && !item.hasItems)
                        _this.putSelectionHandler(item.path, $(element));
                }
            }];
    };
    ExpressionEditorParametersTreeListController.prototype.canSelect = function (value) {
        return true;
    };
    return ExpressionEditorParametersTreeListController;
}(_treelistController_1.TreeListController));
exports.ExpressionEditorParametersTreeListController = ExpressionEditorParametersTreeListController;
