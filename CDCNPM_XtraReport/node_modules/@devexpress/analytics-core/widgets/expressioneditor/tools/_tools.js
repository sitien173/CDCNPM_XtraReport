/**
* DevExpress Analytics (widgets\expressioneditor\tools\_tools.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../../serializer/utils");
var _localization_1 = require("../../../property-grid/localization/_localization");
var _operatorNames_1 = require("./_operatorNames");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var _expressioneditor_1 = require("../_expressioneditor");
var _utils_1 = require("../../../property-grid/widgets/internal/_utils");
var _functions_1 = require("./_functions");
var Tools = (function (_super) {
    __extends(Tools, _super);
    function Tools(onClick, parametersOptions, options, fieldListOptions) {
        var _this = _super.call(this) || this;
        _this.searchPlaceholder = function () { return _localization_1.searchPlaceholder(); };
        _this._categories = ko.observableArray([]);
        _this.toolBox = [];
        _this.description = ko.observable();
        _this._defaultClick = onClick;
        _operatorNames_1.operatorNames.filter(function (item) { return !!item.descriptionStringId; }).forEach(function (item) { return _this._initDescription(item); });
        var functionGroups = ko.computed(function () {
            return options() && ko.unwrap(options().functions) || _functions_1.functionDisplay();
        }), functions = ko.computed(function () {
            return functionGroups().map(function (funtionGroup) {
                return _this._createFunctionsCategoryItem(funtionGroup.items, localization_utils_1.getLocalization(funtionGroup.display, funtionGroup.localizationId));
            });
        }), createDefaultCategories = function () {
            return [
                _this._createFieldsCategory(fieldListOptions, parametersOptions),
                _this._createConstantCategory(),
                _this._createFunctionsCategory(functions),
                _this._createOperatorsCategory(_operatorNames_1.operatorNames)
            ];
        }, selectedContent = ko.observable(null), resetCategoriesSelection = function () {
            var firstItem = _this._categories()[0].content;
            selectedContent() && selectedContent().isSelected(false);
            selectedContent(firstItem);
            firstItem.isSelected(true);
        }, updateCategories = function (newOptions) {
            _this._disposeCategories();
            var defaultCategories = createDefaultCategories();
            newOptions && newOptions.customizeCategories && newOptions.customizeCategories(_this, defaultCategories, onClick);
            _this._categories(defaultCategories);
            resetCategoriesSelection();
        };
        _this.resetCategoriesSelection = resetCategoriesSelection;
        [functionGroups, functions].forEach(function (x) { return _this._disposables.push(x); });
        _this._disposables.push(options.subscribe(function (newOptions) {
            updateCategories(newOptions);
        }));
        updateCategories(options());
        _this._disposables.push(_this.showDescription = ko.computed(function () { return selectedContent() && selectedContent().showDescription; }));
        _this.toolBox = [
            _this._generateTab(_this._categories, 'dx-expressioneditor-categories', '170px', function (item) {
                if (item.data && item.data.selectedItem && item.data.selectedItem() && item.data.items.indexOf(item.data.selectedItem()) !== -1) {
                    var contentItem = item.data.selectedItem();
                    _this.description(_this._localizedExpressionEditorItem(contentItem));
                }
                else {
                    _this.description(undefined);
                }
                if (selectedContent() === item)
                    return;
                selectedContent().isSelected(false);
                item.isSelected(true);
                selectedContent(item);
            }),
            _this._generateTab(selectedContent, 'dx-expressioneditor-selectedcontent', ko.computed(function () { return _this.showDescription() ? '248px' : '436px'; }), function (item) { _this.description(_this._localizedExpressionEditorItem(item)); }, _this._defaultClick),
            _this._generateTab(_this.description, 'dx-expressioneditor-description', '184px', undefined, undefined, _this.showDescription)
        ];
        return _this;
    }
    Tools.prototype._generateTab = function (content, templateName, width, click, dblclick, visible) {
        if (templateName === void 0) { templateName = null; }
        return {
            templateName: templateName,
            width: width || '30%',
            content: content,
            click: click,
            dblclick: dblclick,
            visible: visible || true
        };
    };
    Tools.prototype._localizedExpressionEditorItem = function (item) {
        return item.descriptionStringId ? localization_utils_1.getLocalization(item.text, item.descriptionStringId) : item.description ? item.description : item.text;
    };
    Tools.prototype._initDescription = function (expressionEditorItem) {
        expressionEditorItem.description = this._localizedExpressionEditorItem(expressionEditorItem);
    };
    Tools.prototype._createFieldsCategory = function (fields, parameters) {
        var category = {
            displayName: localization_utils_1.getLocalization('Fields', 'AnalyticsCoreStringId.ExpressionEditor_ItemInfo_Fields'),
            content: {
                showDescription: false,
                isSelected: ko.observable(false),
                data: { fields: fields, parameters: parameters },
                name: 'dx-expressioneditor-fields'
            },
            dispose: function () { return void 0; }
        };
        return category;
    };
    Tools.prototype._createConstantCategory = function () {
        var items = [
            { text: '?', descriptionStringId: 'ExpressionEditorStringId.Constant_Null' },
            { text: 'False', descriptionStringId: 'ExpressionEditorStringId.Constant_False' },
            { text: 'True', descriptionStringId: 'ExpressionEditorStringId.Constant_True' }
        ];
        return _expressioneditor_1.createExpressionEditorCollectionToolOptions(items, 'Constants', 'DataAccessStringId.ExpressionEditor_DocumentationCategory_Constants', true);
    };
    Tools.prototype._createOperatorsCategory = function (data) {
        return _expressioneditor_1.createExpressionEditorCollectionToolOptions(data, 'Operators', 'DataAccessStringId.ExpressionEditor_DocumentationCategory_Operators', true);
    };
    Tools.prototype._createFunctionsCategoryContent = function (textToSearch, isSelected, items) {
        return {
            showDescription: true,
            isSelected: isSelected,
            data: {
                textToSearch: textToSearch,
                items: items,
                availableItems: ko.observableArray(items),
                selectedItem: ko.observable(null)
            },
            name: 'dx-expressioneditor-collection-function',
        };
    };
    Tools.prototype._createFunctionsCategoryItem = function (functions, display) {
        var _this = this;
        var result = {
            display: display,
            isSelected: ko.observable(false),
            data: [],
            name: 'dx-expressioneditor-collection-function',
        };
        $.map(functions, (function (item) {
            if (item) {
                item.forEach(function (functionItem) {
                    _this._initDescription(functionItem);
                    result.data.push(functionItem);
                });
            }
        }));
        return result;
    };
    Tools.prototype._createFunctionsCategory = function (items) {
        var textToSearch = ko.observable(''), disposables = [], isSelected = ko.observable(false), timeout = null, allItems = ko.computed(function () { return [].concat.apply([], items().map(function (x) { return x.data; })); }), content = this._createFunctionsCategoryContent(textToSearch, isSelected, allItems()), category = {
            displayName: localization_utils_1.getLocalization('Functions', 'DataAccessStringId.ExpressionEditor_DocumentationCategory_Functions'),
            items: items, allItems: allItems, isSelected: isSelected, content: content,
            collapsed: ko.observable(true),
            updateContent: function (items, isSelected) {
                content.isSelected && content.isSelected(false);
                content.isSelected = isSelected;
                content.isSelected(true);
                content.data.items = items;
                content.data.availableItems(content.data.items.filter(function (x) { return !!_utils_1.findMatchesInString(x.text, textToSearch()); }));
            },
            templateName: 'dx-expressioneditor-category-accordion',
            dispose: function () {
                disposables.forEach(function (x) { return x.dispose(); });
                disposables.splice(0, disposables.length);
            }
        };
        disposables.push(allItems);
        disposables.push(textToSearch.subscribe(function (newVal) {
            timeout && clearTimeout(timeout);
            timeout = setTimeout(function () {
                category.content.data.availableItems(category.content.data.items.filter(function (x) { return !!_utils_1.findMatchesInString(x.text, newVal); }));
            }, 150);
        }));
        return category;
    };
    Tools.prototype._disposeCategories = function () {
        this._categories().forEach(function (category) { return category.dispose && category.dispose(); });
    };
    Tools.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._disposeCategories();
    };
    return Tools;
}(utils_1.Disposable));
exports.Tools = Tools;
