/**
* DevExpress Analytics (widgets\expressioneditor\expressioneditor.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var _codeCompletor_1 = require("../common/_codeCompletor");
var criteriaOperator_1 = require("../criteria/operators/criteriaOperator");
var utils_1 = require("../../serializer/utils");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var _localizationStringIds_1 = require("../../property-grid/localization/_localizationStringIds");
var _utils_1 = require("../_utils");
var _expressioneditor_1 = require("./_expressioneditor");
var _displayNameProvider_1 = require("../common/_displayNameProvider");
var _treeListControllers_1 = require("./tools/_treeListControllers");
var _tools_1 = require("./tools/_tools");
var _ace_available_1 = require("../ace/_ace-available");
function createExpressionEditorFieldListProvider(originalProvider, fieldName) {
    return ko.computed(function () {
        var provider = ko.unwrap(originalProvider);
        var unwrappedFieldName = ko.unwrap(fieldName);
        return !unwrappedFieldName ? provider : {
            getItems: function (path) {
                var $deferred = $.Deferred();
                provider.getItems(path)
                    .done(function (data) {
                    $deferred.resolve(data.filter(function (field) { return field.name !== unwrappedFieldName; }));
                })
                    .fail(function () { return $deferred.reject(); });
                return $deferred.promise();
            },
            getValues: function (path) {
                return provider.getValues(path);
            }
        };
    });
}
var ExpressionEditor = (function (_super) {
    __extends(ExpressionEditor, _super);
    function ExpressionEditor(options, fieldListProvider, disabled, rtl, _displayNameProvider, popupVisible) {
        if (disabled === void 0) { disabled = ko.observable(false); }
        if (rtl === void 0) { rtl = false; }
        if (popupVisible === void 0) { popupVisible = ko.observable(false); }
        var _this = _super.call(this) || this;
        _this.options = options;
        _this._displayNameProvider = _displayNameProvider;
        _this.popupVisible = popupVisible;
        _this._updateTextAreaValue = function (item, element) {
            var textArea = _this._getTextArea(element), textAreaValue = _this.textAreaValue().toString(), cursorPosition = textArea && textArea.selectionStart || textAreaValue.length, newAddedText = textAreaValue[cursorPosition - 1] == ' ' ? (item.val || item.text || item) + ' ' : ' ' + (item.val || item.text || item) + ' ';
            _this.textAreaValue([textAreaValue.slice(0, cursorPosition), newAddedText, textAreaValue.slice(cursorPosition)].join(''));
            if (textArea && textArea.setSelectionRange) {
                textArea.focus();
                var posisition = cursorPosition + (newAddedText.indexOf('(') !== -1 ? newAddedText.indexOf('(') + 1 : newAddedText.length);
                textArea.setSelectionRange(posisition, posisition);
            }
        };
        _this._updateAceValue = function (item, element) {
            var editor = _this.editorContainer(), _a = editor.getCursorPosition(), row = _a.row, col = _a.column, insertion = (item.val || item.text || item) + ' ';
            if (col && editor.getSession().getValue().split('\n')[row][col - 1] !== ' ')
                insertion = ' ' + insertion;
            editor.insert(insertion);
            editor.focus();
            _utils_1.setCursorInFunctionParameter(item.paramCount, editor, insertion);
        };
        _this._updateValue = function (item, element) {
            _this.aceAvailable ? _this._updateAceValue(item, $(element)) : _this._updateTextAreaValue(item, $(element));
        };
        _this.patchFieldName = function (fieldName) { return fieldName; };
        _this._parametersPutSelectionHandler = function (selectedItemPath, element) {
            var pathParts = selectedItemPath.split('.');
            var newAddedString = '?' + _this.patchFieldName(pathParts[pathParts.length - 1]);
            _this._updateValue(newAddedString, element);
        };
        _this._fieldsPutSelectionHandler = function (selectedItemPath, element) {
            var path = _this.koOptions.peek().path.peek();
            var proposedFieldName = selectedItemPath.substring(path.length + 1);
            var newAddedString = '[' + _this.patchFieldName(proposedFieldName) + ']';
            if (_this._displayNameProvider) {
                _this.displayExpressionConverter.toDisplayExpression(path, newAddedString)
                    .done(function (result) { _this._updateValue(result, element); })
                    .fail(function () { _this._updateValue(newAddedString, element); });
            }
            else {
                _this._updateValue(newAddedString, element);
            }
        };
        _this.aceAvailable = _ace_available_1.aceAvailable();
        _this.title = function () { return localization_utils_1.getLocalization('Expression Editor', 'AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption'); };
        _this.value = ko.observable('');
        _this.textAreaValue = ko.observable('');
        _this.languageHelper = {
            getLanguageMode: function () { return 'ace/mode/criteria'; },
            createCompleters: function (editor, bindingContext, viewModel) {
                var path = ko.computed(function () { return viewModel.koOptions() && ko.unwrap(viewModel.koOptions().path) || ''; }), functions = ko.computed(function () { return viewModel.koOptions() && ko.unwrap(viewModel.koOptions().functions) || []; }), completor = new _codeCompletor_1.CodeCompletor({
                    editor: editor,
                    bindingContext: bindingContext,
                    fieldListProvider: viewModel.fieldListProvider,
                    path: path,
                    functions: functions,
                    rootItems: viewModel.options.rootItems,
                    getRealExpression: function (path, member) {
                        return _this.displayExpressionConverter && _this.displayExpressionConverter.toRealExpression(path, member) || $.Deferred().resolve(member).promise();
                    }
                });
                [path, functions].forEach(function (x) { return completor._disposables.push(x); });
                return [completor];
            }
        };
        _this.aceOptions = {
            showLineNumbers: false,
            showPrintMargin: false,
            enableBasicAutocompletion: true,
            enableLiveAutocompletion: true,
            showFoldWidgets: false,
            highlightActiveLine: false
        };
        _this.additionalOptions = {
            onChange: function (session) {
                var value = session.getValue();
                try {
                    var operator = criteriaOperator_1.CriteriaOperator.parse(value);
                    if (_this.koOptions().validate) {
                        _this.isValid(_this.koOptions().validate(operator));
                    }
                    session.clearAnnotations();
                }
                catch (exception) {
                    var row = exception.hash && exception.hash.line || 0;
                    var column = 0;
                    var lines = exception.message.split('\n');
                    var text = lines[1] + '\n' + lines[2];
                    session.setAnnotations([{ row: row, column: column, text: text, 'type': 'error' }]);
                }
            }
        };
        _this.callbacks = {
            focus: $.noop
        };
        _this.koOptions = ko.observable(null);
        _this.editorContainer = ko.observable();
        _this.isValid = ko.observable(true);
        _this.buttonItems = [];
        _this.rtl = false;
        _this.modelValueValid = ko.computed(function () {
            var options = _this.koOptions();
            return options && ko.isObservable(options.isValid) ? options.isValid() : true;
        });
        _this.modelValueWarning = ko.computed(function () {
            var options = _this.koOptions();
            return options && ko.unwrap(options.warningMessage) || '';
        });
        _this.getPopupContainer = _utils_1.getParentContainer;
        _this.koOptions(options);
        _this.patchFieldName = function (fieldName) {
            return _this.koOptions().patchFieldName && _this.koOptions().patchFieldName(fieldName) || fieldName;
        };
        _this.theme = _this.koOptions() && _this.koOptions().theme;
        _this._disposables.push(_this.value = ko.computed({
            read: function () {
                var value = _this.koOptions() && ko.unwrap(_this.koOptions().value);
                return (value && value.toString()) || '';
            },
            write: function (newVal) { return _this.koOptions() && _this.koOptions().value(newVal); }
        }));
        if (_displayNameProvider && options.path) {
            _this.displayExpressionConverter = new _displayNameProvider_1.DisplayExpressionConverter(_displayNameProvider);
            var pathFunc = ko.pureComputed(function () { return _this.koOptions() && _this.koOptions().path && _this.koOptions().path(); });
            _this.displayValue = _expressioneditor_1.wrapExpressionValue(pathFunc, _this.value, _this.displayExpressionConverter, _this._disposables);
            _this._disposables.push(pathFunc);
        }
        else {
            _this.displayValue = _this.value;
        }
        _this.rtl = rtl;
        _this.validate = function (value, sender) {
            try {
                criteriaOperator_1.CriteriaOperator.parse(value);
                _this.isValid(true);
                return true;
            }
            catch (exception) {
                var result = criteriaOperator_1.CriteriaOperator.getNotValidRange(value, exception.message);
                var textArea = _this._getTextArea(sender && sender.element);
                textArea && textArea.setSelectionRange(result.start, result.end);
                _this.isValid(false);
            }
        };
        _this._disposables.push(_this.popupVisible.subscribe(function (newVal) {
            if (!newVal) {
                _this.editorContainer(null);
                return;
            }
            _this.initDisplayValue();
        }));
        var fieldName = ko.computed(function () { return _this.koOptions() && _this.koOptions().fieldName && _this.koOptions().fieldName(); });
        _this._disposables.push(_this.fieldListProvider = createExpressionEditorFieldListProvider(fieldListProvider, fieldName));
        _this.disabled = disabled;
        var self = _this;
        _this.save = function (sender) {
            var value = _this.getValue();
            if (_this.validate(value, sender)) {
                _this.displayValue(value);
                _this.popupVisible(false);
            }
        };
        var selectedItem = null;
        var selectionHandler = function (item) {
            var selectedItemType = ko.unwrap(item.data['type']);
            if (selectedItem)
                selectedItem.isSelected(false);
            selectedItem = item;
            item.isSelected(true);
        };
        var fieldsTreeListOptions = ko.pureComputed(function () {
            return _this.koOptions() && _this.koOptions().path && _this.koOptions().path() && _this._createToolsOptions(_this.koOptions().path(), _this.fieldListProvider(), new _treeListControllers_1.ExpressionEditorTreeListController(fieldName, function (data, element) { _this._fieldsPutSelectionHandler(data.path, element); }, selectionHandler));
        });
        _this.parametersTreeListController = new _treeListControllers_1.ExpressionEditorParametersTreeListController(_this._parametersCustomFilter, _this._parametersPutSelectionHandler, selectionHandler);
        var parametersTreeListOptions = ko.pureComputed(function () {
            return _this._createToolsOptions('', _this.fieldListProvider(), _this.parametersTreeListController);
        });
        _this._disposables.push(_this.tools = new _tools_1.Tools(_this._updateValue, parametersTreeListOptions, _this.koOptions, fieldsTreeListOptions));
        _this._disposables.push(_this.modelValueValid, _this.modelValueWarning);
        _this._createMainPopupButtons();
        [fieldName, fieldsTreeListOptions, parametersTreeListOptions].forEach(function (x) { return _this._disposables.push(x); });
        return _this;
    }
    ExpressionEditor.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.koOptions(null);
        this.editorContainer(null);
        this.options = null;
    };
    ExpressionEditor.prototype._createMainPopupButtons = function () {
        var self = this;
        this.buttonItems = [
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: localization_utils_1.getLocalization('Save', _localizationStringIds_1.StringId.DataAccessBtnOK), onClick: function (sender) { self.save(sender); } } },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: localization_utils_1.getLocalization('Cancel', _localizationStringIds_1.StringId.DataAccessBtnCancel), onClick: function () { self.popupVisible(false); } } }
        ];
    };
    ExpressionEditor.prototype._getTextArea = function (element) {
        var $el = $(element);
        return ($el && $el.parents('.dx-expressioneditor').find(':input')[0]);
    };
    ExpressionEditor.prototype._createToolsOptions = function (path, fieldListProvider, treeListController) {
        return {
            itemsProvider: fieldListProvider,
            selectedPath: ko.observable(''),
            path: path,
            templateName: 'dx-ee-treelist-item',
            treeListController: treeListController,
            rtl: this.rtl
        };
    };
    ExpressionEditor.prototype._parametersCustomFilter = function (item) {
        return item.specifics === 'parameters' || item.specifics === _expressioneditor_1.RangeSpecific || !_utils_1.isList(item);
    };
    ExpressionEditor.prototype.onShown = function () {
        this.callbacks.focus();
    };
    ExpressionEditor.prototype.onHiding = function (e) {
        var options = this.koOptions();
        return options && options.onHiding && options.onHiding(e);
    };
    ExpressionEditor.prototype.onShowing = function (e) {
        var options = this.koOptions();
        return options && options.onShowing && options.onShowing(e);
    };
    ExpressionEditor.prototype.initDisplayValue = function () {
        this.tools.resetCategoriesSelection && this.tools.resetCategoriesSelection();
        this.textAreaValue(this.displayValue());
        if (!this.aceAvailable) {
            this.validate(this.value());
        }
        else {
            var editor = this.editorContainer();
            var session = editor && editor.getSession();
            session && session.setValue(this.textAreaValue());
        }
    };
    ExpressionEditor.prototype.getValue = function () {
        var value = this.textAreaValue();
        if (this.aceAvailable) {
            var editor = this.editorContainer();
            var session = editor && editor.getSession();
            value = session && session.getValue();
        }
        return value;
    };
    return ExpressionEditor;
}(utils_1.Disposable));
exports.ExpressionEditor = ExpressionEditor;
