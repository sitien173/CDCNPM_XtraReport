/**
* DevExpress Analytics (widgets\expressioneditor\expressioneditor.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { IExpressionEditorFunction } from './tools/_functions';
import { ICompletionRootItem, CodeCompletor } from '../common/_codeCompletor';
import { CriteriaOperator } from '../criteria/operators/criteriaOperator';
import { IItemsProvider } from '../utils';
import { Disposable } from '../../serializer/utils';
import { getParentContainer } from '../_utils';
import { IDisplayNameProvider } from '../common/displayNameProvider';
import { DisplayExpressionConverter } from '../common/_displayNameProvider';
import { ExpressionEditorParametersTreeListController } from './tools/_treeListControllers';
import { Tools } from './tools/_tools';
export interface IExpressionOptions {
    value: ko.Observable<string> | ko.Computed<string>;
    path?: ko.Observable<string> | ko.Computed<string>;
    fieldName?: ko.Observable<string> | ko.Computed<string>;
    theme?: string;
    patchFieldName?: (fieldName: string) => string;
    functions?: Array<IExpressionEditorFunction>;
    rootItems?: Array<ICompletionRootItem>;
    customizeCategories?: (sender: any, categories: any, dblclick?: any) => void;
    validate?: (criteria: CriteriaOperator) => boolean;
    isValid?: ko.Observable<boolean> | ko.Computed<boolean>;
    warningMessage?: ko.Observable<string> | ko.Computed<string>;
    onHiding?: (e: any) => void;
    onShowing?: (e: any) => void;
}
export declare class ExpressionEditor extends Disposable {
    private options;
    private _displayNameProvider?;
    popupVisible: ko.Observable<boolean>;
    dispose(): void;
    private _createMainPopupButtons;
    private _getTextArea;
    private _updateTextAreaValue;
    private _updateAceValue;
    private _updateValue;
    private patchFieldName;
    private _parametersPutSelectionHandler;
    private _fieldsPutSelectionHandler;
    private _createToolsOptions;
    private _parametersCustomFilter;
    constructor(options: IExpressionOptions, fieldListProvider: ko.Observable<IItemsProvider> | ko.Computed<IItemsProvider>, disabled?: ko.Observable<boolean> | ko.Computed<boolean>, rtl?: boolean, _displayNameProvider?: IDisplayNameProvider, popupVisible?: ko.Observable<boolean>);
    displayExpressionConverter: DisplayExpressionConverter;
    aceAvailable: boolean;
    tools: Tools;
    displayValue: ko.Observable<string> | ko.Computed<string>;
    title: () => any;
    value: ko.Observable<string> | ko.Computed<string>;
    textAreaValue: ko.Observable<string>;
    theme: string;
    languageHelper: {
        getLanguageMode: () => string;
        createCompleters: (editor: any, bindingContext: any, viewModel: ExpressionEditor) => CodeCompletor[];
    };
    aceOptions: {
        showLineNumbers: boolean;
        showPrintMargin: boolean;
        enableBasicAutocompletion: boolean;
        enableLiveAutocompletion: boolean;
        showFoldWidgets: boolean;
        highlightActiveLine: boolean;
    };
    additionalOptions: {
        onChange: (session: any) => void;
    };
    callbacks: {
        focus: () => undefined;
    };
    koOptions: ko.Observable<IExpressionOptions> | ko.Computed<IExpressionOptions>;
    editorContainer: ko.Observable<any> | ko.Computed<any>;
    fieldListProvider: ko.Observable<IItemsProvider> | ko.Computed<IItemsProvider>;
    parametersTreeListController: ExpressionEditorParametersTreeListController;
    save: (sender: any) => void;
    isValid: ko.Observable<boolean> | ko.Computed<boolean>;
    buttonItems: any[];
    rtl: boolean;
    modelValueValid: ko.Computed<boolean>;
    modelValueWarning: ko.Computed<string>;
    disabled: ko.Observable<boolean> | ko.Computed<boolean>;
    onShown(): void;
    onHiding(e: any): void;
    onShowing(e: any): void;
    initDisplayValue(): void;
    getValue(): string;
    validate: (value: any, sender?: any) => boolean;
    getPopupContainer: typeof getParentContainer;
}
