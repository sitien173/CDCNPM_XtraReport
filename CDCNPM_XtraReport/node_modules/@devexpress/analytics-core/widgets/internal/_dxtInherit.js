/**
* DevExpress Analytics (widgets\internal\_dxtInherit.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../serializer/utils");
var skipProperties = [
    'ctor',
    'constructor',
    'getComponentName',
    '_createProxyMehtod',
    '$element',
    '_options',
    '_isInitialized',
    'bind',
    '_disposableObj',
    'updateOptions'
];
var _superName = '__dxa__superProxy';
function _createSuper(object) {
    object[_superName] = {};
}
function _registerSuperMethod(object, methodName) {
    object[_superName][methodName] = object[methodName];
}
function _getSuper(object) {
    return object[_superName];
}
exports._getSuper = _getSuper;
var _dxtInherit = (function () {
    function _dxtInherit($element, _accessor) {
        this.$element = $element;
        this._isInitialized = false;
        this._disposableObj = new utils_1.Disposable();
        var self = this;
        this._options = ko.computed(function () {
            var _options = _accessor();
            self.updateOptions(_options);
            _options.onInitializing = function () {
                if (!self._isInitialized) {
                    _createSuper(this);
                    self._isInitialized = true;
                    for (var name in self) {
                        if (skipProperties.indexOf(name) === -1) {
                            _registerSuperMethod(this, name);
                            this[name] = self[name];
                        }
                    }
                    _registerSuperMethod(this, '_initOptions');
                    this._initOptions = function (options) {
                        _getSuper(this)._initOptions.apply(this, arguments);
                        var func = function () {
                            this.constructor._includedPostCtors.splice(this.constructor._includedPostCtors.indexOf(func), 1);
                            self.ctor.apply(this, [$($element), options]);
                        };
                        this.constructor._includedPostCtors.push(func);
                    };
                }
            };
            return _options;
        }, undefined, {
            disposeWhenNodeIsRemoved: $element
        });
    }
    _dxtInherit.prototype.ctor = function ($element, _options) { };
    _dxtInherit.prototype.updateOptions = function (_options) { };
    _dxtInherit.prototype.getComponentName = function () {
        return null;
    };
    _dxtInherit.prototype.bind = function () {
        var _this = this;
        return ko.bindingHandlers[this.getComponentName()].init(this.$element, function () { return _this._options(); });
    };
    return _dxtInherit;
}());
exports._dxtInherit = _dxtInherit;
function _registerDxtComponent(bindingName, type) {
    ko.bindingHandlers[bindingName] = {
        init: function (element, valueAccessor) {
            var component = (new type(element, valueAccessor));
            return component.bind();
        }
    };
}
exports._registerDxtComponent = _registerDxtComponent;
