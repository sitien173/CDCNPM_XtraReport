/**
* DevExpress Analytics (widgets\filtereditor\operators\groupOperandSurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var criteriaOperatorSurface_1 = require("./criteriaOperatorSurface");
var _helper_1 = require("../helpers/_helper");
var aggregateOperandSurface_1 = require("./aggregateOperandSurface");
var property_1 = require("../../criteria/operators/property");
var GroupOperandSurface = (function (_super) {
    __extends(GroupOperandSurface, _super);
    function GroupOperandSurface(operator, parent, fieldListProvider, path) {
        var _this = _super.call(this, operator, parent, fieldListProvider, path) || this;
        _this.templateName = 'dx-filtereditor-group';
        _this.operatorClass = 'criteria-operator-item-group dxd-filter-editor-group-back-color dxd-filter-editor-text-color';
        _this.operands = ko.observableArray([]);
        _this.createItems = null;
        _this.createItems = [
            { name: 'Add group', value: true, localizationId: 'StringId.FilterMenuGroupAdd' },
            { name: 'Add condition', value: false, localizationId: 'StringId.FilterMenuConditionAdd' }
        ];
        _this.createItems.forEach(_helper_1.initDisplayText);
        _this.operands((operator.operands || []).map(function (operand) {
            return _this.createChildSurface(operand);
        }));
        _this.specifics = ko.observable('group');
        return _this;
    }
    GroupOperandSurface.prototype.change = function (type, surface) {
        if (surface) {
            var specifics = surface.specifics() || 'integer';
            var operators = this.helper.filterEditorOperators[specifics] || this.helper.filterEditorOperators._common;
            if (!type) {
                var item = operators.filter(function (item) {
                    return surface.operatorType() === item.value && surface.reverse === item.reverse && surface.model.enumType === item.type;
                })[0];
                if (item) {
                    type = item;
                }
                else {
                    type = operators[0];
                }
            }
            var newModel = this.model.change(type, surface.model, surface.leftPart instanceof aggregateOperandSurface_1.AggregateOperandSurface && surface.leftPart.leftPart.specifics() !== 'list');
            var position = this.operands().indexOf(surface);
            var operand = this.createChildSurface(newModel);
            this.operands()[position].dispose();
            this.operands.splice(position, 1, operand);
        }
        else {
            _super.prototype.change.call(this, type, surface);
        }
        this.helper.onChange();
    };
    GroupOperandSurface.prototype.remove = function (surface) {
        if (surface) {
            this.model.remove(surface.model);
            this.operands.remove(surface);
            surface.dispose();
        }
        else {
            this.parent.remove(this);
            this.dispose();
        }
        this.helper.onChange();
    };
    GroupOperandSurface.prototype.create = function (type) {
        var newModel = this.model.create(type.value, new property_1.OperandProperty());
        this.operands.push(this.createChildSurface(newModel));
        this.helper.onChange();
    };
    Object.defineProperty(GroupOperandSurface.prototype, "rightPart", {
        get: function () {
            return this.operands();
        },
        enumerable: true,
        configurable: true
    });
    GroupOperandSurface.prototype.dispose = function () {
        this.operands().forEach(function (x) { return x.dispose(); });
        _super.prototype.dispose.call(this);
    };
    return GroupOperandSurface;
}(criteriaOperatorSurface_1.CriteriaOperatorSurface));
exports.GroupOperandSurface = GroupOperandSurface;
