/**
* DevExpress Analytics (widgets\filtereditor\operators\criteriaOperatorSurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../../../serializer/utils");
var property_1 = require("../../criteria/operators/property");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var function_1 = require("../../criteria/operators/function");
var CriteriaOperatorSurface = (function (_super) {
    __extends(CriteriaOperatorSurface, _super);
    function CriteriaOperatorSurface(operator, parent, fieldListProvider, path) {
        var _this = _super.call(this) || this;
        _this.isUpdated = ko.observable(false);
        _this.canRemove = true;
        _this.operatorType = ko.observable(null);
        _this.templateName = 'dx-filtereditor-common';
        _this.isSelected = ko.observable(false);
        _this.operatorClass = 'criteria-operator-item-operator dxd-filter-editor-operator-back-color dxd-filter-editor-text-color';
        _this.popupService = parent.popupService || { visible: ko.observable(false) };
        _this.model = operator;
        _this.helper = parent.helper;
        _this.fieldListProvider = fieldListProvider;
        _this.path = path;
        _this.parent = parent;
        _this.operatorType(operator.operatorType);
        _this._disposables.push(_this.operatorType.subscribe(function (newVal) {
            _this.model.assignType(newVal);
        }));
        return _this;
    }
    CriteriaOperatorSurface.prototype._createLeftPartProperty = function (value) {
        var _this = this;
        if (value instanceof property_1.OperandProperty) {
            var surface = this.createChildSurface(value);
        }
        else {
            var surface = this.createChildSurface(value);
            var specifics = Object.keys(this.helper.filterEditorOperators).reduce(function (key, value) {
                if (value !== '_common' && key === 'integer'
                    && !!_this.helper._getFilterEditorOperator(_this.model, _this.helper.filterEditorOperators[value], _this.reverse)) {
                    key = value;
                }
                return key;
            }, 'integer');
            surface.specifics = surface.specifics || ko.observable(specifics);
        }
        surface['canChange'] = false;
        surface.canRemove = false;
        if (surface instanceof aggregateOperandSurface_1.AggregateOperandSurface) {
            this.specifics = ko.computed(function () {
                return surface['aggregatedExpression']() && surface['aggregatedExpression']().specifics() || 'integer';
            });
            this.dataType = ko.computed(function () {
                return surface['aggregatedExpression']() && surface['aggregatedExpression']().dataType() || 'integer';
            });
            this._disposables.push(this.specifics);
            this._disposables.push(this.dataType);
        }
        else {
            this.specifics = surface.specifics;
            this.dataType = surface.dataType;
        }
        this.isUpdated = surface.isUpdated;
        return surface;
    };
    CriteriaOperatorSurface.prototype.createChildSurface = function (item, path, actions) {
        return new this.helper.mapper[item.type](item, this, this.fieldListProvider, path || this.path);
    };
    CriteriaOperatorSurface.prototype.getDisplayType = function () {
        var type = this.operatorType && this.operatorType() || '';
        var item = this.helper._getFilterEditorOperator(this.model, this.items, this.reverse);
        return item && item.name && (item.displayText || localization_utils_1.getLocalization(item.name, item.localizationId)) || this.model.displayType || type;
    };
    Object.defineProperty(CriteriaOperatorSurface.prototype, "items", {
        get: function () {
            return this.helper.filterEditorOperators[this.specifics()] || this.helper.filterEditorOperators._common;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CriteriaOperatorSurface.prototype, "displayType", {
        get: function () {
            return this.getDisplayType();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CriteriaOperatorSurface.prototype, "leftPart", {
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CriteriaOperatorSurface.prototype, "rightPart", {
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CriteriaOperatorSurface.prototype, "css", {
        get: function () {
            return this.operatorClass + (this.isSelected() ? ' selected' : '');
        },
        enumerable: true,
        configurable: true
    });
    CriteriaOperatorSurface.prototype.change = function (type, surface) {
        if (!surface && type && this.model.enumType === type.type && this.reverse === type.reverse && type.type !== function_1.FunctionOperatorType) {
            this.operatorType(type.value);
        }
        else {
            this.parent.change(type, this);
        }
        this.helper.onChange();
    };
    CriteriaOperatorSurface.prototype.remove = function (surface) {
        this.parent.remove(this);
        this.helper.onChange();
    };
    return CriteriaOperatorSurface;
}(utils_1.Disposable));
exports.CriteriaOperatorSurface = CriteriaOperatorSurface;
var aggregateOperandSurface_1 = require("./aggregateOperandSurface");
