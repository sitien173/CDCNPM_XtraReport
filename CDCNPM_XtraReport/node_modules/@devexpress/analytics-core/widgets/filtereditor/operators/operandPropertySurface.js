/**
* DevExpress Analytics (widgets\filtereditor\operators\operandPropertySurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var operandSurfaceBase_1 = require("./operandSurfaceBase");
var pathRequest_1 = require("../../common/pathRequest");
var OperandPropertySurface = (function (_super) {
    __extends(OperandPropertySurface, _super);
    function OperandPropertySurface(operator, parent, fieldListProvider, path) {
        var _this = _super.call(this, operator, parent, fieldListProvider, path) || this;
        _this._displayName = ko.observable('');
        _this.propertyName = ko.observable('');
        _this.specifics = ko.observable('integer');
        _this.dataType = ko.observable('');
        _this.valueType = ko.observable('');
        _this.changeProperty = function (item) {
            _this.fieldsOptions().selected(item);
        };
        _this.templateName = 'dx-filtereditor-property';
        _this.operatorClass = 'criteria-operator-item-field dxd-filter-editor-field-back-color dxd-filter-editor-field-back-color dxd-filter-editor-text-color';
        _this.propertyName(operator.propertyName);
        var options = _this.helper.generateTreelistOptions(fieldListProvider, path);
        if (options.options && options.subscription) {
            _this.fieldsOptions = options.options;
            _this._disposables.push(options.subscription);
        }
        else {
            _this.fieldsOptions = options;
        }
        _this._disposables.push(_this.fieldsOptions().selectedPath.subscribe(function (newVal) {
            var realName = _this.fieldsOptions().selectedPath().substr(_this.path && _this.path().length > 0 ? _this.path().length + 1 : 0);
            _this.propertyName(realName);
            _this.model.propertyName = realName;
            _this.popupService.visible(false);
        }));
        _this._disposables.push(_this.fieldsOptions().selected.subscribe(function (newVal) {
            _this._updateDisplayName(path, _this.propertyName(), newVal.displayName);
            var specifics = newVal.specifics.toLowerCase();
            if (specifics.indexOf('calc') === 0) {
                specifics = specifics.split('calc')[1];
            }
            if (_this.specifics() !== specifics || _this.dataType() !== newVal.dataType) {
                _this.specifics(specifics);
                _this.dataType(newVal.dataType);
                _this.parent.change();
            }
            _this.helper.onChange();
        }));
        _this.fieldsOptions().selectedPath(_this.path && !!ko.unwrap(_this.path) ? [ko.unwrap(_this.path), _this.propertyName()].join('.') : _this.propertyName());
        _this._updateSpecifics();
        _this._disposables.push(_this.displayName = ko.computed(function () {
            return _this._displayName() || _this.propertyName();
        }));
        return _this;
    }
    OperandPropertySurface.prototype._updateDisplayName = function (path, propertyName, displayName) {
        var _this = this;
        if (!!this.helper.getDisplayPropertyName) {
            this.helper.getDisplayPropertyName(ko.unwrap(path), propertyName).done(function (newVal) {
                _this._displayName(newVal);
            });
        }
        else {
            this._displayName(displayName);
        }
    };
    OperandPropertySurface.prototype._updateSpecifics = function () {
        var _this = this;
        var self = this;
        var propertyPath = this.propertyName().split('.');
        var realPropertyName = propertyPath.pop();
        if (ko.unwrap(this.fieldsOptions).itemsProvider) {
            this.isUpdated(true);
            ko.unwrap(this.fieldsOptions).itemsProvider.getItems(new pathRequest_1.PathRequest([this.path()].concat(propertyPath).join('.'))).done(function (result) {
                var notListProperties = result.filter(function (item) { return item.specifics !== 'List' && !item.isList; });
                if (!_this.propertyName() && notListProperties.length > 0) {
                    _this.model.propertyName = notListProperties[0].name;
                    _this.propertyName(notListProperties[0].name);
                    realPropertyName = notListProperties[0].name;
                }
                var item = result.filter(function (item) { return item.name === realPropertyName; })[0];
                if (item) {
                    var specifics = item.specifics.toLowerCase();
                    if (specifics.indexOf('calc') === 0) {
                        specifics = specifics.split('calc')[1];
                    }
                    _this.specifics(specifics);
                    _this.dataType(item.dataType);
                    _this._updateDisplayName(_this.path, _this.propertyName(), item.displayName);
                }
            }).always(function () {
                _this.isUpdated(false);
            });
        }
    };
    Object.defineProperty(OperandPropertySurface.prototype, "items", {
        get: function () {
            return this.fieldsOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OperandPropertySurface.prototype, "displayType", {
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    return OperandPropertySurface;
}(operandSurfaceBase_1.OperandSurfaceBase));
exports.OperandPropertySurface = OperandPropertySurface;
