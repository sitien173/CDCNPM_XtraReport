/**
* DevExpress Analytics (widgets\filtereditor\operators\aggregateOperandSurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var criteriaOperatorSurface_1 = require("./criteriaOperatorSurface");
var aggregate_1 = require("../../criteria/operators/aggregate");
var unaryOperandSurface_1 = require("./unaryOperandSurface");
var AggregateOperandSurface = (function (_super) {
    __extends(AggregateOperandSurface, _super);
    function AggregateOperandSurface(operator, parent, fieldListProvider, path) {
        var _this = _super.call(this, operator, parent, fieldListProvider, path) || this;
        _this.contentTemplateName = 'dx-filtereditor-aggregate';
        _this.property = ko.observable(null);
        _this.aggregatedExpression = ko.observable(null);
        _this.condition = ko.observable(null);
        _this.property(_this._createLeftPartProperty(operator.property));
        var childPath = ko.computed(function () {
            return _this.path() + '.' + _this.property().propertyName();
        });
        _this._disposables.push(childPath);
        if (operator.aggregatedExpression) {
            _this.aggregatedExpression(_this.createChildSurface(operator.aggregatedExpression, childPath));
            _this.templateName = 'dx-filtereditor-aggregate-common';
        }
        if (operator.operatorType === aggregate_1.Aggregate.Count) {
            _this.templateName = 'dx-filtereditor-aggregate-common';
        }
        var surface = _this.createChildSurface(operator.condition, childPath);
        surface.canRemove = false;
        if (surface instanceof unaryOperandSurface_1.UnaryOperandSurface) {
            surface.operand().canRemove = false;
        }
        _this.condition(surface);
        _this.change = function (type, surface) {
            if (surface) {
                var newModel = _this.model.change(type, surface.model);
                var condition = _this.createChildSurface(newModel, childPath);
                condition.canRemove = false;
                if (condition instanceof unaryOperandSurface_1.UnaryOperandSurface) {
                    condition.operand().canRemove = false;
                }
                _this.condition(condition);
            }
            else {
                if (_this.operatorType() === aggregate_1.Aggregate.Exists || _this.operatorType() === aggregate_1.Aggregate.Count) {
                    _this.parent.change(type, _this);
                }
                else {
                    if (type && (type.value === aggregate_1.Aggregate.Exists || type.value === aggregate_1.Aggregate.Count)) {
                        _this.parent.change(type, _this);
                    }
                    else {
                        _super.prototype.change.call(_this, type, surface);
                    }
                }
            }
            _this.helper.onChange();
        };
        return _this;
    }
    Object.defineProperty(AggregateOperandSurface.prototype, "leftPart", {
        get: function () {
            return this.property && this.property();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AggregateOperandSurface.prototype, "rightPart", {
        get: function () {
            return this.aggregatedExpression();
        },
        enumerable: true,
        configurable: true
    });
    AggregateOperandSurface.prototype.dispose = function () {
        this.property().dispose();
        this.condition().dispose();
        this.aggregatedExpression() && this.aggregatedExpression().dispose();
        _super.prototype.dispose.call(this);
    };
    return AggregateOperandSurface;
}(criteriaOperatorSurface_1.CriteriaOperatorSurface));
exports.AggregateOperandSurface = AggregateOperandSurface;
