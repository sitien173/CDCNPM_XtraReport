/**
* DevExpress Analytics (widgets\filtereditor\operators\binaryOperandSurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var criteriaOperatorSurface_1 = require("./criteriaOperatorSurface");
var BinaryOperandSurface = (function (_super) {
    __extends(BinaryOperandSurface, _super);
    function BinaryOperandSurface(operator, parent, fieldListProvider, path) {
        var _this = _super.call(this, operator, parent, fieldListProvider, path) || this;
        _this.contentTemplateName = 'dx-filtereditor-binary';
        _this.leftOperand = ko.observable(null);
        _this.rightOperand = ko.observable(null);
        _this.leftOperand(_this._createLeftPartProperty(operator.leftOperand));
        _this.rightOperand(_this.createChildSurface(operator.rightOperand));
        return _this;
    }
    Object.defineProperty(BinaryOperandSurface.prototype, "leftPart", {
        get: function () {
            return this.leftOperand();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BinaryOperandSurface.prototype, "rightPart", {
        get: function () {
            return this.rightOperand();
        },
        enumerable: true,
        configurable: true
    });
    BinaryOperandSurface.prototype.dispose = function () {
        this.leftOperand().dispose();
        this.rightOperand().dispose();
        _super.prototype.dispose.call(this);
    };
    return BinaryOperandSurface;
}(criteriaOperatorSurface_1.CriteriaOperatorSurface));
exports.BinaryOperandSurface = BinaryOperandSurface;
