/**
* DevExpress Analytics (widgets\filtereditor\operators\operandParameterSurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var operandSurfaceBase_1 = require("./operandSurfaceBase");
var OperandParameterSurface = (function (_super) {
    __extends(OperandParameterSurface, _super);
    function OperandParameterSurface(operator, parent, fieldListProvider, path) {
        var _this = _super.call(this, operator, parent, fieldListProvider, path) || this;
        _this.changeParameter = function (item) {
            _this.model.parameterName = item.name;
            _this.parameterName(item.name);
            _this.helper.onChange();
        };
        _this.operatorClass = 'criteria-operator-item-parameter dxd-filter-editor-parameter-back-color dxd-filter-editor-text-color';
        _this.parameterName = ko.observable('');
        _this.templateName = 'dx-filtereditor-parameter';
        _this.specifics = parent.specifics;
        _this.parameterName(operator.parameterName);
        if (!_this.parameterName() && _this.items.length > 0) {
            _this.changeParameter(_this.items[0]);
        }
        _this.specifics && _this._disposables.push(_this.specifics.subscribe(function (newVal) {
            if (_this.items.filter(function (x) { return ko.unwrap(x.name) == _this.parameterName(); }).length == 0)
                _this.items.length > 0 ? _this.changeParameter(_this.items[0]) : _this.changeParameter({ name: '' });
        }));
        return _this;
    }
    Object.defineProperty(OperandParameterSurface.prototype, "items", {
        get: function () {
            return this.getConvertableParameters(this.specifics());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OperandParameterSurface.prototype, "displayType", {
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    return OperandParameterSurface;
}(operandSurfaceBase_1.OperandSurfaceBase));
exports.OperandParameterSurface = OperandParameterSurface;
