/**
* DevExpress Analytics (widgets\filtereditor\operators\operandSurfaceBase.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var criteriaOperatorSurface_1 = require("./criteriaOperatorSurface");
var unaryOperandSurface_1 = require("./unaryOperandSurface");
var value_1 = require("../../criteria/operators/value");
var property_1 = require("../../criteria/operators/property");
var parameter_1 = require("../../criteria/operators/parameter");
var _helper_1 = require("../helpers/_helper");
var OperandSurfaceBase = (function (_super) {
    __extends(OperandSurfaceBase, _super);
    function OperandSurfaceBase(operator, parent, fieldListProvider, path) {
        var _this = _super.call(this, operator, parent, fieldListProvider, path) || this;
        _this.canChange = true;
        _this.canRemove = false;
        _this.changeValueType = function (type) {
            var parent = _this.getRealParent(_this.parent);
            var property = _this.getRealProperty(_this);
            var propertyLocation = _this.getPropertyName(parent, property);
            var model = parent.model.changeValueType(type.instance, propertyLocation);
            if (propertyLocation.index !== null) {
                parent[propertyLocation.name]()[propertyLocation.index].dispose();
                parent[propertyLocation.name].splice(propertyLocation.index, 1, parent.createChildSurface(model));
            }
            else {
                parent[propertyLocation.name]().dispose();
                parent[propertyLocation.name](parent.createChildSurface(model));
            }
            _this.helper.onChange();
        };
        return _this;
    }
    OperandSurfaceBase.prototype.getRealParent = function (parent) {
        if (parent instanceof unaryOperandSurface_1.UnaryOperandSurface) {
            return this.getRealParent(parent.parent);
        }
        else {
            return parent;
        }
    };
    OperandSurfaceBase.prototype.getRealProperty = function (property) {
        if (property.parent instanceof unaryOperandSurface_1.UnaryOperandSurface) {
            return this.getRealProperty(property.parent);
        }
        else {
            return property;
        }
    };
    OperandSurfaceBase.prototype.getPropertyName = function (parent, searchProperty) {
        var position = null;
        var name = null;
        $.each(parent, function (propertyName, property) {
            if (Array.isArray(ko.unwrap(property)) && ko.isObservable(property)) {
                var index = ko.unwrap(property).indexOf(searchProperty);
                if (index > -1) {
                    position = index;
                    name = propertyName;
                    return;
                }
            }
            else if (searchProperty === ko.unwrap(property) && ko.isObservable(property)) {
                name = propertyName;
                return;
            }
        });
        return { index: position, name: name };
    };
    OperandSurfaceBase.prototype.getConvertableParameters = function (destinationSpecifics) {
        if (!this.helper.parameters())
            return [];
        return this.helper.parameters().filter(function (item) {
            var sourceSpecifics = item.specifics && item.specifics.toLocaleLowerCase();
            if (sourceSpecifics == null || destinationSpecifics == null)
                return false;
            if (sourceSpecifics === destinationSpecifics)
                return true;
            if (destinationSpecifics === 'default')
                return true;
            if (destinationSpecifics === 'string')
                return true;
            if (destinationSpecifics === 'float')
                return sourceSpecifics === 'integer';
            return false;
        });
    };
    Object.defineProperty(OperandSurfaceBase.prototype, "changeTypeItems", {
        get: function () {
            var items = [{ name: 'Value', instance: value_1.OperandValue, localizationId: 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Value' }];
            if (this.helper.canChoiceProperty) {
                items.push({ name: 'Property', instance: property_1.OperandProperty, localizationId: 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Property' });
            }
            if (this.helper.canChoiceParameters && (this.getConvertableParameters(this.parent.specifics()).length > 0 || this.helper.canCreateParameters)) {
                items.push({ name: 'Parameter', instance: parameter_1.OperandParameter, localizationId: 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Parameter' });
            }
            items.forEach(_helper_1.initDisplayText);
            return items;
        },
        enumerable: true,
        configurable: true
    });
    return OperandSurfaceBase;
}(criteriaOperatorSurface_1.CriteriaOperatorSurface));
exports.OperandSurfaceBase = OperandSurfaceBase;
