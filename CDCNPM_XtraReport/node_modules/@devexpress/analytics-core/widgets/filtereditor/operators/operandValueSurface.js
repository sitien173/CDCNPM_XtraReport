/**
* DevExpress Analytics (widgets\filtereditor\operators\operandValueSurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var operandSurfaceBase_1 = require("./operandSurfaceBase");
var unaryOperandSurface_1 = require("./unaryOperandSurface");
var unary_1 = require("../../criteria/operators/unary");
var _utils_1 = require("../../_utils");
var _localization_1 = require("../../../property-grid/localization/_localization");
var operandPropertySurface_1 = require("./operandPropertySurface");
var pathRequest_1 = require("../../common/pathRequest");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var _valueEditorHelper_1 = require("../../internal/_valueEditorHelper");
var data_source_1 = require("devextreme/data/data_source");
var OperandValueSurface = (function (_super) {
    __extends(OperandValueSurface, _super);
    function OperandValueSurface(operator, parent, fieldListProvider, path) {
        var _this = _super.call(this, operator, parent, fieldListProvider, path) || this;
        _this._value = ko.observable(null);
        _this._updateDate = function (specifics) {
            if (specifics === 'date') {
                if (!(this._value() instanceof Date)) {
                    this._value(new Date(new Date().setHours(0, 0, 0, 0)));
                }
            }
            else {
                this._value('');
            }
        };
        _this.changeValue = function () {
            var parent = _this.getRealParent(_this.parent);
            var property = _this.getRealProperty(_this);
            var propertyLocation = _this.getPropertyName(parent, property);
            var model = parent.model.changeValue(_this.model, _this.reverse, propertyLocation);
            if (propertyLocation.index !== null) {
                parent[propertyLocation.name]()[propertyLocation.index].dispose();
                parent[propertyLocation.name].splice(propertyLocation.index, 1, parent.createChildSurface(model));
            }
            else {
                parent[propertyLocation.name]().dispose();
                parent[propertyLocation.name](parent.createChildSurface(model));
            }
        };
        _this.dataType = ko.observable('');
        _this.values = ko.observable([]);
        _this.isEditable = ko.observable(false);
        _this.templateName = 'dx-filtereditor-value';
        _this.getNumberEditorOptions = function () {
            return _valueEditorHelper_1.ValueEditorHelper.getNumberEditorOptions(_this.dataType(), _this.specifics(), { value: _this._value, onFocusOut: function () { _this.isEditable(false); } });
        };
        var dataSource = null;
        _this._disposables.push(_this.dataSource = ko.computed(function () {
            dataSource && dataSource.dispose();
            dataSource = new data_source_1.default({
                store: _this.values(),
                paginate: _this.values().length > 200,
                pageSize: 100
            });
            return dataSource;
        }));
        if (parent instanceof unaryOperandSurface_1.UnaryOperandSurface) {
            _this.specifics = parent.parent.specifics;
            _this.isUpdated = parent.parent.isUpdated;
            _this.dataType = parent.parent.dataType;
            if (parent.model.operatorType === unary_1.UnaryOperatorType.Minus) {
                _this.reverse = true;
            }
        }
        else {
            _this.specifics = parent.specifics;
            _this.isUpdated = parent.isUpdated;
            _this.dataType = parent.dataType;
        }
        if (operator.specifics && ko.isWritableObservable(_this.specifics))
            _this.specifics(operator.specifics);
        _this._disposables.push(_this.specifics.subscribe(function (newVal) {
            if (!_this.isUpdated || !_this.isUpdated()) {
                operator.specifics = newVal;
                _this._updateDate(newVal);
            }
        }));
        _this._value(operator.value);
        _this._disposables.push(_this._value.subscribe(function (newVal) {
            _this.model.value = newVal;
            _this.helper.onChange();
        }));
        if (_utils_1.isNullOrEmptyString(_this._value())) {
            _this._updateDate(_this.specifics());
        }
        _this._disposables.push(_this.value = ko.computed({
            read: function () {
                var value = _this._value();
                if (value instanceof Date) {
                    value = _localization_1.formatDate(value);
                }
                if (_this.items.length > 0) {
                    var result = _this.items.filter(function (item) { return String(item.value) === String(value); })[0];
                    if (result) {
                        return result.display;
                    }
                }
                if (_this.reverse) {
                    value = '-' + value;
                }
                return value !== null && value !== undefined && value !== '' ? value : _this.getDefaultValue();
            },
            write: function (newVal) {
                if (newVal > 0 && !_this.reverse || newVal < 0 && _this.reverse) {
                    _this._value(newVal);
                }
                else if (newVal > 0 && _this.reverse || newVal < 0 && !_this.reverse) {
                    _this.reverse = !_this.reverse;
                    _this._value(newVal < 0 ? ('' + newVal).substring(1) : newVal);
                    _this.changeValue();
                }
            }
        }));
        _this._disposables.push(ko.computed(function () {
            var itemsProvider = ko.unwrap(fieldListProvider);
            if (itemsProvider && itemsProvider.getValues && _this.parent.leftPart instanceof operandPropertySurface_1.OperandPropertySurface) {
                if (_this.parent.leftPart.propertyName()) {
                    itemsProvider.getValues(new pathRequest_1.PathRequest(ko.unwrap(_this.path) + '.' + _this.parent.leftPart.propertyName())).done(function (result) {
                        _this.values(result);
                    });
                }
            }
        }));
        operator.specifics = _this.specifics();
        return _this;
    }
    Object.defineProperty(OperandValueSurface.prototype, "items", {
        get: function () {
            return this.values();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OperandValueSurface.prototype, "displayType", {
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    OperandValueSurface.prototype.isDefaultDisplay = function () {
        return this.value() === this.getDefaultValue();
    };
    OperandValueSurface.prototype.getDefaultValue = function () {
        return OperandValueSurface._defaultValue ? OperandValueSurface._defaultValue :
            OperandValueSurface._defaultValue = localization_utils_1.getLocalization('Enter a value', 'StringId.FilterEmptyEnter');
    };
    return OperandValueSurface;
}(operandSurfaceBase_1.OperandSurfaceBase));
exports.OperandValueSurface = OperandValueSurface;
