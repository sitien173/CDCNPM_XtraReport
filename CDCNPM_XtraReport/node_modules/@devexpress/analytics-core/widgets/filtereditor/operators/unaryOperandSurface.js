/**
* DevExpress Analytics (widgets\filtereditor\operators\unaryOperandSurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var criteriaOperatorSurface_1 = require("./criteriaOperatorSurface");
var unary_1 = require("../../criteria/operators/unary");
var group_1 = require("../../criteria/operators/group");
var UnaryOperandSurface = (function (_super) {
    __extends(UnaryOperandSurface, _super);
    function UnaryOperandSurface(operator, parent, fieldListProvider, path) {
        var _this = _super.call(this, operator, parent, fieldListProvider, path) || this;
        _this.contentTemplateName = 'dx-filtereditor-unary';
        _this.operand = ko.observable(null);
        var operand = _this.createChildSurface(operator.operand);
        if (operator.operatorType === unary_1.UnaryOperatorType.Not) {
            _this.templateName = 'dx-filtereditor-not';
            operand.reverse = true;
            _this.specifics = operand.specifics;
        }
        else {
            operand.dispose();
            operand = _this._createLeftPartProperty(operator.operand);
        }
        _this.operand(operand);
        return _this;
    }
    Object.defineProperty(UnaryOperandSurface.prototype, "leftPart", {
        get: function () {
            var leftPart = this.operand();
            if (this.operand() && this.operand().reverse && this.operand().leftPart) {
                leftPart = this.operand().leftPart;
            }
            return leftPart;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnaryOperandSurface.prototype, "rightPart", {
        get: function () {
            return this.operand() && this.operand().reverse ? this.operand().rightPart : null;
        },
        enumerable: true,
        configurable: true
    });
    UnaryOperandSurface.prototype.createChildSurface = function (item, path, actions) {
        if (this.operatorType() === unary_1.UnaryOperatorType.Not && !this.helper._getFilterEditorOperator(item, this.helper._allFilterEditorOperators, true)) {
            this.model.operand = new group_1.GroupOperator(group_1.GroupOperatorType.And, [item]);
        }
        return _super.prototype.createChildSurface.call(this, this.model.operand, path, actions);
    };
    UnaryOperandSurface.prototype.dispose = function () {
        this.operand().dispose();
        _super.prototype.dispose.call(this);
    };
    return UnaryOperandSurface;
}(criteriaOperatorSurface_1.CriteriaOperatorSurface));
exports.UnaryOperandSurface = UnaryOperandSurface;
