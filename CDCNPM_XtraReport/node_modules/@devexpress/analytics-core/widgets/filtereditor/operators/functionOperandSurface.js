/**
* DevExpress Analytics (widgets\filtereditor\operators\functionOperandSurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var operandSurfaceBase_1 = require("./operandSurfaceBase");
var function_1 = require("../../criteria/operators/function");
var unaryOperandSurface_1 = require("./unaryOperandSurface");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var FunctionOperandSurface = (function (_super) {
    __extends(FunctionOperandSurface, _super);
    function FunctionOperandSurface(operator, parent, fieldListProvider, path) {
        var _this = _super.call(this, operator, parent, fieldListProvider, path) || this;
        _this.canRemove = true;
        _this.contentTemplateName = 'dx-filtereditor-function';
        _this.operands = ko.observableArray([]);
        if (operator.operands.length === 0) {
            if (parent instanceof unaryOperandSurface_1.UnaryOperandSurface) {
                _this.specifics = parent.parent.specifics;
            }
            else {
                _this.specifics = parent.specifics;
            }
            _this.contentTemplateName = 'dx-filtereditor-function-lightweight';
            _this.canRemove = false;
        }
        else {
            _this.operands.push(_this._createLeftPartProperty(operator.operands[0]));
            for (var i = 1; i < operator.operands.length; i++) {
                _this.operands.push(_this.createChildSurface(operator.operands[i]));
            }
        }
        return _this;
    }
    Object.defineProperty(FunctionOperandSurface.prototype, "leftPart", {
        get: function () {
            return this.operands && this.operands()[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionOperandSurface.prototype, "rightPart", {
        get: function () {
            return this.operands && this.operands().filter(function (_, index) { return index !== 0; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionOperandSurface.prototype, "displayType", {
        get: function () {
            var _this = this;
            var item = this.items.filter(function (item) { return _this.operatorType() === item.value && _this.reverse === item.reverse && _this.model.enumType === item.type; })[0];
            if (item && item.name) {
                return item.displayText || localization_utils_1.getLocalization(item.name, item.localizationId);
            }
            else {
                if (!isNaN(parseInt(this.operatorType()))) {
                    return function_1.FunctionOperatorType[this.operatorType()];
                }
                else {
                    return this.operatorType() || '';
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    FunctionOperandSurface.prototype.dispose = function () {
        this.operands().forEach(function (x) { return x.dispose(); });
        _super.prototype.dispose.call(this);
    };
    return FunctionOperandSurface;
}(operandSurfaceBase_1.OperandSurfaceBase));
exports.FunctionOperandSurface = FunctionOperandSurface;
