/**
* DevExpress Analytics (widgets\filtereditor\filtereditor.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { FilterEditorAddOn } from './helpers/_addon';
import { Disposable } from '../../serializer/utils';
import { IFilterEditorOptions } from './filtereditoroptions';
import { IItemsProvider } from '../utils';
import { IDisplayNameProvider } from '../common/displayNameProvider';
import { PopupService } from '../../property-grid/internal/_popupService';
import { DisplayExpressionConverter } from '../common/_displayNameProvider';
import { FilterEditorHelper } from './helpers/helper';
import { FilterEditorCodeCompletor } from './helpers/_codeCompletor';
export interface IFilterEditorAddon {
    data: FilterEditorAddOn;
    templateName: string;
}
export interface IAdvancedState {
    value: ko.Observable<boolean> | ko.Computed<boolean>;
    animated: boolean;
}
export declare class FilterEditor extends Disposable {
    options: ko.Observable<IFilterEditorOptions> | ko.Computed<IFilterEditorOptions>;
    private _displayNameProvider?;
    private _advancedMode;
    private _createMainPopupButtons;
    private _generateOperand;
    private _generateSurface;
    private _validateValue;
    constructor(options: ko.Observable<IFilterEditorOptions> | ko.Computed<IFilterEditorOptions>, fieldListProvider: ko.Observable<IItemsProvider> | ko.Computed<IItemsProvider>, rtl?: boolean, _displayNameProvider?: IDisplayNameProvider);
    change(type: any, surface: any): void;
    readonly helper: FilterEditorHelper;
    readonly path: ko.Observable<string> | ko.Computed<string>;
    displayValue: ko.Observable<string> | ko.Computed<string>;
    modelDisplayValue: ko.Observable<string> | ko.Computed<string>;
    disabled: ko.Observable<boolean> | ko.Computed<boolean>;
    dispose(): void;
    onInput(s: any, e: any): void;
    onFocus(): void;
    onBlur(): void;
    cacheElement($element: JQuery): void;
    updateCriteria(): void;
    onValueChange(value: any): void;
    focusText(): void;
    textFocused: ko.Observable<boolean>;
    aceAvailable: boolean;
    languageHelper: {
        getLanguageMode: () => string;
        createCompleters: (editor: any, bindingContext: any, viewModel: any) => FilterEditorCodeCompletor[];
    };
    aceOptions: {
        showLineNumbers: boolean;
        showPrintMargin: boolean;
        enableBasicAutocompletion: boolean;
        enableLiveAutocompletion: boolean;
        showGutter: boolean;
    };
    additionalOptions: {
        onChange: (session: any) => void;
        changeTimeout: number;
        onFocus: (_: any) => void;
        onBlur: (_: any) => void;
    };
    editorContainer: ko.Observable<any>;
    textVisible: ko.Observable<boolean>;
    getPopupContainer: (el: any) => JQuery<HTMLElement>;
    timeout: any;
    animationTimeout: any;
    advancedMode: ko.Computed<boolean>;
    invalidMessage: () => any;
    advancedModeText: ko.Observable<any>;
    modelValueIsValid: ko.Computed<boolean>;
    isSurfaceValid: ko.Computed<boolean>;
    showText: ko.Observable<boolean> | ko.Computed<boolean>;
    displayExpressionConverter: DisplayExpressionConverter;
    isValid: ko.Computed<boolean>;
    fieldListProvider: any;
    createAddButton: (criteria: any) => IFilterEditorAddon;
    createChangeType: (criteria: any) => IFilterEditorAddon;
    createChangeProperty: (criteria: any) => IFilterEditorAddon;
    createChangeParameter: (criteria: any) => IFilterEditorAddon;
    createChangeValueType: (criteria: any) => IFilterEditorAddon;
    operandSurface: ko.Observable<any>;
    operand: any;
    save: () => void;
    popupVisible: ko.Observable<boolean> | ko.Computed<boolean>;
    buttonItems: any[];
    popupService: PopupService;
    value: ko.Observable<string> | ko.Computed<string>;
    rtl: boolean;
}
export declare class FilterEditorPlain extends FilterEditor {
    private element;
    private _contentMargins;
    private _topOffset;
    private _defaultActiveTextContentHeightPerc;
    private _defaultActiveTreeContentHeightPerc;
    private _currentActiveTextContentHeightPerc;
    private _currentActiveTreeContentHeightPerc;
    constructor(element: Element, options: ko.Observable<IFilterEditorOptions>, fieldListProvider: ko.Observable<IItemsProvider>, rtl?: boolean, _displayNameProvider?: IDisplayNameProvider);
    plainContentHeightPerc: ko.Observable<string>;
    textContentHeightPerc: ko.Observable<any>;
    treeContentHeightPerc: ko.Observable<any>;
}
