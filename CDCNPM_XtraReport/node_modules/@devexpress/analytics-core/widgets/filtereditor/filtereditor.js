/**
* DevExpress Analytics (widgets\filtereditor\filtereditor.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../serializer/utils");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var criteriaOperator_1 = require("../criteria/operators/criteriaOperator");
var unary_1 = require("../criteria/operators/unary");
var unaryOperandSurface_1 = require("./operators/unaryOperandSurface");
var _popupService_1 = require("../../property-grid/internal/_popupService");
var _displayNameProvider_1 = require("../common/_displayNameProvider");
var _expressioneditor_1 = require("../expressioneditor/_expressioneditor");
var _codeCompletor_1 = require("./helpers/_codeCompletor");
var _utils_1 = require("../_utils");
var _internal_1 = require("../../serializer/_internal");
var text_area_1 = require("devextreme/ui/text_area");
var _ace_available_1 = require("../ace/_ace-available");
var templateUtils_1 = require("../../property-grid/widgets/templateUtils");
var group_1 = require("../criteria/operators/group");
var FilterEditor = (function (_super) {
    __extends(FilterEditor, _super);
    function FilterEditor(options, fieldListProvider, rtl, _displayNameProvider) {
        if (rtl === void 0) { rtl = false; }
        var _this = _super.call(this) || this;
        _this.options = options;
        _this._displayNameProvider = _displayNameProvider;
        _this._advancedMode = ko.observable(false);
        _this.textFocused = ko.observable(false);
        _this.aceAvailable = _ace_available_1.aceAvailable();
        _this.languageHelper = {
            getLanguageMode: function () { return 'ace/mode/criteria'; },
            createCompleters: function (editor, bindingContext, viewModel) {
                var path = ko.computed(function () { return _this.path && _this.path(); }), completor = new _codeCompletor_1.FilterEditorCodeCompletor({
                    editor: editor,
                    bindingContext: bindingContext,
                    fieldListProvider: viewModel.fieldListProvider(),
                    path: path,
                    getRealExpression: function (path, expression) {
                        return _this.displayExpressionConverter && _this.displayExpressionConverter.toRealExpression(path, expression) || $.Deferred().resolve(expression).promise();
                    }
                });
                completor._disposables.push(path);
                return [completor];
            }
        };
        _this.aceOptions = {
            showLineNumbers: false,
            showPrintMargin: false,
            enableBasicAutocompletion: true,
            enableLiveAutocompletion: true,
            showGutter: false
        };
        _this.additionalOptions = {
            onChange: function (session) { return _this.onValueChange(session.getValue()); },
            changeTimeout: 200,
            onFocus: function (_) { return _this.onFocus(); },
            onBlur: function (_) { return _this.onBlur(); }
        };
        _this.editorContainer = ko.observable();
        _this.textVisible = ko.observable(false);
        _this.getPopupContainer = function (el) {
            return _utils_1.getParentContainer(el, _this.options()['popupContainer']);
        };
        _this.timeout = null;
        _this.animationTimeout = null;
        _this.advancedMode = ko.computed({
            read: function () {
                return _this._advancedMode();
            },
            write: function (newVal) {
                _this.timeout && clearTimeout(_this.timeout);
                _this.animationTimeout && clearTimeout(_this.animationTimeout);
                if (newVal) {
                    _this.textVisible(true);
                    _this.timeout = setTimeout(function () {
                        _this._advancedMode(true);
                        _this.focusText();
                    }, 1);
                    _this.animationTimeout = setTimeout(function () {
                        _this.editorContainer() && _this.editorContainer().resize && _this.editorContainer().resize();
                    }, 210);
                }
                else {
                    _this._advancedMode(false);
                    _this.timeout = setTimeout(function () {
                        _this.textVisible(false);
                    }, 200);
                }
            },
        });
        _this.invalidMessage = function () { return localization_utils_1.getLocalization('Cannot create a tree for this expression', 'AnalyticsCoreStringId.FilterEditor_TreeCreationError'); };
        _this.advancedModeText = ko.observable(localization_utils_1.getLocalization('Advanced Mode', 'AnalyticsCoreStringId.FilterEditor_AdvancedMode'));
        _this.operandSurface = ko.observable(null);
        _this.operand = null;
        _this.popupVisible = ko.observable(false);
        _this.buttonItems = [];
        _this.popupService = new _popupService_1.PopupService();
        _this.rtl = rtl;
        options() && options().helper && (options().helper.rtl = rtl);
        _this._disposables.push(_this.disabled = ko.computed(function () {
            return ko.unwrap(_this.options() && _this.options().disabled());
        }));
        _this.value = ko.observable('');
        _this.displayExpressionConverter = _displayNameProvider && new _displayNameProvider_1.DisplayExpressionConverter(_displayNameProvider);
        _this.save = function () {
            _this.helper.onSave(_this.value());
            if (_this.operandSurface() && _this.isSurfaceValid()) {
                var value = options().helper.serializer.serialize(_this.operand, false);
                _this.options().value(value);
            }
            else {
                _this.options().value(_this.value());
            }
            _this.popupVisible(false);
        };
        _this.displayValue = _expressioneditor_1.wrapExpressionValue(_this.path, _this.value, _this.displayExpressionConverter, _this._disposables);
        var modelValue = ko.computed({
            read: function () {
                var options = _this.options();
                return options && options.value();
            },
            write: function (newVal) {
                var options = _this.options();
                options && options.value(newVal);
            }
        });
        _this.modelDisplayValue = _expressioneditor_1.wrapExpressionValue(_this.path, modelValue, _this.displayExpressionConverter, _this._disposables);
        _this.fieldListProvider = fieldListProvider;
        _this.modelValueIsValid = ko.computed(function () {
            return options() && _this._validateValue(options().value());
        });
        _this.isValid = ko.computed(function () {
            return _this._validateValue(_this.value());
        });
        _this.isSurfaceValid = ko.computed(function () {
            try {
                return _this.options() && _this.isValid() && _this.options().helper.criteriaTreeValidator.validateModel(_this.options().helper.serializer.deserialize(_this.value()));
            }
            catch (e) {
                return false;
            }
        });
        _this._disposables.push(modelValue);
        _this._disposables.push(_this.modelValueIsValid);
        _this._disposables.push(_this.isValid);
        _this._disposables.push(_this.isSurfaceValid);
        _this._disposables.push(_this.popupVisible.subscribe(function (newVal) {
            if (newVal) {
                _this.value(_this.options().value());
                if (_this.isSurfaceValid()) {
                    _this.operand = _this._generateOperand(_this.value());
                    _this.operandSurface(_this._generateSurface(_this.operand));
                }
                else {
                    _this.textVisible(true);
                    _this._advancedMode(true);
                    _this.editorContainer() && _this.focusText();
                }
                options().helper.onChange = function () {
                    _this.value(options().helper.serializer.serialize(_this.operand, false));
                };
            }
            else {
                _this.helper.onClosing();
                _this.value(null);
                _this.operandSurface() && _this.operandSurface().dispose();
                _this.operandSurface(null);
                _this.operand = null;
            }
        }));
        _this.createAddButton = function (criteria) { return options().helper.handlers.create(criteria, _this.popupService); };
        _this.createChangeType = function (criteria) { return options().helper.handlers.change(criteria, _this.popupService); };
        _this.createChangeProperty = function (criteria) { return options().helper.handlers.changeProperty(criteria, _this.popupService); };
        _this.createChangeParameter = function (criteria) { return options().helper.handlers.changeParameter(criteria, _this.popupService); };
        _this.createChangeValueType = function (criteria) { return options().helper.handlers.changeValueType(criteria, _this.popupService); };
        var saveDisabled = ko.computed(function () { return !_this.isValid(); });
        _this._disposables.push(saveDisabled);
        _this._disposables.push(_this.advancedMode);
        _this._createMainPopupButtons(saveDisabled);
        return _this;
    }
    FilterEditor.prototype._createMainPopupButtons = function (saveDisabled) {
        var self = this;
        this.buttonItems = [
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: localization_utils_1.getLocalization('Save', 'StringId.OK'), disabled: saveDisabled, onClick: function () { self.save(); } } },
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: localization_utils_1.getLocalization('Cancel', 'StringId.Cancel'), onClick: function () {
                        self.popupVisible(false);
                    }
                }
            },
            { toolbar: 'bottom', location: 'before', widget: 'dxCheckBox', options: { value: self.advancedMode, text: self.advancedModeText() } }
        ];
    };
    FilterEditor.prototype._generateOperand = function (value) {
        return this.options().helper.serializer.deserialize(value);
    };
    FilterEditor.prototype._generateSurface = function (operand) {
        var type = null;
        if (operand instanceof unary_1.UnaryOperator) {
            type = this.options().helper.mapper.Unary;
        }
        else {
            type = this.options().helper.mapper.Group;
        }
        var surface = new type(operand, this, this.fieldListProvider, this.path);
        if (surface instanceof unaryOperandSurface_1.UnaryOperandSurface) {
            if (!(surface.model.operand instanceof group_1.GroupOperator)) {
                this.operand = new group_1.GroupOperator(group_1.GroupOperatorType.And, [this.operand]);
                surface.dispose();
                return this._generateSurface(this.operand);
            }
            surface.operand().canRemove = false;
        }
        surface.canRemove = false;
        return surface;
    };
    FilterEditor.prototype._validateValue = function (value) {
        try {
            if (this.options() && this.options().helper) {
                this.options().helper.serializer.deserialize(value);
                return true;
            }
            else {
                return false;
            }
        }
        catch (e) {
            return false;
        }
    };
    FilterEditor.prototype.change = function (type, surface) {
        this.operand = criteriaOperator_1.CriteriaOperator.create(type);
        this.operand.assignFrom(surface.model);
        var type = null;
        if (this.operand instanceof unary_1.UnaryOperator) {
            type = this.options().helper.mapper.Unary;
        }
        else {
            type = this.options().helper.mapper.Group;
        }
        var surface = new type(this.operand, this, this.fieldListProvider, this.path);
        surface.canRemove = false;
        if (surface instanceof unaryOperandSurface_1.UnaryOperandSurface) {
            surface.operand().canRemove = false;
        }
        this.operandSurface(surface);
    };
    Object.defineProperty(FilterEditor.prototype, "helper", {
        get: function () {
            return this.options() && this.options().helper;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilterEditor.prototype, "path", {
        get: function () {
            return this.options() && this.options().path;
        },
        enumerable: true,
        configurable: true
    });
    FilterEditor.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.editorContainer(null);
        this.operandSurface() && this.operandSurface().dispose();
    };
    FilterEditor.prototype.onInput = function (s, e) {
        var self = this;
        this.timeout && clearTimeout(this.timeout);
        this.timeout = setTimeout(function () {
            self.onValueChange(s.component.option('text'));
        }, 200);
    };
    FilterEditor.prototype.onFocus = function () {
        this.textFocused(true);
    };
    FilterEditor.prototype.onBlur = function () {
        this.textFocused(false);
        this.helper.onEditorFocusOut(this.operand);
    };
    FilterEditor.prototype.cacheElement = function ($element) {
        this.editorContainer(text_area_1.default.getInstance($element.get(0)));
    };
    FilterEditor.prototype.updateCriteria = function () {
        if (this.isSurfaceValid()) {
            this.operand = this._generateOperand(this.value());
            this.operandSurface() && this.operandSurface().dispose();
            this.operandSurface(this._generateSurface(this.operand));
        }
    };
    FilterEditor.prototype.onValueChange = function (value) {
        var _this = this;
        if (this.displayValue() === value.trim())
            return;
        this.displayValue(value);
        if (this.displayExpressionConverter) {
            this.displayExpressionConverter.toRealExpression(this.path(), value).done(function (result) {
                _this.value(result);
                _this.updateCriteria();
            }).fail(function () {
                _this.value(value);
                _this.updateCriteria();
            });
        }
        else {
            this.updateCriteria();
        }
    };
    FilterEditor.prototype.focusText = function () {
        var focusFn = function (editor) {
            setTimeout(function (_) {
                if (editor.renderer)
                    editor.renderer.updateText();
                editor.focus();
            }, 1);
        };
        if (!this.editorContainer())
            var subscription = this.editorContainer.subscribe(function (editor) {
                subscription.dispose();
                focusFn(editor);
            });
        else
            focusFn(this.editorContainer());
    };
    return FilterEditor;
}(utils_1.Disposable));
exports.FilterEditor = FilterEditor;
ko.bindingHandlers['dxFilterEditor'] = {
    init: function (element, valueAccessor) {
        $(element).children().remove();
        $(element).addClass('dx-popup-general');
        var templateHtml = templateUtils_1.getTemplate('dx-filtereditor'), $element = $(element).append(templateHtml), values = valueAccessor();
        var itemsProvider = ko.observable(ko.unwrap(values.fieldListProvider));
        var computedFunctions = [];
        computedFunctions.push(ko.computed(function () {
            if (values.options() && values.options().itemsProvider) {
                itemsProvider(ko.unwrap(values.options().itemsProvider));
            }
            else {
                itemsProvider(ko.unwrap(values.fieldListProvider));
            }
        }));
        computedFunctions.push(ko.computed(function () {
            if (values.getDisplayNameByPath && values.options() && values.options().helper && !values.options().helper.getDisplayPropertyName) {
                values.options().helper.getDisplayPropertyName = values.getDisplayNameByPath;
            }
        }));
        var editor = new FilterEditor(values.options, itemsProvider, $(element).closest('.dx-rtl').length > 0, values.displayNameProvider);
        ko.applyBindingsToDescendants(editor, $element.children()[0]);
        _internal_1.addDisposeCallback($element.children()[0], function () {
            computedFunctions.forEach(function (x) { return x.dispose(); });
            editor.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};
var FilterEditorPlain = (function (_super) {
    __extends(FilterEditorPlain, _super);
    function FilterEditorPlain(element, options, fieldListProvider, rtl, _displayNameProvider) {
        if (rtl === void 0) { rtl = false; }
        var _this = _super.call(this, options, fieldListProvider, rtl, _displayNameProvider) || this;
        _this.element = element;
        _this._contentMargins = 20;
        _this._topOffset = 30;
        _this._defaultActiveTextContentHeightPerc = 25;
        _this._defaultActiveTreeContentHeightPerc = 75;
        _this._currentActiveTextContentHeightPerc = _this._defaultActiveTextContentHeightPerc;
        _this._currentActiveTreeContentHeightPerc = _this._defaultActiveTreeContentHeightPerc;
        _this.plainContentHeightPerc = ko.observable('100%');
        _this.textContentHeightPerc = ko.observable(null);
        _this.treeContentHeightPerc = ko.observable(null);
        var $element = $(element);
        var updateHeight = function () {
            var currentHeight = $element.height();
            _this.plainContentHeightPerc((1 - _this._topOffset / currentHeight) * 100 + '%');
            var diffPerc = (_this._contentMargins / (currentHeight - _this._topOffset)) * 100 / 2;
            _this._currentActiveTextContentHeightPerc = _this._defaultActiveTextContentHeightPerc - diffPerc;
            _this._currentActiveTreeContentHeightPerc = _this._defaultActiveTreeContentHeightPerc - diffPerc;
            if (_this.advancedMode()) {
                _this.treeContentHeightPerc(_this._currentActiveTreeContentHeightPerc);
                _this.textContentHeightPerc(_this._currentActiveTextContentHeightPerc);
            }
        };
        updateHeight();
        _this._disposables.push(_this.advancedMode.subscribe(function (newVal) {
            if (newVal) {
                _this.treeContentHeightPerc(_this._currentActiveTreeContentHeightPerc + '%');
                _this.textContentHeightPerc(_this._currentActiveTextContentHeightPerc + '%');
            }
            else {
                _this.treeContentHeightPerc(null);
                _this.textContentHeightPerc(null);
            }
        }));
        window.addEventListener('resize', updateHeight);
        _internal_1.addDisposeCallback(element, function () {
            window.removeEventListener('resize', updateHeight);
            _this.dispose();
        });
        return _this;
    }
    return FilterEditorPlain;
}(FilterEditor));
exports.FilterEditorPlain = FilterEditorPlain;
ko.components.register('dx-filtereditor-plain', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var viewModel = new FilterEditorPlain(componentInfo.element, params.options, ko.observable(params.fieldListProvider), undefined, params.displayNameProvider);
            viewModel.popupVisible(true);
            params.options().value.subscribe(function () {
                viewModel.popupVisible(false);
                viewModel.popupVisible(true);
            });
            return viewModel;
        }
    },
    template: templateUtils_1.getTemplate('dx-filtereditor-plain')
});
ko.components.register('dx-filtereditor-advanced', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var viewModel = new FilterEditor(params.options, ko.observable(params.fieldListProvider), undefined, params.displayNameProvider);
            viewModel.advancedMode(true);
            viewModel.popupVisible(true);
            params.options().value.subscribe(function () {
                viewModel.popupVisible(false);
                viewModel.popupVisible(true);
            });
            return viewModel;
        }
    },
    template: templateUtils_1.getTemplate('dx-filtereditor-advanced')
});
ko.bindingHandlers['cacheElement'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var value = valueAccessor();
        value.action($(element));
    }
};
