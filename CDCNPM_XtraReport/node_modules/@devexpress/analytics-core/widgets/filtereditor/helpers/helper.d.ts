/**
* DevExpress Analytics (widgets\filtereditor\helpers\helper.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { CriteriaOperator } from '../../criteria/operators/criteriaOperator';
import { FilterEditorSerializer } from './_serializer';
import { CriteriaSurfaceValidator } from './_validator';
import { FilterEditorAddOn } from './_addon';
import { AggregateOperandSurface } from '../operators/aggregateOperandSurface';
import { OperandPropertySurface } from '../operators/operandPropertySurface';
import { OperandParameterSurface } from '../operators/operandParameterSurface';
import { OperandValueSurface } from '../operators/operandValueSurface';
import { GroupOperandSurface } from '../operators/groupOperandSurface';
import { BetweenOperandSurface } from '../operators/betweenOperandSurface';
import { BinaryOperandSurface } from '../operators/binaryOperandSurface';
import { FunctionOperandSurface } from '../operators/functionOperandSurface';
import { InOperandSurface } from '../operators/inOperandSurface';
import { UnaryOperandSurface } from '../operators/unaryOperandSurface';
import { CriteriaOperatorSurface } from '../operators/criteriaOperatorSurface';
export interface IFilterEditorOperator {
    name: string;
    value: any;
    type: any;
    hidden?: boolean;
    reverse?: boolean;
    localizationId?: string;
    insertVal?: string;
    displayText?: string;
    paramCount?: number;
    emptyRightPart?: boolean;
}
export declare class FilterEditorHelper {
    readonly _allFilterEditorOperators: IFilterEditorOperator[];
    _getFilterEditorOperator(item: CriteriaOperator, items: IFilterEditorOperator[], reverse: boolean): IFilterEditorOperator;
    private _initDisplayText;
    constructor(serializer?: any);
    registrateOperator(specific: string, targetEnum: any, value: string, name: string, reverse?: boolean, localizationId?: string): void;
    rtl: boolean;
    parameters: ko.Observable<any[]> | ko.Computed<any[]>;
    canSelectLists: boolean;
    canCreateParameters: boolean;
    canChoiceParameters: boolean;
    canChoiceProperty: boolean;
    serializer: FilterEditorSerializer;
    criteriaTreeValidator: CriteriaSurfaceValidator;
    filterEditorOperators: {
        _common: IFilterEditorOperator[];
        string: IFilterEditorOperator[];
        guid: IFilterEditorOperator[];
        integer: IFilterEditorOperator[];
        float: IFilterEditorOperator[];
        date: IFilterEditorOperator[];
        list: IFilterEditorOperator[];
        group: IFilterEditorOperator[];
        bool: IFilterEditorOperator[];
    };
    onChange: () => void;
    onEditorFocusOut: (criteria: CriteriaOperator) => void;
    onSave: (criteria: string) => void;
    onClosing: () => void;
    handlers: {
        create: (criteria: any, popupService: any) => {
            data: FilterEditorAddOn;
            templateName: string;
        };
        change: (criteria: any, popupService: any) => {
            data: FilterEditorAddOn;
            templateName: string;
        };
        changeProperty: (criteria: any, popupService: any) => {
            data: FilterEditorAddOn;
            templateName: string;
        };
        changeValueType: (criteria: any, popupService: any) => {
            data: FilterEditorAddOn;
            templateName: string;
        };
        changeParameter: (criteria: any, popupService: any) => {
            data: FilterEditorAddOn;
            templateName: string;
        };
    };
    generateTreelistOptions(fieldListProvider: any, path: any): any;
    mapper: {
        Aggregate: typeof AggregateOperandSurface;
        Property: typeof OperandPropertySurface;
        Parameter: typeof OperandParameterSurface;
        Value: typeof OperandValueSurface;
        Group: typeof GroupOperandSurface;
        Between: typeof BetweenOperandSurface;
        Binary: typeof BinaryOperandSurface;
        Function: typeof FunctionOperandSurface;
        In: typeof InOperandSurface;
        Unary: typeof UnaryOperandSurface;
        Default: typeof CriteriaOperatorSurface;
    };
    aceTheme: string;
    getDisplayPropertyName: (path: string, name: string) => JQueryPromise<string>;
}
export declare var DefaultFilterEditorHelper: (newVal?: any) => any;
export declare function _setDefaultFilterEditorHelper(helperType: any): void;
