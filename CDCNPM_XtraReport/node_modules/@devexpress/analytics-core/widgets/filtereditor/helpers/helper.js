/**
* DevExpress Analytics (widgets\filtereditor\helpers\helper.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var _helper_1 = require("./_helper");
var _serializer_1 = require("./_serializer");
var function_1 = require("../../criteria/operators/function");
var binary_1 = require("../../criteria/operators/binary");
var in_1 = require("../../criteria/operators/in");
var unary_1 = require("../../criteria/operators/unary");
var aggregate_1 = require("../../criteria/operators/aggregate");
var group_1 = require("../../criteria/operators/group");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var _validator_1 = require("./_validator");
var between_1 = require("../../criteria/operators/between");
var _addon_1 = require("./_addon");
var _treelistController_1 = require("./_treelistController");
var aggregateOperandSurface_1 = require("../operators/aggregateOperandSurface");
var operandPropertySurface_1 = require("../operators/operandPropertySurface");
var operandParameterSurface_1 = require("../operators/operandParameterSurface");
var operandValueSurface_1 = require("../operators/operandValueSurface");
var groupOperandSurface_1 = require("../operators/groupOperandSurface");
var betweenOperandSurface_1 = require("../operators/betweenOperandSurface");
var binaryOperandSurface_1 = require("../operators/binaryOperandSurface");
var functionOperandSurface_1 = require("../operators/functionOperandSurface");
var inOperandSurface_1 = require("../operators/inOperandSurface");
var unaryOperandSurface_1 = require("../operators/unaryOperandSurface");
var criteriaOperatorSurface_1 = require("../operators/criteriaOperatorSurface");
var _internal_1 = require("../../../serializer/_internal");
var FilterEditorHelper = (function () {
    function FilterEditorHelper(serializer) {
        this.rtl = false;
        this.parameters = ko.observable([]);
        this.canSelectLists = true;
        this.canCreateParameters = false;
        this.canChoiceParameters = true;
        this.canChoiceProperty = true;
        this.criteriaTreeValidator = new _validator_1.CriteriaSurfaceValidator();
        this.filterEditorOperators = {
            _common: [
                { name: 'Equals', insertVal: '==', value: binary_1.BinaryOperatorType.Equal, type: binary_1.BinaryOperatorType, localizationId: 'StringId.FilterClauseEquals' },
                { name: 'Does not equal', hidden: true, reverse: true, value: binary_1.BinaryOperatorType.Equal, type: binary_1.BinaryOperatorType, localizationId: 'StringId.FilterClauseDoesNotEqual' },
                { name: 'Does not equal', insertVal: '!=', value: binary_1.BinaryOperatorType.NotEqual, type: binary_1.BinaryOperatorType, localizationId: 'StringId.FilterClauseDoesNotEqual' },
                { name: 'Equals', reverse: true, hidden: true, value: binary_1.BinaryOperatorType.NotEqual, type: binary_1.BinaryOperatorType, localizationId: 'StringId.FilterClauseEquals' },
                { name: 'Is greater than', insertVal: '>', value: binary_1.BinaryOperatorType.Greater, type: binary_1.BinaryOperatorType, localizationId: 'StringId.FilterClauseGreater' },
                { name: 'Is less than or equal to', hidden: true, reverse: true, value: binary_1.BinaryOperatorType.Greater, type: binary_1.BinaryOperatorType, localizationId: 'StringId.FilterClauseGreater' },
                { name: 'Is greater than or equal to', insertVal: '>=', value: binary_1.BinaryOperatorType.GreaterOrEqual, type: binary_1.BinaryOperatorType, localizationId: 'StringId.FilterClauseGreaterOrEqual' },
                { name: 'Is less than', hidden: true, reverse: true, value: binary_1.BinaryOperatorType.GreaterOrEqual, type: binary_1.BinaryOperatorType, localizationId: 'StringId.FilterClauseLess' },
                { name: 'Is less than', insertVal: '<', value: binary_1.BinaryOperatorType.Less, type: binary_1.BinaryOperatorType, localizationId: 'StringId.FilterClauseLess' },
                { name: 'Is greater than or equal to', reverse: true, hidden: true, value: binary_1.BinaryOperatorType.Less, type: binary_1.BinaryOperatorType, localizationId: 'StringId.FilterClauseGreaterOrEqual' },
                { name: 'Is less than or equal to', insertVal: '<=', value: binary_1.BinaryOperatorType.LessOrEqual, type: binary_1.BinaryOperatorType, localizationId: 'StringId.FilterClauseLessOrEqual' },
                { name: 'Is greater than', reverse: true, hidden: true, value: binary_1.BinaryOperatorType.LessOrEqual, type: binary_1.BinaryOperatorType, localizationId: 'StringId.FilterClauseGreater' },
                { name: 'Is between', value: 'Between', insertVal: 'Between(, )', paramCount: 1, type: between_1.BetweenOperator, localizationId: 'StringId.FilterClauseBetween' },
                { name: 'Is not between', value: 'Between', insertVal: 'Between(, )', paramCount: 1, type: between_1.BetweenOperator, reverse: true, localizationId: 'StringId.FilterClauseNotBetween' }
            ],
            string: [],
            guid: [],
            integer: [],
            float: [],
            date: [],
            list: [],
            group: [],
            bool: []
        };
        this.onChange = function () { };
        this.onEditorFocusOut = function (criteria) { };
        this.onSave = function (criteria) { };
        this.onClosing = function () { };
        this.handlers = {
            create: function (criteria, popupService) {
                return {
                    data: new _addon_1.FilterEditorAddOn(criteria, popupService, 'create', 'createItems'),
                    templateName: 'dx-filtereditor-create'
                };
            },
            change: function (criteria, popupService) {
                return {
                    data: new _addon_1.FilterEditorAddOn(criteria, popupService, 'change', 'items'),
                    templateName: 'dx-filtereditor-change'
                };
            },
            changeProperty: function (criteria, popupService) {
                return {
                    data: new _addon_1.FilterEditorAddOn(criteria, popupService, 'changeProperty', 'items', 'dx-filtereditor-popup-treelist'),
                    templateName: 'dx-filtereditor-changeProperty'
                };
            },
            changeValueType: function (criteria, popupService) {
                return {
                    data: new _addon_1.FilterEditorAddOn(criteria, popupService, 'changeValueType', 'changeTypeItems'),
                    templateName: 'dx-filtereditor-changeValueType'
                };
            },
            changeParameter: function (criteria, popupService) {
                return {
                    data: new _addon_1.FilterEditorAddOn(criteria, popupService, 'changeParameter', 'items'),
                    templateName: 'dx-filtereditor-changeParameter'
                };
            }
        };
        this.mapper = {
            Aggregate: aggregateOperandSurface_1.AggregateOperandSurface,
            Property: operandPropertySurface_1.OperandPropertySurface,
            Parameter: operandParameterSurface_1.OperandParameterSurface,
            Value: operandValueSurface_1.OperandValueSurface,
            Group: groupOperandSurface_1.GroupOperandSurface,
            Between: betweenOperandSurface_1.BetweenOperandSurface,
            Binary: binaryOperandSurface_1.BinaryOperandSurface,
            Function: functionOperandSurface_1.FunctionOperandSurface,
            In: inOperandSurface_1.InOperandSurface,
            Unary: unaryOperandSurface_1.UnaryOperandSurface,
            Default: criteriaOperatorSurface_1.CriteriaOperatorSurface
        };
        this.serializer = serializer || new _serializer_1.FilterEditorSerializer();
        this.filterEditorOperators.string = [].concat(this.filterEditorOperators._common, [
            { name: 'Contains', insertVal: 'Contains(, )', value: function_1.FunctionOperatorType.Contains, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterClauseContains' },
            { name: 'Does not contain', value: function_1.FunctionOperatorType.Contains, type: function_1.FunctionOperatorType, reverse: true, localizationId: 'StringId.FilterClauseDoesNotContain' },
            { name: 'Begins with', insertVal: 'StartsWith(, )', value: function_1.FunctionOperatorType.StartsWith, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterClauseBeginsWith' },
            { name: 'Ends with', insertVal: 'StartsWith(, )', value: function_1.FunctionOperatorType.EndsWith, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterClauseEndsWith' },
            { name: 'Is like', insertVal: 'Like', value: binary_1.BinaryOperatorType.Like, type: binary_1.BinaryOperatorType, localizationId: 'StringId.FilterClauseLike' },
            { name: 'Is not like', insertVal: 'Not Like', value: binary_1.BinaryOperatorType.Like, type: binary_1.BinaryOperatorType, reverse: true, localizationId: 'StringId.FilterClauseNotLike' },
            { name: 'Is any of', value: 'In', insertVal: 'In()', paramCount: 1, type: in_1.InOperator, localizationId: 'StringId.FilterClauseAnyOf' },
            { name: 'Is none of', value: 'In', type: in_1.InOperator, reverse: true, localizationId: 'StringId.FilterClauseNoneOf' },
            { name: 'Is blank', insertVal: 'IsNullOrEmpty()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsNullOrEmpty, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterClauseIsNullOrEmpty' },
            { name: 'Is not blank', insertVal: 'Not IsNullOrEmpty()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsNullOrEmpty, type: function_1.FunctionOperatorType, reverse: true, localizationId: 'StringId.FilterClauseIsNotNullOrEmpty' }
        ]);
        this.filterEditorOperators.guid = this.filterEditorOperators.string;
        this.filterEditorOperators.integer = [].concat(this.filterEditorOperators._common, [
            { name: 'Is null', insertVal: 'Is Null', value: unary_1.UnaryOperatorType.IsNull, type: unary_1.UnaryOperatorType, localizationId: 'StringId.FilterClauseIsNull' },
            { name: 'Is not null', insertVal: 'Is Not Null', value: unary_1.UnaryOperatorType.IsNull, type: unary_1.UnaryOperatorType, reverse: true, localizationId: 'StringId.FilterClauseIsNotNull' },
            { name: 'Is any of', value: 'In', insertVal: 'In()', paramCount: 1, type: in_1.InOperator, localizationId: 'StringId.FilterClauseAnyOf' },
            { name: 'Is none of', value: 'In', type: in_1.InOperator, reverse: true, localizationId: 'StringId.FilterClauseNoneOf' },
        ]);
        this.filterEditorOperators.float = this.filterEditorOperators.integer;
        this.filterEditorOperators.bool = this.filterEditorOperators.integer;
        this.filterEditorOperators.date = [].concat(this.filterEditorOperators._common, [
            { name: 'Is null', insertVal: 'Is Null', value: unary_1.UnaryOperatorType.IsNull, type: unary_1.UnaryOperatorType, localizationId: 'StringId.FilterClauseIsNull' },
            { name: 'Is not null', insertVal: 'Is Not Null', value: unary_1.UnaryOperatorType.IsNull, type: unary_1.UnaryOperatorType, reverse: true, localizationId: 'StringId.FilterClauseIsNotNull' },
            { name: 'Is any of', value: 'In', insertVal: 'In()', type: in_1.InOperator, localizationId: 'StringId.FilterClauseAnyOf' },
            { name: 'Is none of', value: 'In', type: in_1.InOperator, reverse: true, localizationId: 'StringId.FilterClauseNoneOf' },
            { name: 'Is beyond this year', insertVal: 'IsOutlookIntervalBeyondThisYear()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsOutlookIntervalBeyondThisYear, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsOutlookIntervalBeyondThisYear' },
            { name: 'Is next week', insertVal: 'IsOutlookIntervalNextWeek()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsOutlookIntervalNextWeek, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsOutlookIntervalNextWeek' },
            { name: 'Is tomorrow', insertVal: 'IsOutlookIntervalTomorrow()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsOutlookIntervalTomorrow, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsOutlookIntervalTomorrow' },
            { name: 'Is today', insertVal: 'IsOutlookIntervalToday()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsOutlookIntervalToday, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsOutlookIntervalToday' },
            { name: 'Is yesterday', insertVal: 'IsOutlookIntervalYesterday()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsOutlookIntervalYesterday, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsOutlookIntervalYesterday' },
            { name: 'Is last week', insertVal: 'IsOutlookIntervalLastWeek()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsOutlookIntervalLastWeek, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsOutlookIntervalLastWeek' },
            { name: 'Is prior this year', insertVal: 'IsOutlookIntervalPriorThisYear()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsOutlookIntervalPriorThisYear, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsOutlookIntervalPriorThisYear' },
            { name: 'Is same day', insertVal: 'IsSameDay(, )', value: function_1.FunctionOperatorType.IsSameDay, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsSameDay' },
            { name: 'Is this month', insertVal: 'IsThisMonth()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsThisMonth, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsThisMonth' },
            { name: 'Is this week', insertVal: 'IsThisWeek()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsThisWeek, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsThisWeek' },
            { name: 'Is this year', insertVal: 'IsThisYear()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsThisYear, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsThisYear' },
            { name: 'Is next month', insertVal: 'IsNextMonth', emptyRightPart: true, value: function_1.FunctionOperatorType.IsNextMonth, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsNextMonth' },
            { name: 'Is next year', insertVal: 'IsNextYear()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsNextYear, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsNextYear' },
            { name: 'Is last month', insertVal: 'IsLastMonth()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsLastMonth, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsLastMonth' },
            { name: 'Is last year', insertVal: 'IsLastYear()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsLastYear, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsLastYear' },
            { name: 'Is the year-to-date period', insertVal: 'IsYearToDate()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsYearToDate, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsYearToDate' },
            { name: 'Is January', insertVal: 'IsJanuary()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsJanuary, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsJanuary' },
            { name: 'Is February', insertVal: 'IsFebruary()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsFebruary, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsFebruary' },
            { name: 'Is March', insertVal: 'IsMarch()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsMarch, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsMarch' },
            { name: 'Is April', insertVal: 'IsApril()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsApril, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsApril' },
            { name: 'Is May', insertVal: 'IsMay()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsMay, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsMay' },
            { name: 'Is June', insertVal: 'IsJune()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsJune, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsJune' },
            { name: 'Is July', insertVal: 'IsJuly()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsJuly, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsJuly' },
            { name: 'Is August', insertVal: 'IsAugust()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsAugust, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsAugust' },
            { name: 'Is September', insertVal: 'IsSeptember()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsSeptember, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsSeptember' },
            { name: 'Is October', insertVal: 'IsOctober()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsOctober, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsOctober' },
            { name: 'Is November', insertVal: 'IsNovember()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsNovember, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsNovember' },
            { name: 'Is December', insertVal: 'IsDecember()', emptyRightPart: true, value: function_1.FunctionOperatorType.IsDecember, type: function_1.FunctionOperatorType, localizationId: 'StringId.FilterCriteriaToStringFunctionIsDecember' },
        ]);
        this.filterEditorOperators.list = [
            { name: 'Exists', value: aggregate_1.Aggregate.Exists, insertVal: 'Exists()', type: aggregate_1.Aggregate, localizationId: 'StringId.FilterAggregateExists' },
            { name: 'Count', value: aggregate_1.Aggregate.Count, insertVal: 'Count()', type: aggregate_1.Aggregate, localizationId: 'StringId.FilterAggregateCount' },
            { name: 'Max', value: aggregate_1.Aggregate.Max, insertVal: 'Max()', type: aggregate_1.Aggregate, localizationId: 'StringId.FilterAggregateMax' },
            { name: 'Min', value: aggregate_1.Aggregate.Min, insertVal: 'Min()', type: aggregate_1.Aggregate, localizationId: 'StringId.FilterAggregateMin' },
            { name: 'Sum', value: aggregate_1.Aggregate.Sum, insertVal: 'Sum()', type: aggregate_1.Aggregate, localizationId: 'StringId.FilterAggregateSum' },
            { name: 'Avg', value: aggregate_1.Aggregate.Avg, insertVal: 'Avg()', type: aggregate_1.Aggregate, localizationId: 'StringId.FilterAggregateAvg' }
        ];
        this.filterEditorOperators.group = [
            { name: 'And', insertVal: 'And', value: group_1.GroupOperatorType.And, type: group_1.GroupOperatorType, localizationId: 'StringId.FilterGroupAnd' },
            { name: 'Or', insertVal: 'Or', value: group_1.GroupOperatorType.Or, type: group_1.GroupOperatorType, localizationId: 'StringId.FilterGroupOr' },
            { name: 'Not And', value: group_1.GroupOperatorType.And, reverse: true, type: group_1.GroupOperatorType, localizationId: 'StringId.FilterGroupNotAnd' },
            { name: 'Not Or', value: group_1.GroupOperatorType.Or, reverse: true, type: group_1.GroupOperatorType, localizationId: 'StringId.FilterGroupNotOr' },
        ];
        this._initDisplayText();
    }
    Object.defineProperty(FilterEditorHelper.prototype, "_allFilterEditorOperators", {
        get: function () {
            var _this = this;
            var operators = [];
            Object.keys(this.filterEditorOperators).forEach(function (propertyName) {
                operators.push.apply(operators, _this.filterEditorOperators[propertyName]);
            });
            return operators;
        },
        enumerable: true,
        configurable: true
    });
    FilterEditorHelper.prototype._getFilterEditorOperator = function (item, items, reverse) {
        return items.filter(function (x) { return x.value === item.operatorType && x.type === item.enumType && x.reverse === reverse; })[0];
    };
    FilterEditorHelper.prototype._initDisplayText = function () {
        var _this = this;
        Object.keys(this.filterEditorOperators).forEach(function (specific) {
            _this.filterEditorOperators[specific].forEach(_helper_1.initDisplayText);
        });
    };
    FilterEditorHelper.prototype.registrateOperator = function (specific, targetEnum, value, name, reverse, localizationId) {
        if (reverse === void 0) { reverse = false; }
        if (this.filterEditorOperators[specific]) {
            if (!targetEnum[value]) {
                var maxNumber = 0;
                var index = 0;
                $.each(targetEnum, function (name, _) {
                    index = parseInt(name);
                    if (!isNaN(index) && maxNumber < index) {
                        maxNumber = index;
                    }
                });
                maxNumber++;
                targetEnum[maxNumber] = value;
                targetEnum[value] = maxNumber;
            }
            var newOperator = { name: name, value: targetEnum[value], type: targetEnum, reverse: reverse, displayText: localization_utils_1.getLocalization(name, localizationId) };
            this.filterEditorOperators[specific].push(newOperator);
        }
    };
    FilterEditorHelper.prototype.generateTreelistOptions = function (fieldListProvider, path) {
        var _this = this;
        var treeListOptions = ko.observable(null);
        var selected = ko.observable(null);
        return {
            subscription: ko.computed(function () {
                treeListOptions({
                    itemsProvider: ko.unwrap(fieldListProvider),
                    selectedPath: ko.observable(''),
                    selected: selected,
                    path: ko.unwrap(path),
                    treeListController: new _treelistController_1.FilterEditorTreeListController(selected),
                    rtl: _this.rtl
                });
            }),
            options: treeListOptions
        };
    };
    return FilterEditorHelper;
}());
exports.FilterEditorHelper = FilterEditorHelper;
exports.DefaultFilterEditorHelper = _internal_1.createGlobalModuleVariableFunc(FilterEditorHelper);
function _setDefaultFilterEditorHelper(helperType) {
    exports.DefaultFilterEditorHelper(helperType);
}
exports._setDefaultFilterEditorHelper = _setDefaultFilterEditorHelper;
