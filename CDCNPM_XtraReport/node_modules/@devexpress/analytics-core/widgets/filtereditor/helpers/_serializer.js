/**
* DevExpress Analytics (widgets\filtereditor\helpers\_serializer.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var group_1 = require("../../criteria/operators/group");
var criteriaOperator_1 = require("../../criteria/operators/criteriaOperator");
var aggregate_1 = require("../../criteria/operators/aggregate");
var property_1 = require("../../criteria/operators/property");
var _codeCompletor_1 = require("../../common/_codeCompletor");
var value_1 = require("../../criteria/operators/value");
var _internal_1 = require("../../../property-grid/widgets/internal/_internal");
var utils_1 = require("../../../serializer/utils");
var parameter_1 = require("../../criteria/operators/parameter");
var between_1 = require("../../criteria/operators/between");
var in_1 = require("../../criteria/operators/in");
var binary_1 = require("../../criteria/operators/binary");
var unary_1 = require("../../criteria/operators/unary");
var function_1 = require("../../criteria/operators/function");
var utils_2 = require("../../criteria/utils");
var constant_1 = require("../../criteria/operators/constant");
var FilterEditorSerializer = (function () {
    function FilterEditorSerializer(operatorTokens, custom) {
        if (operatorTokens === void 0) { operatorTokens = utils_2.operatorTokens; }
        this.operatorTokens = operatorTokens;
        this.custom = custom;
    }
    FilterEditorSerializer.prototype.serializeGroupOperand = function (groupOperator, reverse) {
        var _this = this;
        var result = groupOperator.operands.map(function (operand) {
            if (operand instanceof group_1.GroupOperator) {
                return '(' + _this.serialize(operand) + ')';
            }
            else {
                return _this.serialize(operand);
            }
        }).filter(function (serialize) { return serialize !== '' && serialize !== '()'; }).join(' ' + (this.operatorTokens[groupOperator.displayType] || groupOperator.displayType) + ' ');
        return reverse && result ? 'Not(' + result + ')' : result;
    };
    FilterEditorSerializer.prototype.serializeAggregateOperand = function (aggregateOperand, reverse) {
        var operatorTypeSuffix = aggregateOperand.operatorType === aggregate_1.Aggregate.Exists ? '' : '.' + aggregate_1.Aggregate[aggregateOperand.operatorType];
        var condition = aggregateOperand.condition ? this.serialize(aggregateOperand.condition) : '';
        var propertyResult = this.serialize(aggregateOperand.property);
        var conditionResult = '[' + condition + ']';
        var aggregateSuffix = aggregateOperand.operatorType !== aggregate_1.Aggregate.Exists ?
            '(' + (aggregateOperand.aggregatedExpression && this.serialize(aggregateOperand.aggregatedExpression) || '') + ')' : '';
        var result = propertyResult;
        if (!condition && !aggregateSuffix || condition) {
            result += conditionResult;
        }
        return result + operatorTypeSuffix + aggregateSuffix;
    };
    FilterEditorSerializer.prototype.serializeOperandProperty = function (operandProperty) {
        if (!operandProperty.propertyName) {
            return operandProperty.circumflex ? '^' : '[]';
        }
        var value = operandProperty.displayType;
        if (value.length - _codeCompletor_1.trimBrackets(value).length === 2) {
            value = '[' + _codeCompletor_1.trimBrackets(value).replace(/\\/g, '\\').replace(/\]/g, '\\]') + ']';
        }
        return operandProperty.circumflex ? '^.' + value : value;
    };
    FilterEditorSerializer.prototype.serializeOperandValue = function (operandValue) {
        var result = operandValue.value;
        if (result !== null && result !== undefined && ($.isNumeric(result) || String(result).toLowerCase() === 'true' || String(result).toLowerCase() === 'false')) {
            if (operandValue.specifics === 'string')
                return "'" + result + "'";
            if (operandValue.specifics === 'guid' && _internal_1.validateGuid(result))
                return '{' + result + '}';
            return result;
        }
        else if (result && operandValue.value instanceof Date) {
            return '#' + utils_1.serializeDate(result) + '#';
        }
        else if (operandValue.specifics === 'integer' || operandValue.specifics === 'integer') {
            return result || '?';
        }
        else if (operandValue.specifics === 'guid' && _internal_1.validateGuid(result)) {
            return '{' + result + '}';
        }
        if (result.indexOf("'") !== -1) {
            result = result.replace("'", "''");
        }
        return result ? "'" + result + "'" : '?';
    };
    FilterEditorSerializer.prototype.serializeOperandParameter = function (operandParameter) {
        return operandParameter.displayType;
    };
    FilterEditorSerializer.prototype.serializeBetweenOperator = function (betweenOperator, reverse) {
        var result = this.serialize(betweenOperator.property) + ' ' + betweenOperator.displayType +
            '(' + this.serialize(betweenOperator.begin) + ', ' + this.serialize(betweenOperator.end) + ')';
        return reverse ? 'Not ' + result : result;
    };
    FilterEditorSerializer.prototype.serializeInOperator = function (inOperator, reverse) {
        var _this = this;
        var result = this.serialize(inOperator.criteriaOperator) + ' ' + inOperator.displayType + '(' +
            inOperator.operands.map(function (operand) { return _this.serialize(operand); }).join(', ') + ')';
        return reverse ? 'Not ' + result : result;
    };
    FilterEditorSerializer.prototype.serializeBinaryOperator = function (binaryOperator, reverse) {
        if (binaryOperator.operatorType === binary_1.BinaryOperatorType.Like) {
            var separator = reverse ? ' Not ' : ' ';
            return this.serialize(binaryOperator.leftOperand) + separator + (this.operatorTokens[binaryOperator.displayType] || binaryOperator.displayType) + ' ' + this.serialize(binaryOperator.rightOperand);
        }
        return (reverse ? 'Not ' : '') + this.serialize(binaryOperator.leftOperand) + ' ' + (this.operatorTokens[binaryOperator.displayType] || binaryOperator.displayType) + ' ' + this.serialize(binaryOperator.rightOperand);
    };
    FilterEditorSerializer.prototype.serializeUnaryOperator = function (unaryOperator, reverse) {
        if (unaryOperator.operatorType === unary_1.UnaryOperatorType.IsNull) {
            var separator = reverse ? ' Not ' : ' ';
            return this.serialize(unaryOperator.operand) + ' Is' + separator + 'Null';
        }
        else if (unaryOperator.operatorType === unary_1.UnaryOperatorType.Not) {
            return this.serialize(unaryOperator.operand, true);
        }
        var result = (this.operatorTokens[unaryOperator.displayType] || unaryOperator.displayType) + this.serialize(unaryOperator.operand);
        return reverse ? 'Not ' + result : result;
    };
    FilterEditorSerializer.prototype.serializeFunctionOperator = function (functionOperator, reverse) {
        var _this = this;
        var result = (this.operatorTokens[functionOperator.displayType] || functionOperator.displayType) + '(' + functionOperator.operands.map(function (operand) {
            return _this.serialize(operand);
        }).join(', ') + ')';
        return reverse ? 'Not ' + result : result;
    };
    FilterEditorSerializer.prototype.serialize = function (criteriaOperator, reverse) {
        if (reverse === void 0) { reverse = false; }
        if (criteriaOperator instanceof aggregate_1.AggregateOperand) {
            return this.serializeAggregateOperand(criteriaOperator, reverse);
        }
        if (criteriaOperator instanceof between_1.BetweenOperator) {
            return this.serializeBetweenOperator(criteriaOperator, reverse);
        }
        if (criteriaOperator instanceof binary_1.BinaryOperator) {
            return this.serializeBinaryOperator(criteriaOperator, reverse);
        }
        if (criteriaOperator instanceof constant_1.ConstantValue) {
            return this.serializeOperandValue(criteriaOperator);
        }
        if (criteriaOperator instanceof function_1.FunctionOperator) {
            return this.serializeFunctionOperator(criteriaOperator, reverse);
        }
        if (criteriaOperator instanceof group_1.GroupOperator) {
            return this.serializeGroupOperand(criteriaOperator, reverse);
        }
        if (criteriaOperator instanceof in_1.InOperator) {
            return this.serializeInOperator(criteriaOperator, reverse);
        }
        if (criteriaOperator instanceof parameter_1.OperandParameter) {
            return this.serializeOperandParameter(criteriaOperator);
        }
        if (criteriaOperator instanceof property_1.OperandProperty) {
            return this.serializeOperandProperty(criteriaOperator);
        }
        if (criteriaOperator instanceof value_1.OperandValue) {
            return this.serializeOperandValue(criteriaOperator);
        }
        if (criteriaOperator instanceof unary_1.UnaryOperator) {
            return this.serializeUnaryOperator(criteriaOperator, reverse);
        }
        if (this.custom) {
            return this.custom(criteriaOperator, reverse);
        }
        throw Error('Undefined type criteria operator');
    };
    FilterEditorSerializer.prototype.deserialize = function (stringCriteria) {
        return this.deserializeOperand(criteriaOperator_1.CriteriaOperator.parse(stringCriteria));
    };
    FilterEditorSerializer.prototype.deserializeOperand = function (operand) {
        if (operand instanceof group_1.GroupOperator) {
            return operand;
        }
        else if (operand instanceof unary_1.UnaryOperator && operand.operatorType === unary_1.UnaryOperatorType.Not) {
            var child = operand['operand'];
            if (child instanceof group_1.GroupOperator || child instanceof function_1.FunctionOperator) {
                return operand;
            }
            else if (child instanceof unary_1.UnaryOperator && operand.operatorType === unary_1.UnaryOperatorType.Not
                && !(child.operand instanceof property_1.OperandProperty)) {
                return this.deserializeOperand(child.operand);
            }
            return new unary_1.UnaryOperator(unary_1.UnaryOperatorType.Not, new group_1.GroupOperator(group_1.GroupOperatorType.And, child ? [child] : []));
        }
        return new group_1.GroupOperator(group_1.GroupOperatorType.And, operand ? [operand] : []);
    };
    return FilterEditorSerializer;
}());
exports.FilterEditorSerializer = FilterEditorSerializer;
