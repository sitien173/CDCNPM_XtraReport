/**
* DevExpress Analytics (widgets\filtereditor\helpers\_validator.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var property_1 = require("../../criteria/operators/property");
var parameter_1 = require("../../criteria/operators/parameter");
var value_1 = require("../../criteria/operators/value");
var constant_1 = require("../../criteria/operators/constant");
var unary_1 = require("../../criteria/operators/unary");
var aggregate_1 = require("../../criteria/operators/aggregate");
var group_1 = require("../../criteria/operators/group");
var CriteriaSurfaceValidatorState;
(function (CriteriaSurfaceValidatorState) {
    CriteriaSurfaceValidatorState[CriteriaSurfaceValidatorState["Left"] = 0] = "Left";
    CriteriaSurfaceValidatorState[CriteriaSurfaceValidatorState["Right"] = 1] = "Right";
    CriteriaSurfaceValidatorState[CriteriaSurfaceValidatorState["Unary"] = 2] = "Unary";
})(CriteriaSurfaceValidatorState = exports.CriteriaSurfaceValidatorState || (exports.CriteriaSurfaceValidatorState = {}));
var CriteriaSurfaceValidator = (function () {
    function CriteriaSurfaceValidator() {
    }
    CriteriaSurfaceValidator.prototype.customValidate = function (operator, from) {
        return false;
    };
    CriteriaSurfaceValidator.prototype.checkLeftPart = function (leftPart) {
        return leftPart instanceof property_1.OperandProperty || this.customValidate(leftPart, CriteriaSurfaceValidatorState.Left);
    };
    CriteriaSurfaceValidator.prototype._checkRightPart = function (criteriaOperator) {
        return criteriaOperator instanceof property_1.OperandProperty
            || criteriaOperator instanceof parameter_1.OperandParameter
            || criteriaOperator instanceof value_1.OperandValue
            || criteriaOperator instanceof constant_1.ConstantValue
            || (criteriaOperator instanceof unary_1.UnaryOperator && this._checkRightPart(criteriaOperator.operand))
            || this.customValidate(criteriaOperator, CriteriaSurfaceValidatorState.Right);
    };
    CriteriaSurfaceValidator.prototype.checkRightPart = function (rigthPart) {
        if (Array.isArray(rigthPart)) {
            for (var i = 0; i < rigthPart.length; i++) {
                if (!this._checkRightPart(rigthPart[i])) {
                    return false;
                }
            }
            return true;
        }
        else {
            return this._checkRightPart(rigthPart);
        }
    };
    CriteriaSurfaceValidator.prototype.aggregateIsValid = function (criteriaOperator) {
        return this.checkLeftPart(criteriaOperator.leftPart)
            && this.validateModel(criteriaOperator.condition)
            && (!!criteriaOperator.aggregatedExpression ?
                (criteriaOperator.aggregatedExpression instanceof property_1.OperandProperty ||
                    this.validateModel(criteriaOperator.aggregatedExpression))
                : true);
    };
    CriteriaSurfaceValidator.prototype.commonOperandValid = function (criteriaOperator) {
        return criteriaOperator.leftPart instanceof aggregate_1.AggregateOperand ?
            this.validateModel(criteriaOperator.leftPart) : this.checkLeftPart(criteriaOperator.leftPart)
            && this.checkRightPart(criteriaOperator.rightPart);
    };
    CriteriaSurfaceValidator.prototype.groupIsValid = function (criteriaOperator) {
        for (var i = 0; i < criteriaOperator.operands.length; i++) {
            if (!this.validateModel(criteriaOperator.operands[i])) {
                return false;
            }
        }
        return true;
    };
    CriteriaSurfaceValidator.prototype.unaryIsValid = function (criteriaOperator) {
        return criteriaOperator.operand instanceof property_1.OperandProperty || this.validateModel(criteriaOperator.operand) || this.customValidate(criteriaOperator.operand, CriteriaSurfaceValidatorState.Unary);
    };
    CriteriaSurfaceValidator.prototype.validateModel = function (criteriaOperator) {
        if (criteriaOperator instanceof aggregate_1.AggregateOperand) {
            return this.aggregateIsValid(criteriaOperator);
        }
        else if (criteriaOperator instanceof group_1.GroupOperator) {
            return this.groupIsValid(criteriaOperator);
        }
        else if (criteriaOperator instanceof unary_1.UnaryOperator) {
            return this.unaryIsValid(criteriaOperator);
        }
        else {
            return this.commonOperandValid(criteriaOperator);
        }
    };
    return CriteriaSurfaceValidator;
}());
exports.CriteriaSurfaceValidator = CriteriaSurfaceValidator;
