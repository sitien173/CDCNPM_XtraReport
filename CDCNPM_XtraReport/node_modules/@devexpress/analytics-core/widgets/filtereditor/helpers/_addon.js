/**
* DevExpress Analytics (widgets\filtereditor\helpers\_addon.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../../../serializer/utils");
var _localization_1 = require("../../../property-grid/localization/_localization");
var FilterEditorAddOn = (function (_super) {
    __extends(FilterEditorAddOn, _super);
    function FilterEditorAddOn(criteria, popupService, action, propertyName, templateName) {
        var _this = _super.call(this) || this;
        _this._filterPlaceHolder = _localization_1.searchPlaceholder();
        _this.showPopup = function (_, element) {
            _this.dispose();
            _this._disposables.splice(0);
            _this._popupService.title('');
            _this.target.isSelected(true);
            _this._updateActions(_this.target);
            _this._popupService.target(element);
            setTimeout(function () {
                _this._popupService.visible(true);
            }, 10);
        };
        _this.popupContentTemplate = 'dx-filtereditor-popup-common';
        _this.filterString = ko.observable('');
        _this.isFiltered = ko.observable(false);
        _this.target = criteria;
        _this._action = action;
        _this.propertyName = propertyName;
        _this._popupService = popupService;
        _this.popupContentTemplate = templateName || _this.popupContentTemplate;
        return _this;
    }
    FilterEditorAddOn.prototype._updateActions = function (viewModel) {
        var _this = this;
        this._popupService.data(null);
        if (viewModel) {
            this._disposables.push(this._popupService.visible.subscribe(function (newVal) {
                _this.target.isSelected(newVal);
                _this.filterString('');
            }));
            this._popupService['viewModel'] = viewModel;
            var data = viewModel[this.propertyName];
            this.isFiltered(false);
            if (data && data.length > 10) {
                this.isFiltered(true);
                this._disposables.push(data = ko.pureComputed(function () {
                    if (!_this.filterString())
                        return viewModel[_this.propertyName];
                    return viewModel[_this.propertyName].filter(function (x) { return (x.displayText || x.name).toLocaleLowerCase().indexOf(_this.filterString().toLocaleLowerCase()) != -1; });
                }));
            }
            this._popupService.data({
                data: data,
                template: this.popupContentTemplate,
                click: function (data) {
                    viewModel[_this._action](data);
                    _this._popupService.visible(false);
                },
                isFiltered: this.isFiltered,
                filterString: this.filterString,
                searchPlaceholder: function () { return _localization_1.searchPlaceholder(); },
                height: this.isFiltered() || data instanceof Function ? 'calc(100% - 30px)' : '100%'
            });
        }
    };
    return FilterEditorAddOn;
}(utils_1.Disposable));
exports.FilterEditorAddOn = FilterEditorAddOn;
