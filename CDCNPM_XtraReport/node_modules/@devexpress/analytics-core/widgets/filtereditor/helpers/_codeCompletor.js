/**
* DevExpress Analytics (widgets\filtereditor\helpers\_codeCompletor.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _codeCompletor_1 = require("../../common/_codeCompletor");
var helper_1 = require("./helper");
var function_1 = require("../../criteria/operators/function");
var aggregate_1 = require("../../criteria/operators/aggregate");
var FilterEditorCodeCompletor = (function (_super) {
    __extends(FilterEditorCodeCompletor, _super);
    function FilterEditorCodeCompletor(options) {
        var _this = _super.call(this, options) || this;
        var helper = new helper_1.FilterEditorHelper();
        var functions = [];
        var aggregate = [];
        var operators = [];
        var groups = Object.keys(helper.filterEditorOperators);
        groups.forEach(function (groupName) {
            helper.filterEditorOperators[groupName].forEach(function (operator) {
                if (operator.insertVal) {
                    var name = operator.name, insertVal = operator.insertVal, paramCount = operator.paramCount;
                    if (operator.type === function_1.FunctionOperatorType && functions.filter(function (x) { return x.name === name; }).length === 0) {
                        functions.push({ name: name, insertVal: insertVal });
                    }
                    else if (operator.type === aggregate_1.Aggregate && aggregate.filter(function (x) { return x.name === name; }).length === 0) {
                        aggregate.push({ name: name, insertVal: insertVal });
                    }
                    else if (operator.type !== aggregate_1.Aggregate && operator.type !== function_1.FunctionOperatorType && operators.filter(function (x) { return x.name === name; }).length === 0) {
                        operators.push({ name: name, insertVal: insertVal, paramCount: paramCount });
                    }
                }
            });
        });
        _this.filterEditorAvailable = { operators: operators, aggregate: aggregate, functions: functions };
        return _this;
    }
    FilterEditorCodeCompletor.prototype.getFunctionsCompletions = function () {
        var functions = [];
        this.filterEditorAvailable.functions.forEach(function (funcItem) {
            functions.push(_codeCompletor_1.createFunctionCompletion({ text: funcItem.name, paramCount: funcItem.insertVal.split(',').length }, funcItem.insertVal, funcItem.insertVal));
        });
        return functions;
    };
    FilterEditorCodeCompletor.prototype.getAggregateCompletions = function () {
        var functions = [];
        this.filterEditorAvailable.aggregate.forEach(function (funcItem) {
            functions.push(_codeCompletor_1.createFunctionCompletion({ text: funcItem.name, paramCount: 0 }, funcItem.insertVal, funcItem.insertVal));
        });
        return functions;
    };
    FilterEditorCodeCompletor.prototype.getOperatorCompletions = function (prefix) {
        var operators = [];
        this.filterEditorAvailable.operators.forEach(function (operator) {
            operators.push((operator.insertVal.match(new RegExp('[\(][^\(\)]*[\)]', 'g'))) ?
                _codeCompletor_1.createFunctionCompletion({ text: operator.name, paramCount: operator.paramCount || operator.insertVal.split(',').length }, operator.insertVal, operator.insertVal) :
                { caption: operator.insertVal, snippet: prefix + operator.insertVal, meta: 'operator' });
        });
        return operators;
    };
    return FilterEditorCodeCompletor;
}(_codeCompletor_1.CodeCompletor));
exports.FilterEditorCodeCompletor = FilterEditorCodeCompletor;
