/**
* DevExpress Analytics (serializer\serializer.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _utils_1 = require("./_utils");
var utils_1 = require("./utils");
var ModelSerializer = (function () {
    function ModelSerializer(options) {
        this._refTable = {};
        this._linkTable = {};
        this._options = _utils_1.extend({
            useRefs: true,
            serializeDate: utils_1.serializeDate
        }, options);
    }
    ModelSerializer.prototype.linkObjects = function () {
        var _this = this;
        Object.keys(this._linkTable).forEach(function (index) {
            var val = _this._refTable[index];
            if (val) {
                _this._linkTable[index].splice(0).forEach(function (property) { return property(val); });
            }
        });
    };
    ModelSerializer.prototype._getModel = function (model, propertyPath) {
        var currentModel = model;
        propertyPath.forEach(function (name) {
            currentModel = currentModel[name];
        });
        return currentModel;
    };
    ModelSerializer.prototype._collectLinks = function (model, internalModel, propertyPath, propertyName) {
        var _this = this;
        var refVal = model[propertyName].slice('#Ref-'.length);
        var value = ko.observable();
        this._linkTable[refVal] = this._linkTable[refVal] || [];
        this._linkTable[refVal].push(value);
        if (!internalModel._restoreLinks)
            internalModel._restoreLinks = [];
        internalModel._restoreLinks.push(function (model) {
            var currentModel = _this._getModel(model, propertyPath);
            return {
                setRef: function (ref) {
                    if (ref === -1)
                        delete currentModel[propertyName];
                    else
                        currentModel[propertyName] = '#Ref-' + ref;
                },
                obj: value()
            };
        });
    };
    ModelSerializer.prototype._enumRefs = function (internalModel, propertyPath, propertyName) {
        var _this = this;
        if (!internalModel._refs)
            internalModel._refs = [];
        internalModel._refs.push(function (model, ref) {
            _this._getModel(model, propertyPath)[propertyName] = ref;
        });
    };
    ModelSerializer.prototype._collectLinksAndEnumRefs = function (model, internalModel, propertyPath) {
        var _this = this;
        if (internalModel === void 0) { internalModel = null; }
        if (propertyPath === void 0) { propertyPath = []; }
        var start = internalModel === null;
        internalModel = internalModel || model;
        Object.keys(model).forEach(function (propertyName) {
            if (model[propertyName] instanceof Object) {
                _this._collectLinksAndEnumRefs(model[propertyName], internalModel, [].concat(propertyPath, [propertyName]));
            }
            else if (model[propertyName].indexOf && model[propertyName].indexOf('#Ref-') === 0) {
                _this._collectLinks(model, internalModel, propertyPath, propertyName);
            }
            else if (!start && propertyName === '@Ref') {
                _this._enumRefs(internalModel, propertyPath, propertyName);
            }
        });
        if (start)
            this.linkObjects();
    };
    ModelSerializer.prototype.setLinks = function (refs) {
        refs.linkObjTable.forEach(function (item) {
            var refValue = refs.objects.indexOf(item.obj);
            item.setRef(refValue);
        });
    };
    ModelSerializer.prototype.deserializeProperty = function (modelPropertyInfo, model) {
        var propName = modelPropertyInfo.modelName;
        if (!propName) {
            return;
        }
        var modelValue = model[propName] !== undefined ? model[propName] : modelPropertyInfo.defaultVal;
        return this.deserializePropertyValue(modelPropertyInfo, modelValue);
    };
    ModelSerializer.prototype.deserializeDefaultValue = function (modelPropertyInfo) {
        var value = this.deserializePropertyValue(modelPropertyInfo, modelPropertyInfo.defaultVal, false);
        return value || modelPropertyInfo.defaultVal;
    };
    ModelSerializer.prototype.deserializePropertyValue = function (modelPropertyInfo, modelValue, strict) {
        var _this = this;
        if (strict === void 0) { strict = true; }
        if (typeof modelPropertyInfo === 'string') {
            return ko.observable(modelValue);
        }
        else if (modelPropertyInfo.link) {
            var value = ko.observable(null);
            if (modelValue) {
                var refVal = modelValue && modelValue.slice('#Ref-'.length);
                this._linkTable[refVal] = this._linkTable[refVal] || [];
                this._linkTable[refVal].push(value);
            }
            return value;
        }
        else if (modelPropertyInfo.array) {
            if (modelPropertyInfo.from) {
                return modelPropertyInfo.from(modelValue, this);
            }
            else if (modelPropertyInfo.info) {
                var result = Object.keys(modelValue || {}).map(function (propertyName) {
                    var object = { getInfo: function () { return modelPropertyInfo.info; } };
                    _this.deserialize(object, modelValue[propertyName] || {});
                    return object;
                });
                return ko.observableArray(result);
            }
            return;
        }
        else if (modelPropertyInfo.from) {
            return modelPropertyInfo.from(modelValue, this);
        }
        else if (modelPropertyInfo.type) {
            var ctorResult = new modelPropertyInfo.type(modelValue, this, modelPropertyInfo.info);
            if (!ctorResult._model) {
                this.deserialize(ctorResult, modelValue || {}, modelPropertyInfo.info);
            }
            return ctorResult;
        }
        else if (modelPropertyInfo.info) {
            var object = { getInfo: function () { return modelPropertyInfo.info; } };
            this.deserialize(object, modelValue || {});
            return object;
        }
        else if (modelPropertyInfo.modelName) {
            return ko.observable(modelValue);
        }
        if (strict) {
            throw new Error("Invalid info '" + JSON.stringify(modelPropertyInfo) + "'");
        }
        return;
    };
    ModelSerializer.prototype.deserialize = function (viewModel, model, serializationsInfo) {
        var _this = this;
        if (serializationsInfo === void 0) { serializationsInfo = null; }
        if (!model) {
            return;
        }
        viewModel._model = _utils_1.extend({}, model);
        var serializationsInfo = viewModel.getInfo ? viewModel.getInfo() : serializationsInfo;
        var refValue = model['@Ref'];
        var proto = Object.getPrototypeOf(viewModel);
        serializationsInfo.forEach(function (modelPropertyInfo) {
            var propertyName = modelPropertyInfo.propertyName, propName = modelPropertyInfo.modelName;
            if (model[propName] !== undefined) {
                delete viewModel._model[propName];
            }
            var property = _this.deserializeProperty(modelPropertyInfo, model);
            var descriptor = Object.getOwnPropertyDescriptor(proto, propertyName);
            if (property !== undefined && (!descriptor || !!descriptor.set))
                viewModel[propertyName] = property;
            if (!(propertyName in viewModel) && property === undefined && modelPropertyInfo.array) {
                var currentArray = ko.observable(undefined);
                Object.defineProperty(viewModel, propertyName, {
                    get: function () {
                        return currentArray();
                    },
                    set: function (val) {
                        currentArray(val);
                    },
                    enumerable: true
                });
            }
        });
        if (refValue) {
            this._refTable[refValue] = viewModel;
        }
        this.linkObjects();
    };
    ModelSerializer.prototype.serialize = function (viewModel, serializationsInfo, refs) {
        if (refs === void 0) { refs = null; }
        if (!serializationsInfo && !refs) {
            return this._serialize(viewModel, null, null);
        }
        return this._serialize(viewModel, serializationsInfo, refs);
    };
    ModelSerializer.prototype._isSerializableValue = function (resultValue) {
        return (_utils_1.isPlainObject(resultValue) && !_utils_1.isEmptyObject(resultValue)) || (Array.isArray(resultValue) && resultValue['length'] > 0) || (!Array.isArray(resultValue) && !_utils_1.isPlainObject(resultValue));
    };
    ModelSerializer.prototype.serializeProperty = function (modelPropertyInfo, viewModel, serializationsInfo, refs, result) {
        var _this = this;
        var propertyName = modelPropertyInfo.propertyName, value = ko.unwrap(viewModel['_' + propertyName] || viewModel[propertyName]), defaultVal = modelPropertyInfo.defaultVal;
        if (modelPropertyInfo.beforeSerialize)
            value = modelPropertyInfo.beforeSerialize(value);
        if (!!modelPropertyInfo.from) {
            defaultVal = ko.unwrap(modelPropertyInfo.from(defaultVal, this));
        }
        var resultValue = {};
        if (!modelPropertyInfo.modelName) {
            return;
        }
        if (modelPropertyInfo.alwaysSerialize || ((value !== undefined && value !== null) && ((_utils_1.isPlainObject(value) || !_utils_1.isEmptyObject(value)) || (Array.isArray(value) && value.length > 0) || (!Array.isArray(value) && !_utils_1.isPlainObject(value))) && (value !== defaultVal))) {
            if (modelPropertyInfo.link) {
                refs.linkObjTable.push({
                    obj: value,
                    setRef: function (index) {
                        if (index < 0) {
                            delete result[modelPropertyInfo.modelName];
                        }
                        else {
                            result[modelPropertyInfo.modelName] = '#Ref-' + index;
                        }
                    }
                });
                resultValue = undefined;
            }
            else if (modelPropertyInfo.array) {
                resultValue = {};
                var index = 1;
                value.forEach(function (item) {
                    var info = modelPropertyInfo.info || null;
                    var item_ = _this._serialize(item, info, refs);
                    if (_this._isSerializableValue(item_) || modelPropertyInfo.alwaysSerialize) {
                        resultValue['Item' + index] = item_;
                        if (_this._options.useRefs) {
                            item_['@Ref'] = (refs.objects.push(item) - 1).toString();
                        }
                        index++;
                    }
                });
            }
            else if (modelPropertyInfo.from) {
                if (value['isEmpty'] && value['isEmpty']()) {
                    resultValue = {};
                }
                else {
                    resultValue = modelPropertyInfo.toJsonObject ? modelPropertyInfo.toJsonObject(value, this, refs) : value.toString();
                }
            }
            else if (modelPropertyInfo.info || value['getInfo']) {
                resultValue = this._serialize(value, modelPropertyInfo.info, refs);
            }
            else if (modelPropertyInfo.modelName) {
                if (value instanceof Date) {
                    resultValue = this._options.serializeDate(value);
                }
                else {
                    resultValue = value;
                }
            }
            else {
                throw new Error("Invalid info '" + serializationsInfo.stringify() + "'");
            }
            if (modelPropertyInfo.alwaysSerialize || this._isSerializableValue(resultValue)) {
                if (modelPropertyInfo.asRef) {
                    resultValue['@Ref'] = (refs.objects.push(value) - 1).toString();
                }
                result[modelPropertyInfo.modelName] = resultValue;
            }
        }
    };
    ModelSerializer.prototype._serialize = function (viewModel, serializationsInfo, refs) {
        var _this = this;
        var result = _utils_1.extend(true, {}, viewModel._model), isInitial = refs === null;
        refs = refs || { linkObjTable: [], objects: [] };
        if (result._restoreLinks) {
            refs.linkObjTable.push.apply(refs.linkObjTable, result._restoreLinks.map(function (x) { return x(result); }));
            delete result._restoreLinks;
        }
        if (result._refs) {
            result._refs.forEach(function (x) { return x(result, (refs.objects.push('0') - 1).toString()); });
            delete result._refs;
        }
        serializationsInfo = viewModel.getInfo ? viewModel.getInfo() : serializationsInfo;
        delete result['@Ref'];
        if (viewModel['isEmpty'] && viewModel['isEmpty']())
            return {};
        serializationsInfo.forEach(function (modelPropertyInfo) {
            _this.serializeProperty(modelPropertyInfo, viewModel, serializationsInfo, refs, result);
        });
        if (isInitial)
            this.setLinks(refs);
        return result;
    };
    return ModelSerializer;
}());
exports.ModelSerializer = ModelSerializer;
