/**
* DevExpress Analytics (serializer\_internal.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
function _defineProperty(legacyObject, realObject, propertyName, newPropertyName) {
    delete legacyObject[propertyName];
    newPropertyName = newPropertyName || propertyName;
    Object.defineProperty(legacyObject, propertyName, {
        get: function () { return realObject[newPropertyName]; },
        set: function (newVal) { realObject[newPropertyName] = newVal; },
        configurable: true
    });
}
exports._defineProperty = _defineProperty;
function _definePropertyByString(rootObject) {
    var objectPathes = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        objectPathes[_i - 1] = arguments[_i];
    }
    var getAndCreateObject = function (path, createNew) {
        if (createNew === void 0) { createNew = true; }
        var pathParts = path.split('.');
        var foundedObject = rootObject;
        for (var i = 0; i < pathParts.length - 1; i++) {
            if (!foundedObject[pathParts[i]] && createNew) {
                foundedObject[pathParts[i]] = {};
            }
            foundedObject = foundedObject[pathParts[i]];
        }
        return {
            object: foundedObject,
            propertyName: pathParts[pathParts.length - 1]
        };
    };
    var realObjectPath = objectPathes[objectPathes.length - 1];
    var realObject = getAndCreateObject(objectPathes[objectPathes.length - 1]);
    for (var i = 0; i < objectPathes.length - 1; i++) {
        (function (legacyObjectPath, legacyObject) {
            Object.defineProperty(legacyObject.object, legacyObject.propertyName, {
                get: function () {
                    console.warn('DevExpress.' + legacyObjectPath + ' is now deprecated and will be removed in future versions. Use DevExpress.' + realObjectPath + ' instead.');
                    return realObject.object[realObject.propertyName];
                },
                set: function (newVal) {
                    console.warn('DevExpress.' + legacyObjectPath + ' is now deprecated and will be removed in future versions. Use DevExpress.' + realObjectPath + ' instead.');
                    realObject.object[realObject.propertyName] = newVal;
                },
                configurable: true
            });
        })(objectPathes[i], getAndCreateObject(objectPathes[i]));
    }
}
exports._definePropertyByString = _definePropertyByString;
function addDisposeCallback(element, callback) {
    var disposeCallback = function () {
        ko.utils.domNodeDisposal.removeDisposeCallback(element, disposeCallback);
        callback && callback();
        disposeCallback = null;
        callback = null;
    };
    ko.utils.domNodeDisposal.addDisposeCallback(element, disposeCallback);
}
exports.addDisposeCallback = addDisposeCallback;
function createGlobalModuleVariableFunc(defaultVal) {
    var currentValue = defaultVal;
    return function (newVal) {
        if (newVal !== undefined)
            currentValue = newVal;
        return currentValue;
    };
}
exports.createGlobalModuleVariableFunc = createGlobalModuleVariableFunc;
