/**
* DevExpress Analytics (serializer\eventManager.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var EventManager = (function (_super) {
    __extends(EventManager, _super);
    function EventManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._handlers = [];
        return _this;
    }
    EventManager.prototype.dispose = function () {
        this._handlers = [];
    };
    EventManager.prototype.call = function (type, args) {
        this._handlers.filter(function (x) { return x.type === type; }).forEach(function (x) { return x.value(args); });
    };
    EventManager.prototype.addHandler = function (type, listener) {
        this._handlers.push({
            type: type,
            value: listener
        });
    };
    EventManager.prototype.removeHandler = function (type, listener) {
        var item = this._handlers.filter(function (handler) { return handler.type === type && handler.value === listener; })[0];
        var index = this._handlers.indexOf(item);
        if (index !== -1) {
            this._handlers.splice(index, 1);
        }
    };
    return EventManager;
}(utils_1.Disposable));
exports.EventManager = EventManager;
