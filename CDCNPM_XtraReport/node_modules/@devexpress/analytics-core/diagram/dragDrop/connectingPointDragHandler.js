/**
* DevExpress Analytics (diagram\dragDrop\connectingPointDragHandler.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _dragDropHandler_1 = require("../../core/dragDrop/_dragDropHandler");
var connectingPointSurface_1 = require("../elements/connectingPointSurface");
var diagramElementModel_1 = require("../elements/diagramElementModel");
var connectingPointModel_1 = require("../elements/connectingPointModel");
var _surfaceHelpers_1 = require("../../core/internal/_surfaceHelpers");
var ConnectingPointDragHandler = (function (_super) {
    __extends(ConnectingPointDragHandler, _super);
    function ConnectingPointDragHandler(surface, selection, undoEngine, snapHelper, dragHelperContent) {
        var _this = _super.call(this, surface, selection, undoEngine, snapHelper, dragHelperContent) || this;
        _this.startConnectingPoint = null;
        _this.newConnector = null;
        _this.cursor = 'arrow';
        _this.containment = '.dxrd-ghost-container';
        _this['helper'] = function (draggable) {
            dragHelperContent.update(draggable);
        };
        return _this;
    }
    ConnectingPointDragHandler.prototype.startDrag = function (control) {
        if (!(control instanceof connectingPointSurface_1.ConnectingPointSurface)) {
            throw new Error('ConnectingPointDragHandler can be applied to the ConnectingPoint only.');
        }
        this.startConnectingPoint = control;
        var diagramElement = this.startConnectingPoint.parent.getControlModel();
        this.newConnector = diagramElement.parentModel().createChild({ '@ControlType': 'RoutedConnector' });
        this.newConnector.startPoint().connectingPoint(this.startConnectingPoint.getControlModel());
    };
    ConnectingPointDragHandler.prototype.drag = function (event, ui) {
        ui.position.left += ui['scroll'].left;
        ui.position.top += ui['scroll'].top;
        var position = this._getAbsoluteSurfacePosition(ui);
        this.newConnectorSurface.endPoint().rect({ top: position.top, left: position.left });
    };
    ConnectingPointDragHandler.prototype.doStopDrag = function () {
        this.dragHelperContent.reset();
        if (this.selection.dropTarget) {
            var dropTarget = this.selection.dropTarget.getControlModel();
            if (dropTarget instanceof connectingPointModel_1.ConnectingPointViewModel) {
                this.newConnector.endPoint().connectingPoint(dropTarget);
            }
            else if (dropTarget instanceof diagramElementModel_1.DiagramElementViewModel) {
                var connectings = dropTarget.connectingPoints();
                this.newConnector.endPoint().connectingPoint(connectings[0]);
            }
            this.selection.initialize(this.newConnectorSurface);
        }
    };
    Object.defineProperty(ConnectingPointDragHandler.prototype, "newConnectorSurface", {
        get: function () {
            return this.newConnector && _surfaceHelpers_1.findSurface(this.newConnector);
        },
        enumerable: true,
        configurable: true
    });
    return ConnectingPointDragHandler;
}(_dragDropHandler_1.DragDropHandler));
exports.ConnectingPointDragHandler = ConnectingPointDragHandler;
