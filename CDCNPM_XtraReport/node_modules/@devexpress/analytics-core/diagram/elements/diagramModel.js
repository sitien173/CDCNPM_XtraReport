/**
* DevExpress Analytics (diagram\elements\diagramModel.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var diagramElementModel_1 = require("./diagramElementModel");
var serializer_1 = require("../../serializer/serializer");
var margins_1 = require("../../core/elements/margins");
var parsers_1 = require("../../core/utils/parsers");
var metadata_1 = require("../metadata");
var editorsInfo_1 = require("../../property-grid/widgets/editorsInfo");
var DiagramViewModel = (function (_super) {
    __extends(DiagramViewModel, _super);
    function DiagramViewModel(diagramSource) {
        var _this = this;
        var serializer = new serializer_1.ModelSerializer();
        _this = _super.call(this, diagramSource, null, serializer) || this;
        _this.controlType = 'Diagram';
        _this.controls = ko.observableArray();
        _this.name('Diagram');
        return _this;
    }
    DiagramViewModel.prototype.getInfo = function () {
        return exports.diagramSerializationsInfo;
    };
    return DiagramViewModel;
}(diagramElementModel_1.DiagramElementBaseViewModel));
exports.DiagramViewModel = DiagramViewModel;
exports.margins = { propertyName: 'margins', modelName: '@Margins', from: margins_1.Margins.fromString, displayName: 'Margins' };
exports.pageWidth = { propertyName: 'pageWidth', modelName: '@PageWidth', defaultVal: 850, from: parsers_1.floatFromModel, displayName: 'Page Width', editor: editorsInfo_1.editorTemplates.getEditor('numeric') };
exports.pageHeight = { propertyName: 'pageHeight', modelName: '@PageHeight', defaultVal: 1250, from: parsers_1.floatFromModel, displayName: 'Page Height', editor: editorsInfo_1.editorTemplates.getEditor('numeric') };
exports.diagramSerializationsInfo = [metadata_1.name, exports.pageWidth, exports.pageHeight, exports.margins];
