/**
* DevExpress Analytics (diagram\elements\connectors\routedConnectorSurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var diagramElementSurface_1 = require("../diagramElementSurface");
var connectionPointSurface_1 = require("./connectionPointSurface");
var RoutedConnectorSurface = (function (_super) {
    __extends(RoutedConnectorSurface, _super);
    function RoutedConnectorSurface(control, context) {
        var _this = _super.call(this, control, context, null) || this;
        _this.template = 'dxdd-routed-connector';
        _this.selectiontemplate = 'dxdd-routed-connector-selection';
        _this.showArrow = ko.observable(false);
        _this.showRightArrow = ko.observable(false);
        _this.isVisible = ko.observable(true);
        _this.routePoints = ko.observableArray();
        _this.routePointsSet = ko.pureComputed(function () {
            var points = [];
            _this.routePoints().forEach(function (point) {
                points.push(point.x() + ' ' + point.y());
            });
            return points.join(', ');
        });
        _this.routeLineWrappers = ko.pureComputed(function () {
            var result = [];
            for (var i = 1; i < _this.routePoints().length; i++) {
                result.push(_this._createRouteLineWrapper(_this.routePoints()[i - 1], _this.routePoints()[i], i === 1 || i === _this.routePoints().length - 1));
            }
            return result;
        });
        _this.connectorID = function () { return _this._connectorID; };
        _this._connectorID = RoutedConnectorSurface._connectorsCount++;
        _this.startPoint = ko.pureComputed(function () {
            return new connectionPointSurface_1.ConnectionPointSurface(control.startPoint(), context);
        });
        _this.endPoint = ko.pureComputed(function () {
            return new connectionPointSurface_1.ConnectionPointSurface(control.endPoint(), context);
        });
        _this._disposables.push(control.routePoints.subscribe(function (routePoints) {
            _this._updateRoutePoints();
        }));
        _this._updateRoutePoints();
        return _this;
    }
    RoutedConnectorSurface.prototype._createRoutePoint = function (point, base) {
        var _this = this;
        return {
            x: ko.pureComputed(function () {
                if (_this._context.rtl()) {
                    return Math.round(_this.getControlModel().size.width() - (point.x() - base.x()));
                }
                else {
                    return Math.round(point.x() - base.x());
                }
            }),
            y: ko.pureComputed(function () { return Math.round(point.y() - base.y()); }),
            modelPoint: point
        };
    };
    RoutedConnectorSurface.prototype._createRouteLineWrapper = function (point1, point2, isLocked) {
        var _this = this;
        if (isLocked === void 0) { isLocked = false; }
        var _self = this, isVerticalLine = Math.abs(point1.x.peek() - point2.x.peek()) < 1, absoluteTop = point1.modelPoint.y.peek(), absoluteLeft = point1.modelPoint.x.peek(), position = {
            top: Math.min(point1.y.peek(), point2.y.peek()) - 2,
            left: Math.min(point1.x.peek(), point2.x.peek()) - 2,
            width: Math.abs(point1.x.peek() - point2.x.peek()) + 6,
            height: Math.abs(point1.y.peek() - point2.y.peek()) + 6
        }, resizeHandler = function (params) {
            _self._control.freezeRoute(true);
            try {
                _self._control.beginUpdate();
                if (isVerticalLine) {
                    if (_this._context.rtl()) {
                        var newX = absoluteLeft - params.delta.dx;
                    }
                    else {
                        var newX = absoluteLeft + params.delta.dx;
                    }
                    point1.modelPoint.x(newX);
                    point2.modelPoint.x(newX);
                }
                else {
                    var newY = absoluteTop + params.delta.dy;
                    point1.modelPoint.y(newY);
                    point2.modelPoint.y(newY);
                }
            }
            finally {
                _self._control.endUpdate();
            }
        };
        return {
            position: position,
            isVerticalLine: isVerticalLine,
            resizeHandler: resizeHandler,
            resizeStopped: function () {
                _self._control.routePoints.notifySubscribers(_self._control.routePoints());
            },
            isLocked: ko.observable(isLocked)
        };
    };
    RoutedConnectorSurface.prototype._updateRoutePoints = function () {
        var _this = this;
        var points = [], control = this.getControlModel(), base = control.location;
        points.push(this._createRoutePoint(control.startPoint().location, base));
        control.routePoints().forEach(function (point) {
            points.push(_this._createRoutePoint(point, base));
        });
        points.push(this._createRoutePoint(control.endPoint().location, base));
        this.routePoints(points);
    };
    RoutedConnectorSurface._connectorsCount = 0;
    return RoutedConnectorSurface;
}(diagramElementSurface_1.DiagramElementBaseSurface));
exports.RoutedConnectorSurface = RoutedConnectorSurface;
