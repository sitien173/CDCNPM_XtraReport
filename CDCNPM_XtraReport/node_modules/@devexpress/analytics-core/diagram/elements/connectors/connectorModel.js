/**
* DevExpress Analytics (diagram\elements\connectors\connectorModel.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var diagramElementModel_1 = require("../diagramElementModel");
var connectionPointModel_1 = require("./connectionPointModel");
var point_1 = require("../../../core/elements/point");
var size_1 = require("../../../core/elements/size");
var _utils_1 = require("../../../serializer/_utils");
var ConnectorViewModel = (function (_super) {
    __extends(ConnectorViewModel, _super);
    function ConnectorViewModel(control, parent, serializer) {
        var _this = _super.call(this, _utils_1.extend({ '@ControlType': 'Connector' }, control), parent, serializer) || this;
        _this.startPoint(_this.startPoint() || new connectionPointModel_1.ConnectionPointViewModel({ '@Location': '0, 0' }, _this, serializer));
        _this.endPoint(_this.endPoint() || new connectionPointModel_1.ConnectionPointViewModel({ '@Location': '150, 75' }, _this, serializer));
        _this.location = new point_1.Point(0, 0);
        _this.location.x = ko.pureComputed({
            read: function () {
                return _this.getX();
            },
            write: function (value) {
                var oldValue = _this.startPoint().location.x() < _this.endPoint().location.x() ? _this.startPoint().location.x() : _this.endPoint().location.x();
                var delta = value - oldValue;
                _this.startPoint().location.x(_this.startPoint().location.x() + delta);
                _this.endPoint().location.x(_this.endPoint().location.x() + delta);
            }
        });
        _this.location.y = ko.pureComputed({
            read: function () {
                return _this.getY();
            },
            write: function (value) {
                var oldValue = _this.startPoint().location.y() < _this.endPoint().location.y() ? _this.startPoint().location.y() : _this.endPoint().location.y();
                var delta = value - oldValue;
                _this.startPoint().location.y(_this.startPoint().location.y() + delta);
                _this.endPoint().location.y(_this.endPoint().location.y() + delta);
            }
        });
        _this.size = new size_1.Size(0, 0);
        _this.size.width = ko.pureComputed({
            read: function () {
                return _this.getWidth();
            },
            write: function (value) {
                if (_this.startPoint().location.x() < _this.endPoint().location.x()) {
                    _this.endPoint().location.x(_this.startPoint().location.x() + value);
                }
                else {
                    _this.startPoint().location.x(_this.endPoint().location.x() + value);
                }
            }
        });
        _this.size.height = ko.pureComputed({
            read: function () {
                return _this.getHeight();
            },
            write: function (value) {
                if (_this.startPoint().location.y() < _this.endPoint().location.y()) {
                    _this.endPoint().location.y(_this.startPoint().location.y() + value);
                }
                else {
                    _this.startPoint().location.y(_this.endPoint().location.y() + value);
                }
            }
        });
        return _this;
    }
    ConnectorViewModel.prototype.getX = function () {
        return this.startPoint().location.x() < this.endPoint().location.x() ? this.startPoint().location.x() : this.endPoint().location.x();
    };
    ConnectorViewModel.prototype.getY = function () {
        return this.startPoint().location.y() < this.endPoint().location.y() ? this.startPoint().location.y() : this.endPoint().location.y();
    };
    ConnectorViewModel.prototype.getWidth = function () {
        return Math.abs(this.startPoint().location.x() - this.endPoint().location.x()) || ConnectorViewModel.MIN_LINE_THICKNESS;
    };
    ConnectorViewModel.prototype.getHeight = function () {
        return Math.abs(this.startPoint().location.y() - this.endPoint().location.y()) || ConnectorViewModel.MIN_LINE_THICKNESS;
    };
    ConnectorViewModel.MIN_LINE_THICKNESS = 3;
    return ConnectorViewModel;
}(diagramElementModel_1.DiagramElementBaseViewModel));
exports.ConnectorViewModel = ConnectorViewModel;
