/**
* DevExpress Analytics (diagram\elements\connectors\routedConnectorModel.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var connectorModel_1 = require("./connectorModel");
var point_1 = require("../../../core/elements/point");
var utils_1 = require("../../utils");
var _utils_1 = require("../../../serializer/_utils");
var RoutedConnectorViewModel = (function (_super) {
    __extends(RoutedConnectorViewModel, _super);
    function RoutedConnectorViewModel(control, parent, serializer) {
        var _this = _super.call(this, _utils_1.extend({ '@ControlType': 'RoutedConnector' }, control), parent, serializer) || this;
        _this._isUpdating = false;
        _this._getPower = function (_n) {
            for (var i = 0; i < 10; i++) {
                if (_n >= Math.pow(2, i) && _n < Math.pow(2, i + 1)) {
                    return i + 1;
                }
            }
            return 1;
        };
        _this.seriesNumber = ko.observable(1);
        _this.routePoints = ko.observable([]);
        _this.freezeRoute = ko.observable(false);
        _this._disposables.push(ko.computed(function () {
            var freezeRoute = !(1 + _this.startPoint().location.x() + _this.startPoint().location.y()
                + _this.endPoint().location.x() + _this.endPoint().location.y());
            if (!_this._isUpdating) {
                _this.freezeRoute(freezeRoute);
            }
        }));
        _this._disposables.push(ko.computed(function () {
            if (!_this.freezeRoute()) {
                var result = [];
                var startPointSide = _this._getStartPointSide();
                var endPointSide = _this._getEndPointSide();
                var startPoint = new point_1.Point(_this.startPoint().location.x(), _this.startPoint().location.y()), endPoint = new point_1.Point(_this.endPoint().location.x(), _this.endPoint().location.y());
                if (_this.startPoint().connectingPoint()) {
                    _this._fixPoint(startPoint, _this.startPoint().connectingPoint().side());
                    result.push(startPoint);
                }
                if (_this.endPoint().connectingPoint()) {
                    _this._fixPoint(endPoint, _this.endPoint().connectingPoint().side());
                }
                var baseX = Math.min(startPoint.x(), endPoint.x()), baseY = Math.min(startPoint.y(), endPoint.y()), width = Math.abs(startPoint.x() - endPoint.x()), height = Math.abs(startPoint.y() - endPoint.y());
                var number = _this.seriesNumber();
                var ratio = _this._getRatio(number);
                var indent = (number - 1) * RoutedConnectorViewModel.GRID_SIZE;
                if (startPoint.y() - endPoint.y() > 0) {
                    if (startPoint.x() - endPoint.x() > 0) {
                        if (startPointSide === utils_1.PointSide.North || startPointSide === utils_1.PointSide.East) {
                            if (endPointSide === utils_1.PointSide.North || endPointSide === utils_1.PointSide.East) {
                                if (number !== 1) {
                                    width += indent;
                                    result.push(new point_1.Point(baseX + width, baseY + height));
                                }
                                result.push(new point_1.Point(baseX + width, baseY));
                            }
                            else {
                                result.push(new point_1.Point(baseX + width, baseY + height * ratio));
                                result.push(new point_1.Point(baseX, baseY + height * ratio));
                            }
                        }
                        else {
                            if (endPointSide === utils_1.PointSide.South || endPointSide === utils_1.PointSide.West) {
                                result.push(new point_1.Point(baseX, baseY + height));
                            }
                            else {
                                result.push(new point_1.Point(baseX + width * ratio, baseY + height));
                                result.push(new point_1.Point(baseX + width * ratio, baseY));
                            }
                        }
                    }
                    else {
                        if (startPointSide === utils_1.PointSide.North || startPointSide === utils_1.PointSide.West) {
                            if (endPointSide === utils_1.PointSide.North || endPointSide === utils_1.PointSide.West) {
                                if (number !== 1) {
                                    baseX -= indent;
                                    result.push(new point_1.Point(baseX, baseY + height));
                                }
                                result.push(new point_1.Point(baseX, baseY));
                            }
                            else {
                                result.push(new point_1.Point(baseX, baseY + height * ratio));
                                result.push(new point_1.Point(baseX + width, baseY + height * ratio));
                            }
                        }
                        else {
                            if (endPointSide === utils_1.PointSide.South || endPointSide === utils_1.PointSide.East) {
                                result.push(new point_1.Point(baseX + width, baseY + height));
                            }
                            else {
                                result.push(new point_1.Point(baseX + width * ratio, baseY + height));
                                result.push(new point_1.Point(baseX + width * ratio, baseY));
                            }
                        }
                    }
                }
                else {
                    if (startPoint.x() - endPoint.x() > 0) {
                        if (startPointSide === utils_1.PointSide.South || startPointSide === utils_1.PointSide.East) {
                            if (endPointSide === utils_1.PointSide.South || endPointSide === utils_1.PointSide.East) {
                                if (number !== 1) {
                                    width += indent;
                                    result.push(new point_1.Point(baseX + width, baseY));
                                }
                                result.push(new point_1.Point(baseX + width, baseY + height));
                            }
                            else {
                                result.push(new point_1.Point(baseX + width, baseY + height * ratio));
                                result.push(new point_1.Point(baseX, baseY + height * ratio));
                            }
                        }
                        else {
                            if (endPointSide === utils_1.PointSide.North || endPointSide === utils_1.PointSide.West) {
                                result.push(new point_1.Point(baseX, baseY));
                            }
                            else {
                                result.push(new point_1.Point(baseX + width * ratio, baseY));
                                result.push(new point_1.Point(baseX + width * ratio, baseY + height));
                            }
                        }
                    }
                    else {
                        if (startPointSide === utils_1.PointSide.South || startPointSide === utils_1.PointSide.West) {
                            if (endPointSide === utils_1.PointSide.South || endPointSide === utils_1.PointSide.West) {
                                if (number !== 1) {
                                    baseX -= indent;
                                    result.push(new point_1.Point(baseX, baseY));
                                }
                                result.push(new point_1.Point(baseX, baseY + height));
                            }
                            else {
                                result.push(new point_1.Point(baseX, baseY + height * ratio));
                                result.push(new point_1.Point(baseX + width, baseY + height * ratio));
                            }
                        }
                        else {
                            if (endPointSide === utils_1.PointSide.North || endPointSide === utils_1.PointSide.East) {
                                result.push(new point_1.Point(baseX + width, baseY));
                            }
                            else {
                                result.push(new point_1.Point(baseX + width * ratio, baseY));
                                result.push(new point_1.Point(baseX + width * ratio, baseY + height));
                            }
                        }
                    }
                }
                if (_this.endPoint().connectingPoint()) {
                    result.push(endPoint);
                }
                _this.routePoints(result);
            }
        }));
        return _this;
    }
    RoutedConnectorViewModel.prototype.getX = function () {
        var result = _super.prototype.getX.call(this);
        this.routePoints && this.routePoints().forEach(function (point) {
            if (point.x() < result) {
                result = point.x();
            }
        });
        return result;
    };
    RoutedConnectorViewModel.prototype.getY = function () {
        var result = _super.prototype.getY.call(this);
        this.routePoints && this.routePoints().forEach(function (point) {
            if (point.y() < result) {
                result = point.y();
            }
        });
        return result;
    };
    RoutedConnectorViewModel.prototype.getWidth = function () {
        var result = _super.prototype.getWidth.call(this);
        var baseX = this.getX();
        this.routePoints && [this.startPoint().location, this.endPoint().location].concat(this.routePoints()).forEach(function (point) {
            if (point.x() - baseX > result) {
                result = point.x() - baseX;
            }
        });
        return result;
    };
    RoutedConnectorViewModel.prototype.getHeight = function () {
        var result = _super.prototype.getHeight.call(this);
        var baseY = this.getY();
        this.routePoints && [this.startPoint().location, this.endPoint().location].concat(this.routePoints()).forEach(function (point) {
            if (point.y() - baseY > result) {
                result = point.y() - baseY;
            }
        });
        return Math.round(result);
    };
    RoutedConnectorViewModel.prototype._fixPoint = function (point, side) {
        switch (side) {
            case utils_1.PointSide.North:
                point.y(point.y() - RoutedConnectorViewModel.GRID_SIZE);
                break;
            case utils_1.PointSide.East:
                point.x(point.x() + RoutedConnectorViewModel.GRID_SIZE);
                break;
            case utils_1.PointSide.West:
                point.x(point.x() - RoutedConnectorViewModel.GRID_SIZE);
                break;
            case utils_1.PointSide.South:
                point.y(point.y() + RoutedConnectorViewModel.GRID_SIZE);
        }
    };
    RoutedConnectorViewModel.prototype._getStartPointSide = function () {
        if (this.startPoint().connectingPoint()) {
            return this.startPoint().connectingPoint().side();
        }
        if (this.startPoint().location.y() !== this.endPoint().location.y()) {
            if (this.startPoint().location.y() > this.endPoint().location.y()) {
                return utils_1.PointSide.North;
            }
            else {
                return utils_1.PointSide.South;
            }
        }
        else {
            if (this.startPoint().location.x() > this.endPoint().location.x()) {
                return utils_1.PointSide.West;
            }
            else {
                return utils_1.PointSide.East;
            }
        }
    };
    RoutedConnectorViewModel.prototype._getEndPointSide = function () {
        if (this.endPoint().connectingPoint()) {
            return this.endPoint().connectingPoint().side();
        }
        if (this.startPoint().location.y() !== this.endPoint().location.y()) {
            if (this.startPoint().location.y() > this.endPoint().location.y()) {
                return utils_1.PointSide.South;
            }
            else {
                return utils_1.PointSide.North;
            }
        }
        else {
            if (this.startPoint().location.x() > this.endPoint().location.x()) {
                return utils_1.PointSide.East;
            }
            else {
                return utils_1.PointSide.West;
            }
        }
    };
    RoutedConnectorViewModel.prototype._getRatio = function (n) {
        var pow2Delimiter = this._getPower(n);
        var delimiter = Math.pow(2, pow2Delimiter);
        var halfDelimeter = Math.pow(2, pow2Delimiter - 1);
        var arr = [];
        for (var i = 1; i < halfDelimeter; i++) {
            if (i % 2 == 0) {
                continue;
            }
            arr.push(delimiter - i);
            arr.push(i);
        }
        arr.reverse();
        var delta = n - halfDelimeter;
        var number = arr[delta] || 1;
        return number / delimiter;
    };
    RoutedConnectorViewModel.prototype.beginUpdate = function () { this._isUpdating = true; };
    RoutedConnectorViewModel.prototype.endUpdate = function () { this._isUpdating = false; };
    RoutedConnectorViewModel.GRID_SIZE = 10;
    return RoutedConnectorViewModel;
}(connectorModel_1.ConnectorViewModel));
exports.RoutedConnectorViewModel = RoutedConnectorViewModel;
