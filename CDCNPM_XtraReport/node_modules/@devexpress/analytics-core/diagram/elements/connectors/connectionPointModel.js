/**
* DevExpress Analytics (diagram\elements\connectors\connectionPointModel.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var diagramElementModel_1 = require("../diagramElementModel");
var metadata_1 = require("../../metadata");
var _utils_1 = require("../../../serializer/_utils");
var ConnectionPointViewModel = (function (_super) {
    __extends(ConnectionPointViewModel, _super);
    function ConnectionPointViewModel(control, parent, serializer) {
        var _this = _super.call(this, _utils_1.extend(control, { '@ControlType': 'ConnectionPoint' }), parent, serializer) || this;
        var _x = _this.location.x, _y = _this.location.y;
        _this.location.x = ko.pureComputed({
            read: function () {
                return _this.connectingPoint() && _this.connectingPoint().location.x() || _x();
            },
            write: function (value) {
                _this.connectingPoint(null);
                _x(value);
            }
        });
        _this.location.y = ko.pureComputed({
            read: function () {
                return _this.connectingPoint() && _this.connectingPoint().location.y() || _y();
            },
            write: function (value) {
                _this.connectingPoint(null);
                _y(value);
            }
        });
        return _this;
    }
    return ConnectionPointViewModel;
}(diagramElementModel_1.DiagramElementBaseViewModel));
exports.ConnectionPointViewModel = ConnectionPointViewModel;
exports.connectionPointSerializationInfo = [
    metadata_1.location,
    { propertyName: 'connectingPoint', modelName: '@ConnectingPoint', link: true }
];
