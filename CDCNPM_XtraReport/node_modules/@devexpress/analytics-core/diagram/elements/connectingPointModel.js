/**
* DevExpress Analytics (diagram\elements\connectingPointModel.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var point_1 = require("../../core/elements/point");
var utils_1 = require("../utils");
var diagramElementModel_1 = require("./diagramElementModel");
var size_1 = require("../../core/elements/size");
var parsers_1 = require("../../core/utils/parsers");
var _utils_1 = require("../../serializer/_utils");
var ConnectingPointViewModel = (function (_super) {
    __extends(ConnectingPointViewModel, _super);
    function ConnectingPointViewModel(control, parent, serializer) {
        var _this = _super.call(this, _utils_1.extend({ '@ControlType': 'ConnectingPoint' }, control), parent, serializer) || this;
        _this.side = ko.pureComputed(function () {
            if (_this.percentOffsetY() >= _this.percentOffsetX()) {
                if (_this.percentOffsetY() > 1 - _this.percentOffsetX()) {
                    return utils_1.PointSide.South;
                }
                else {
                    return utils_1.PointSide.West;
                }
            }
            else {
                if (_this.percentOffsetY() > 1 - _this.percentOffsetX()) {
                    return utils_1.PointSide.East;
                }
                else {
                    return utils_1.PointSide.North;
                }
            }
        });
        _this.size = new size_1.Size(7, 7);
        _this.location = new point_1.Point(0, 0);
        _this.location.x = ko.pureComputed(function () {
            var parentModel = _this.parentModel();
            return parentModel.location.x() + parentModel.size.width() * _this.percentOffsetX();
        });
        _this.location.y = ko.pureComputed(function () {
            var parentModel = _this.parentModel();
            return parentModel.location.y() + parentModel.size.height() * _this.percentOffsetY();
        });
        return _this;
    }
    return ConnectingPointViewModel;
}(diagramElementModel_1.DiagramElementBaseViewModel));
exports.ConnectingPointViewModel = ConnectingPointViewModel;
exports.connectingPointSerializationInfo = [
    { propertyName: 'percentOffsetX', modelName: '@PercentOffsetX', defaultVal: 0.5, from: parsers_1.floatFromModel },
    { propertyName: 'percentOffsetY', modelName: '@PercentOffsetY', defaultVal: 0.5, from: parsers_1.floatFromModel }
];
