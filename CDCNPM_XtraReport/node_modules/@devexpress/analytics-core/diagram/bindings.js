/**
* DevExpress Analytics (diagram\bindings.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
require("jquery-ui/ui/widgets/draggable");
require("jquery-ui/ui/widgets/resizable");
require("jquery-ui/ui/widgets/selectable");
require("jquery-ui/ui/widgets/mouse");
var _snapLinesHelper_1 = require("../core/snapLines/_snapLinesHelper");
var _internal_1 = require("../serializer/_internal");
var _utils_1 = require("../serializer/_utils");
ko.bindingHandlers['routeLineDraggable'] = {
    init: function (element, valueAccessor) {
        var values = valueAccessor(), options = _utils_1.extend({ snap: '.dxrd-drag-snap-line', snapTolerance: _snapLinesHelper_1.SnapLinesHelper.snapTolerance }, ko.unwrap(values), {
            start: function (event, ui) {
                values.starting();
            },
            stop: function (event, ui) {
                values.stopped();
            },
            drag: function (event, ui) {
                var dx = ui.position.left - ui['originalPosition'].left, dy = ui.position.top - ui['originalPosition'].top;
                values.forceResize({ delta: { dx: dx, dy: dy } });
            }
        });
        $(element)['draggable'](options);
    }
};
function getInternetExplorerVersion() {
    var rv = -1;
    if (navigator.appName == 'Microsoft Internet Explorer') {
        var re = new RegExp('MSIE ([0-9]{1,}[\.0-9]{0,})');
        if (re.exec(navigator.userAgent) != null)
            rv = parseFloat(RegExp.$1);
    }
    else if (navigator.appName == 'Netscape') {
        var re = new RegExp('Trident/.*rv:([0-9]{1,}[\.0-9]{0,})');
        if (re.exec(navigator.userAgent) != null)
            rv = parseFloat(RegExp.$1);
    }
    return rv;
}
ko.bindingHandlers['updateConnectorArrow'] = {
    init: function (svgNode, valueAccessor, allBindings, viewModel, bindingContext) {
        var ieVersion = getInternetExplorerVersion();
        if (ieVersion > -1 && ieVersion <= 11) {
            var updateSubscription = bindingContext.$data.routePointsSet.subscribe(function () {
                if (bindingContext.$data.showArrow())
                    svgNode.parentNode.insertBefore(svgNode, svgNode);
            });
            _internal_1.addDisposeCallback(svgNode.parentNode, function () { return updateSubscription.dispose(); });
        }
    }
};
