/**
* DevExpress Analytics (diagram\initializer.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var metadata_1 = require("./metadata");
var diagramModel_1 = require("./elements/diagramModel");
var localization_utils_1 = require("../property-grid/localization/localization_utils");
var controlsFactory_1 = require("./controlsFactory");
var diagramSurface_1 = require("./elements/diagramSurface");
var _designerInitializer_1 = require("../core/utils/_designerInitializer");
var connectionPointDragHandler_1 = require("./dragDrop/connectionPointDragHandler");
var connectingPointDragHandler_1 = require("./dragDrop/connectingPointDragHandler");
var _surfaceHelpers_1 = require("../core/internal/_surfaceHelpers");
var _internal_1 = require("../serializer/_internal");
exports.groups = {
    'Appearance': { info: [] },
    'Behavior': { info: [] },
    'Design': { info: [metadata_1.name] },
    'Layout': { info: [metadata_1.location, metadata_1.size, diagramModel_1.pageWidth, diagramModel_1.pageHeight] }
};
function createDiagramDesigner(element, diagramSource, localization, rtl) {
    if (localization) {
        localization_utils_1.addCultureInfo({
            messages: localization
        });
    }
    controlsFactory_1.registerControls();
    var diagram = ko.pureComputed(function () { return new diagramModel_1.DiagramViewModel(diagramSource()); }), surface = ko.pureComputed(function () {
        var surface = new diagramSurface_1.DiagramSurface(diagram());
        return surface;
    });
    var designerModel = _designerInitializer_1.createDesigner(diagram, surface, controlsFactory_1.diagramControlsFactory, exports.groups, undefined, undefined, rtl);
    designerModel.connectionPointDragHandler = new connectionPointDragHandler_1.ConnectionPointDragHandler(surface, designerModel.selection, designerModel.undoEngine, designerModel.snapHelper, designerModel.dragHelperContent);
    designerModel.connectingPointDragHandler = new connectingPointDragHandler_1.ConnectingPointDragHandler(surface, designerModel.selection, designerModel.undoEngine, designerModel.snapHelper, designerModel.dragHelperContent);
    designerModel.isLoading(false);
    designerModel.selection.focused(surface());
    $(element).children().remove();
    ko.applyBindings(designerModel, element);
    var updateSurfaceContentSize_ = _surfaceHelpers_1.updateSurfaceContentSize(designerModel.surfaceSize, element);
    var onResize = function () {
        updateSurfaceContentSize_();
    };
    window.addEventListener('resize', onResize);
    _internal_1.addDisposeCallback(element, function () {
        window.removeEventListener('resize', onResize);
    });
    designerModel.tabPanel.width.subscribe(function () {
        updateSurfaceContentSize_();
    });
    updateSurfaceContentSize_();
    return designerModel;
}
exports.createDiagramDesigner = createDiagramDesigner;
