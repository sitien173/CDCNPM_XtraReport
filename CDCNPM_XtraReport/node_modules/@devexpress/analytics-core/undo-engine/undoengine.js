/**
* DevExpress Analytics (undo-engine\undoengine.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../serializer/utils");
var _utils_1 = require("./_utils");
var _LatestChangeSet = (function () {
    function _LatestChangeSet(changes, position) {
        this.changes = changes;
        this.position = position;
    }
    _LatestChangeSet.Empty = function () {
        return new _LatestChangeSet(null, null);
    };
    _LatestChangeSet.prototype.equal = function (changeSet) {
        return this.changes === changeSet.changes && this.position === changeSet.position;
    };
    return _LatestChangeSet;
}());
exports._LatestChangeSet = _LatestChangeSet;
var activeEngines = [];
var UndoEngine = (function (_super) {
    __extends(UndoEngine, _super);
    function UndoEngine(target, _ignoredProperties, _getInfoMethodName, _alwaysSubscribeProperties) {
        if (_ignoredProperties === void 0) { _ignoredProperties = ['surface']; }
        if (_alwaysSubscribeProperties === void 0) { _alwaysSubscribeProperties = []; }
        var _this = _super.call(this) || this;
        _this._ignoredProperties = _ignoredProperties;
        _this._getInfoMethodName = _getInfoMethodName;
        _this._alwaysSubscribeProperties = _alwaysSubscribeProperties;
        _this._groupObservers = [];
        _this._groupPosition = -1;
        _this._observers = [];
        _this._subscriptions = [];
        _this._visited = [];
        _this._position = ko.observable(-1);
        _this._lockedPosition = ko.observable(-1);
        _this._inUndoRedo = false;
        _this._currentEngineName = UndoEngine._disposeUndoEngineSubscriptionsName + _utils_1.guid();
        _this.redoEnabled = ko.observable(false);
        _this.undoEnabled = ko.observable(false);
        _this.isIngroup = -1;
        _this.isDirty = ko.computed({
            read: function () { return _this._position() !== _this._lockedPosition(); },
            write: function (value) { value ? _this._lockedPosition('forcibly marked as dirty') : _this._lockedPosition(_this._position()); }
        });
        activeEngines.push(_this._currentEngineName);
        _this._model = ko.unwrap(target);
        if (_this._getInfoMethodName) {
            if (ko.isSubscribable(target)) {
                _this._targetSubscription = _this.subscribeProperty(target, true);
            }
            else {
                _this._createDisposeFunction(target);
            }
        }
        else {
            var innerSubscriptions = _this.subscribe(_this._model);
            if (ko.isSubscribable(target)) {
                var prevVal = target();
                _this._targetSubscription = target.subscribe(function (newTargetValue) {
                    _this._removePropertiesSubscriptions();
                    if (!_this._inUndoRedo) {
                        _this.properyChanged({
                            observable: target, propertyChanged: { oldVal: prevVal, val: newTargetValue }
                        });
                        prevVal = newTargetValue;
                    }
                    _this._cleanSubscribtions(innerSubscriptions);
                    _this._model = newTargetValue;
                    innerSubscriptions = _this.subscribe(_this._model);
                });
            }
        }
        _this._disposables.push(_this.isDirty);
        return _this;
    }
    UndoEngine.tryGetUndoEngine = function (object) {
        var undo = null;
        activeEngines.some(function (x) {
            undo = object[x] && object[x].instance;
            return !!undo;
        });
        return undo;
    };
    Object.defineProperty(UndoEngine.prototype, "_modelReady", {
        get: function () {
            return _utils_1.checkModelReady(this._model);
        },
        enumerable: true,
        configurable: true
    });
    UndoEngine.prototype._disposeObserver = function (record) {
        var _this = this;
        if (record.propertyChanged) {
            var value = record.propertyChanged.val;
            if (value && !value[this._currentEngineName]) {
                value.dispose && value.dispose();
            }
        }
        else if (record.arrayChanges) {
            record.arrayChanges.forEach(function (change) {
                if (change.status === 'added') {
                    var value = change.value;
                    if (value && !value[_this._currentEngineName])
                        value.dispose && value.dispose();
                }
            });
        }
    };
    UndoEngine.prototype.properyChanged = function (undoRecord) {
        var _this = this;
        if (this._inUndoRedo) {
            return;
        }
        var currentPosition = this._position() + 1;
        if (currentPosition < this._observers.length) {
            var removedItems = this._observers.splice(currentPosition, this._observers.length);
            removedItems.forEach(function (changeSet) {
                if (Array.isArray(changeSet)) {
                    changeSet.reverse().forEach(function (item) { return _this._disposeObserver(item); });
                }
                else {
                    _this._disposeObserver(changeSet);
                }
            });
        }
        this._observers.push(undoRecord);
        this._position(currentPosition);
        this.undoEnabled(true);
        this.redoEnabled(false);
    };
    UndoEngine.prototype.visitProperties = function (target, info) {
        var subscribtions = [];
        if (target && info) {
            for (var i = 0; i < info.length; i++) {
                var alwaysSubscribeProperty = this._alwaysSubscribeProperties.some(function (x) { return x === info[i].propertyName; });
                if (info[i].modelName || info[i].editor || info[i].info || alwaysSubscribeProperty) {
                    var realPropertyName = alwaysSubscribeProperty ? info[i].propertyName : this.validatePropertyName(target, info[i].propertyName);
                    if (realPropertyName) {
                        if (!ko.isComputed(target[realPropertyName])) {
                            if (!ko.isObservable(target[realPropertyName])) {
                                subscribtions.push.apply([], this._createDisposeFunction(target[realPropertyName], info[i].info));
                            }
                            else {
                                subscribtions.push(this.subscribeProperty(target[realPropertyName], !info[i].link));
                            }
                        }
                    }
                }
            }
        }
        return subscribtions;
    };
    UndoEngine.prototype.undoChangeSet = function (changeSet) {
        if (changeSet.propertyChanged) {
            changeSet.observable(changeSet.propertyChanged.oldVal);
        }
        else {
            var array = changeSet.observable();
            for (var i = 0; i < changeSet.arrayChanges.length; i++) {
                if (changeSet.arrayChanges[i].status === 'added') {
                    array.splice(array.indexOf(changeSet.arrayChanges[i].value), 1);
                }
            }
            for (var i = 0; i < changeSet.arrayChanges.length; i++) {
                if (changeSet.arrayChanges[i].status === 'deleted') {
                    array.splice(changeSet.arrayChanges[i].index, 0, changeSet.arrayChanges[i].value);
                }
            }
            if (ko.isObservable(changeSet.observable)) {
                changeSet.observable.valueHasMutated();
            }
        }
    };
    UndoEngine.prototype.redoChangeSet = function (changeSet) {
        if (changeSet.propertyChanged) {
            changeSet.observable(changeSet.propertyChanged.val);
        }
        else {
            var array = changeSet.observable();
            for (var i = 0; i < changeSet.arrayChanges.length; i++) {
                if (changeSet.arrayChanges[i].status === 'deleted') {
                    array.splice(array.indexOf(changeSet.arrayChanges[i].value), 1);
                }
            }
            for (var i = 0; i < changeSet.arrayChanges.length; i++) {
                if (changeSet.arrayChanges[i].status === 'added') {
                    array.splice(changeSet.arrayChanges[i].index, 0, changeSet.arrayChanges[i].value);
                }
            }
            if (ko.isObservable(changeSet.observable)) {
                changeSet.observable.valueHasMutated();
            }
        }
    };
    UndoEngine.prototype._disposeChilds = function (target, info) {
        if (target && info) {
            for (var i = 0; i < info.length; i++) {
                if (info[i].modelName || info[i].editor || info[i].info) {
                    var propertyName = info[i].propertyName;
                    if (propertyName.indexOf('_') !== 0) {
                        var realPropertyName = propertyName;
                        if (ko.isWritableObservable(target['_' + propertyName])) {
                            realPropertyName = '_' + realPropertyName;
                        }
                        if (!ko.isComputed(target[realPropertyName])) {
                            var val = ko.unwrap(target[realPropertyName]);
                            if (!!val && typeof val === 'object') {
                                if (!info[i].link) {
                                    this._callDisposeFunction(val);
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    UndoEngine.prototype._createDisposeFunction = function (val, info) {
        var _this = this;
        var subscriptions = [];
        if (val && typeof val === 'object') {
            var objectInfo = info || (val[this._getInfoMethodName] && val[this._getInfoMethodName]());
            if (!!objectInfo) {
                if (val[this._currentEngineName]) {
                    val[this._currentEngineName].inc++;
                }
                else {
                    val[this._currentEngineName] = { inc: 1, instance: this };
                    subscriptions = this.subscribe(val, objectInfo);
                    val[this._currentEngineName]['func'] = function () {
                        val[_this._currentEngineName].inc--;
                        _this._disposeChilds(val, objectInfo);
                        if (val[_this._currentEngineName].inc === 0) {
                            _this._cleanSubscribtions(subscriptions);
                            delete val[_this._currentEngineName];
                        }
                    };
                }
            }
        }
        return subscriptions;
    };
    UndoEngine.prototype._callDisposeFunction = function (val) {
        if (val) {
            if (Array.isArray(val)) {
                for (var i = 0; i < val.length; i++) {
                    val[i][this._currentEngineName] && val[i][this._currentEngineName].func();
                }
            }
            else {
                val[this._currentEngineName] && val[this._currentEngineName].func();
            }
        }
    };
    UndoEngine.prototype._cleanSubscribtions = function (subscribtionArray) {
        if (subscribtionArray) {
            if (subscribtionArray.length) {
                for (var i = 0; i < subscribtionArray.length; i++) {
                    this._cleanSubscribtions(subscribtionArray[i]);
                }
            }
            else {
                subscribtionArray.dispose && subscribtionArray.dispose();
            }
        }
    };
    UndoEngine.prototype.validatePropertyName = function (target, propertyName) {
        if ((!this._ignoredProperties || (this._ignoredProperties && this._ignoredProperties.every(function (x) { return x !== propertyName; }))) && propertyName[0] !== '_') {
            if (ko.isWritableObservable(target['_' + propertyName])) {
                return '_' + propertyName;
            }
            return propertyName;
        }
        return null;
    };
    UndoEngine.prototype.subscribeProperty = function (property, subscribeChilds) {
        var _this = this;
        if (ko.isObservable(property)) {
            var prevVal = property();
            if (Array.isArray(prevVal)) {
                for (var i = 0; i < property().length; i++) {
                    this._createDisposeFunction(property()[i]);
                }
                return property.subscribe(function (args) {
                    if (_this._modelReady) {
                        var addedItems = args.filter(function (x) { return x.status === 'added'; });
                        var removedItems = args.filter(function (x) { return x.status === 'deleted'; });
                        for (var i = 0; i < removedItems.length; i++) {
                            _this._callDisposeFunction(removedItems[i].value);
                        }
                        for (var i = 0; i < addedItems.length; i++) {
                            _this._createDisposeFunction(addedItems[i].value);
                        }
                        _this.properyChanged({ observable: property, arrayChanges: args });
                    }
                }, null, 'arrayChange');
            }
            else {
                if (ko.isWritableObservable(property)) {
                    if (subscribeChilds) {
                        this._createDisposeFunction(property());
                    }
                    return property.subscribe(function (val) {
                        if (_this._modelReady) {
                            if (subscribeChilds) {
                                _this._callDisposeFunction(prevVal);
                            }
                            _this.properyChanged({
                                observable: property, propertyChanged: { oldVal: prevVal, val: val }
                            });
                            prevVal = val;
                            if (subscribeChilds) {
                                _this._createDisposeFunction(val);
                            }
                        }
                    });
                }
            }
        }
    };
    UndoEngine.prototype.subscribeProperties = function (properties) {
        var _this = this;
        properties.forEach(function (property) {
            if (ko.isObservable(property)) {
                var prevVal = property();
                if (property['push']) {
                    _this._subscriptions.push(property.subscribe(function (args) {
                        if (_this._modelReady) {
                            if (!_this._inUndoRedo) {
                                _this.properyChanged({ observable: property, arrayChanges: args });
                                _this.subscribe(args.map(function (item) { return item.value; }));
                            }
                        }
                    }, null, 'arrayChange'));
                }
                else {
                    if (ko.isWritableObservable(property)) {
                        _this._subscriptions.push(property.subscribe(function (val) {
                            if (_this._modelReady) {
                                _this.properyChanged({
                                    observable: property, propertyChanged: { oldVal: prevVal, val: val }
                                });
                                prevVal = property();
                            }
                        }));
                    }
                }
            }
        });
    };
    UndoEngine.prototype.subscribe = function (target, info) {
        var _this = this;
        if (this._getInfoMethodName) {
            return this.visitProperties(target, info || (target && target[this._getInfoMethodName] && target[this._getInfoMethodName]()));
        }
        else {
            _utils_1.propertiesVisitor(target, function (properties) { _this.subscribeProperties(properties); }, this._visited, this._ignoredProperties);
        }
    };
    UndoEngine.prototype.getCurrentChangeSet = function () {
        return new _LatestChangeSet(this._observers[this._position()], this._position());
    };
    UndoEngine.prototype._removePropertiesSubscriptions = function () {
        this._subscriptions.forEach(function (subscription) { return subscription.dispose(); });
        this._subscriptions = [];
        this._visited = [];
    };
    UndoEngine.prototype.dispose = function () {
        var _this = this;
        _super.prototype.dispose.call(this);
        this.removeTargetSubscription();
        var position = 0;
        activeEngines.some(function (x, index) {
            if (x === _this._currentEngineName) {
                position = index;
                return true;
            }
            return false;
        });
        activeEngines.splice(position, 1);
    };
    UndoEngine.prototype.removeTargetSubscription = function () {
        this._targetSubscription && this._targetSubscription.dispose();
        this.reset();
    };
    UndoEngine.prototype.undoAll = function () {
        if (this.undoEnabled()) {
            this.undo();
            this.undoAll();
        }
    };
    UndoEngine.prototype.reset = function () {
        this._removePropertiesSubscriptions();
        this.clearHistory();
    };
    UndoEngine.prototype.clearHistory = function () {
        this._groupObservers = [];
        this._observers = [];
        this.redoEnabled(false);
        this.undoEnabled(false);
        this._inUndoRedo = false;
        this._groupPosition = -1;
        this._position(-1);
        this._lockedPosition(this._position());
    };
    UndoEngine.prototype.undo = function (removeNode) {
        var _this = this;
        if (removeNode === void 0) { removeNode = false; }
        try {
            this._inUndoRedo = true;
            if (this.undoEnabled()) {
                var changeSet = this._observers[this._position()];
                if (changeSet) {
                    if (Array.isArray(changeSet)) {
                        changeSet.reverse().forEach(function (item) { return _this.undoChangeSet(item); });
                    }
                    else {
                        this.undoChangeSet(changeSet);
                    }
                    if (removeNode) {
                        this._observers.splice(this._position(), 1);
                    }
                    this._position(this._position() - 1);
                    this.undoEnabled(this._observers.length !== 0 && this._position() >= 0);
                    this.redoEnabled(this._position() < this._observers.length - 1);
                }
            }
        }
        finally {
            this._inUndoRedo = false;
        }
    };
    UndoEngine.prototype.redo = function () {
        var _this = this;
        try {
            this._inUndoRedo = true;
            if (this.redoEnabled()) {
                var changeSet = this._observers[this._position() + 1];
                if (changeSet) {
                    if (Array.isArray(changeSet)) {
                        changeSet.reverse().forEach(function (item) { return _this.redoChangeSet(item); });
                    }
                    else {
                        this.redoChangeSet(changeSet);
                    }
                    this._position(this._position() + 1);
                    this.undoEnabled(this._observers.length !== 0 && this._position() >= 0);
                    this.redoEnabled(this._position() + 1 < this._observers.length);
                }
            }
        }
        finally {
            this._inUndoRedo = false;
        }
    };
    UndoEngine.prototype._hasSessionChanges = function () {
        return this.isIngroup === 0 && this._observers.length > 0;
    };
    UndoEngine.prototype.start = function () {
        this.isIngroup++;
        if (this.isIngroup !== 0)
            return;
        this._groupObservers = this._observers;
        this._observers = [];
        this._groupPosition = this._position();
        this._position(-1);
        this._lockedPosition(this._position());
    };
    UndoEngine.prototype.end = function () {
        var _this = this;
        this.isIngroup--;
        if (this.isIngroup !== -1) {
            return;
        }
        if (this._observers.length > 0) {
            this._position(this._groupPosition + 1);
            var removedItems = this._groupObservers.splice(this._position(), this._groupObservers.length - this._position(), this._observers);
            removedItems.forEach(function (changeSet) {
                if (Array.isArray(changeSet)) {
                    changeSet.reverse().forEach(function (item) { return _this._disposeObserver(item); });
                }
                else {
                    _this._disposeObserver(changeSet);
                }
            });
        }
        else {
            this._position(this._groupPosition);
        }
        this._observers = this._groupObservers;
    };
    UndoEngine._disposeUndoEngineSubscriptionsName = '___dispose___UndoEngine___Subscriptions___';
    return UndoEngine;
}(utils_1.Disposable));
exports.UndoEngine = UndoEngine;
