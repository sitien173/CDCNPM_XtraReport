/**
* DevExpress Analytics (core\elements\baseSurface.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../../serializer/utils");
var _units_1 = require("../utils/_units");
var _cssCalculator_1 = require("../internal/_cssCalculator");
var _arrayutils_1 = require("../utils/_arrayutils");
var _hoverInfo_1 = require("../internal/_hoverInfo");
var point_1 = require("./point");
var _utils_1 = require("../../serializer/_utils");
var SurfaceElementArea = (function (_super) {
    __extends(SurfaceElementArea, _super);
    function SurfaceElementArea(control, context, unitProperties) {
        var _this = _super.call(this) || this;
        _this._createSurface = function (item) {
            return item['surface'] || new (item.getControlFactory()).controlsMap[item.controlType].surfaceType(item, _this._context);
        };
        _this.preInitProperties(control, context, unitProperties);
        _this._control = control;
        _this._context = context;
        control['surface'] = _this;
        if (_this._context) {
            _units_1.createUnitProperties(control, _this, unitProperties, _this._context.measureUnit, _this._context.zoom, function (property) { _this._disposables.push(property); });
        }
        _this._x = _this._x || ko.observable(0);
        _this._y = _this._y || ko.observable(0);
        _this._width = _this._width || ko.observable(0);
        _this._height = _this._height || ko.observable(0);
        var container = ko.pureComputed(function () { return _this.container(); });
        _this._disposables.push(container);
        _this._container = container();
        _this._disposables.push(container.subscribe(function (value) {
            if (_this._container !== value && _this.rtlLayout()) {
                var x = _this._getX();
                _this._container = value;
                _this._setX(x);
            }
            else {
                _this._container = value;
            }
        }));
        var x = ko.computed({
            read: function () { return _this._getX(); },
            write: function (value) {
                _this._setX(value);
            }
        }), y = _this._y, width = _this._width, height = _this._height;
        _this['position'] = {
            top: y,
            left: x,
            width: width,
            height: height,
            lineHeight: height
        };
        _this._disposables.push(x);
        var _rect = ko.observable();
        _this._disposables.push(ko.computed(function () {
            if (!_this._control.update()) {
                _rect({ top: y(), left: x(), right: x() + width(), bottom: y() + height(), width: width(), height: height() });
            }
        }));
        _this._disposables.push(_this.rect = ko.pureComputed({
            read: function () {
                return _rect();
            },
            write: function (newRect) {
                newRect = _this.beforeRectUpdated(newRect);
                _this._control.update(true);
                try {
                    if (newRect.left !== undefined) {
                        _this._setX(newRect.left, newRect.width);
                    }
                    else if (newRect.width !== undefined) {
                        _this._setX(x(), newRect.width);
                    }
                    if (newRect.top !== undefined) {
                        y(newRect.top);
                    }
                    if (newRect.right !== undefined && newRect.left === undefined && newRect.width === undefined) {
                        width(newRect.right - x());
                    }
                    if (newRect.bottom !== undefined && newRect.top === undefined) {
                        height(newRect.bottom - y());
                    }
                    if (newRect.right !== undefined && newRect.left !== undefined && newRect.width === undefined) {
                        width(newRect.right - newRect.left);
                    }
                    if (newRect.bottom !== undefined && newRect.top !== undefined) {
                        height(newRect.bottom - newRect.top);
                    }
                    if (newRect.width !== undefined) {
                        width(newRect.width);
                    }
                    if (newRect.height !== undefined) {
                        height(newRect.height);
                    }
                }
                finally {
                    _this._control.update(false);
                }
            }
        }));
        return _this;
    }
    SurfaceElementArea.prototype._getX = function () {
        if (this.rtlLayout() && this._container) {
            return this._container.rect().width - this._x() - this._width();
        }
        else {
            return this._x();
        }
    };
    SurfaceElementArea.prototype._setX = function (value, width) {
        width = width || this._width();
        if (this.rtlLayout() && this._container) {
            this._x(this._container.rect().width - value - width);
        }
        else {
            this._x(value);
        }
    };
    SurfaceElementArea.prototype.getRoot = function () {
        return this._context;
    };
    SurfaceElementArea.prototype.preInitProperties = function (control, context, unitProperties) { };
    SurfaceElementArea.prototype.container = function () {
        return this['parent'];
    };
    SurfaceElementArea.prototype.beforeRectUpdated = function (rect) {
        rect.left = rect.left < 0 ? 0 : rect.left;
        rect.top = rect.top < 0 ? 0 : rect.top;
        return rect;
    };
    SurfaceElementArea.prototype.rtlLayout = function () {
        return !!ko.unwrap(this._context.rtl);
    };
    SurfaceElementArea.prototype.getControlModel = function () {
        return this._control;
    };
    return SurfaceElementArea;
}(utils_1.Disposable));
exports.SurfaceElementArea = SurfaceElementArea;
var SurfaceElementBase = (function (_super) {
    __extends(SurfaceElementBase, _super);
    function SurfaceElementBase(control, context, unitProperties) {
        var _this = _super.call(this, control, context, unitProperties) || this;
        _this._countSelectedChildren = ko.observable(0);
        _this.focused = ko.observable(false);
        _this.selected = ko.observable(false);
        _this.underCursor = ko.observable(new _hoverInfo_1.HoverInfo());
        _this.allowMultiselect = true;
        _this.absolutePosition = new point_1.Point(0, 0);
        _this.getControlModel = function () {
            return control;
        };
        _this.cssCalculator = new _cssCalculator_1.CssCalculator(control, context.rtl);
        if (_this._getChildrenHolderName() && control[_this._getChildrenHolderName()]) {
            var collection = ko.observableArray();
            if (_this._getChildrenHolderName() === 'controls') {
                _this._disposables.push(_arrayutils_1.createObservableReverseArrayMapCollection(control[_this._getChildrenHolderName()], collection, _this._createSurface));
            }
            else {
                _this._disposables.push(_arrayutils_1.createObservableArrayMapCollection(control[_this._getChildrenHolderName()], collection, _this._createSurface));
            }
            _this[_this._getChildrenHolderName()] = collection;
            _this._disposables.push(_this.isSelected = ko.pureComputed(function () {
                if (!(_this.focused() || _this.selected())) {
                    return collection().some(function (item) {
                        return item.isSelected();
                    });
                }
                return true;
            }));
        }
        else {
            _this._disposables.push(_this.isSelected = ko.pureComputed(function () {
                return _this.focused() || _this.selected();
            }));
        }
        _this._disposables.push(_this.css = ko.pureComputed(function () {
            return _utils_1.extend({}, _this.cssCalculator.fontCss(), _this.cssCalculator.foreColorCss(), _this.cssCalculator.backGroundCss(), _this.cssCalculator.textAlignmentCss());
        }));
        _this._disposables.push(_this.contentCss = ko.pureComputed(function () {
            return _utils_1.extend({}, _this.cssCalculator.fontCss(), _this.cssCalculator.foreColorCss(), _this.cssCalculator.textAlignmentCss(), _this.cssCalculator.angle(), _this.cssCalculator.wordWrapCss(), _this.cssCalculator.paddingsCss());
        }));
        _this._disposables.push(ko.computed(function () {
            _this.updateAbsolutePosition();
        }));
        _this._disposables.push(_this.absoluteRect = ko.pureComputed(function () {
            var controlRect = _this.rect(), absolutePositionY = _this.absolutePosition.y(), absolutePositionX = _this.absolutePosition.x();
            return { top: absolutePositionY, left: absolutePositionX, right: absolutePositionX + controlRect.width, bottom: absolutePositionY + controlRect.height, width: controlRect.width, height: controlRect.height };
        }));
        _this.locked = control['lockedInUserDesigner'] ? control['lockedInUserDesigner']() : false;
        return _this;
    }
    Object.defineProperty(SurfaceElementBase.prototype, "parent", {
        get: function () {
            return this.getControlModel().parentModel() && this.getControlModel().parentModel().surface;
        },
        enumerable: true,
        configurable: true
    });
    SurfaceElementBase.prototype.checkParent = function (surfaceParent) {
        return this.parent === surfaceParent;
    };
    SurfaceElementBase.prototype._getChildrenHolderName = function () { return 'controls'; };
    SurfaceElementBase.prototype.getChildrenCollection = function () {
        return this._getChildrenHolderName() && this[this._getChildrenHolderName()] || ko.observableArray([]);
    };
    SurfaceElementBase.prototype.updateAbsolutePosition = function () {
        if (this.parent && this.parent.absolutePosition) {
            var parentX = this.parent.absolutePosition.x(), parentY = this.parent.absolutePosition.y(), newX = parentX + this.rect().left, newY = parentY + this.rect().top;
            this.absolutePosition.x(newX);
            this.absolutePosition.y(newY);
        }
        else {
            this.absolutePosition.x(0);
            this.absolutePosition.y(0);
        }
        this.afterUpdateAbsolutePosition();
    };
    SurfaceElementBase.prototype.canDrop = function () { return !this.locked && this._control.getMetaData().isContainer; };
    SurfaceElementBase.prototype.afterUpdateAbsolutePosition = function () {
    };
    SurfaceElementBase.prototype.findNextSelection = function () {
        var parentSurface = this.parent;
        var targetSurface = parentSurface;
        if (parentSurface) {
            var childrenCollection = parentSurface.getChildrenCollection()();
            var indexInCollection = childrenCollection.indexOf(this);
            if (indexInCollection === -1 && childrenCollection.length > 0) {
                targetSurface = childrenCollection[childrenCollection.length - 1];
            }
            else if (childrenCollection.length > 1 && indexInCollection === childrenCollection.length - 1) {
                targetSurface = childrenCollection[indexInCollection - 1];
            }
            else if (childrenCollection.length > 1 && indexInCollection === 0) {
                targetSurface = childrenCollection[childrenCollection.length - 1];
            }
            else if (childrenCollection.length > 1) {
                targetSurface = childrenCollection[childrenCollection.length - 1];
            }
            else if (indexInCollection === -1 && targetSurface.parent && targetSurface.parent.getChildrenCollection()().indexOf(targetSurface) === -1) {
                targetSurface = targetSurface.findNextSelection();
            }
        }
        return targetSurface;
    };
    return SurfaceElementBase;
}(SurfaceElementArea));
exports.SurfaceElementBase = SurfaceElementBase;
