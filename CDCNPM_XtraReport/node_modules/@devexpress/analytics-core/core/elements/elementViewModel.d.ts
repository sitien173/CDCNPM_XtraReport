/**
* DevExpress Analytics (core\elements\elementViewModel.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { ISerializationInfoArray, ISerializationInfo } from '../../serializer/serializationInfo';
import { ISelectionTarget } from '../selection/_selection';
import { IModelAction, IModelActionProvider } from '../../property-grid/widgets/internal/_utils';
import { Disposable } from '../../serializer/utils';
import { IModelSerializer } from '../../serializer/serializer';
import { ControlsFactory } from '../utils/controlsFactory';
export interface IElementMetadata {
    info: ISerializationInfoArray;
    surfaceType: any;
    type?: any;
    nonToolboxItem?: boolean;
    isToolboxItem?: boolean;
    toolboxIndex?: number;
    defaultVal?: {};
    group?: string;
    size?: string;
    isContainer?: boolean;
    isCopyDeny?: boolean;
    isPasteDeny?: boolean;
    isDeleteDeny?: boolean;
    popularProperties?: string[];
    canDrop?: (dropTarget: ISelectionTarget, dragFrom?: ElementViewModel) => boolean;
    elementActionsTypes?: any;
    parentType?: string;
    displayName?: string;
}
export interface IElementViewModel {
    controlType: string;
    name: ko.Observable<string> | ko.Computed<string>;
    parentModel: ko.Observable<IElementViewModel>;
    addChild: (element: IElementViewModel) => void;
    addChilds: (array: IElementViewModel[]) => void;
    removeChild: (element: IElementViewModel) => void;
    removeChilds: (array: IElementViewModel[]) => void;
    getNearestParent: (dropTarget: IElementViewModel) => IElementViewModel;
}
export interface IControlPropertiesViewModel {
    isPropertyDisabled: (name: string) => boolean;
    isPropertyVisible: (name: string) => boolean;
    isPropertyModified: (name: string) => boolean;
    controlType?: string;
    actions: IModelAction[];
    actionProviders?: IModelActionProvider[];
}
export declare class ElementViewModel extends Disposable implements IElementViewModel, IControlPropertiesViewModel {
    protected _resetProperty(propertyName: string): void;
    getPropertyDefaultValue(propertyName: string): any;
    getPropertyInfo(propertyName: string): ISerializationInfo;
    getInfo(): ISerializationInfoArray;
    createControl(model: any, serializer?: IModelSerializer): IElementViewModel;
    dispose(): void;
    preInitProperties(model: any, parent: ElementViewModel, serializer?: IModelSerializer): void;
    constructor(model: any, parent: ElementViewModel, serializer?: IModelSerializer);
    getNearestParent(target: IElementViewModel): any;
    getControlInfo(): IElementMetadata;
    getMetaData(): {
        isContainer: boolean;
        isCopyDeny: boolean;
        isDeleteDeny: boolean;
        canDrop: (dropTarget: ISelectionTarget, dragFrom?: ElementViewModel) => boolean;
        isPasteDeny: boolean;
    };
    _hasModifiedValue(name: any): any;
    name: ko.Observable<string> | ko.Computed<string>;
    controlType: string;
    createChild(info: {}): ElementViewModel;
    removeChilds(controls: ElementViewModel[]): void;
    addChilds(controls: ElementViewModel[]): void;
    removeChild(control: ElementViewModel): void;
    addChild(control: IElementViewModel): void;
    isPropertyVisible(name: string): boolean;
    isPropertyDisabled(name: string): boolean;
    isPropertyModified(name: string): any;
    getControlFactory(): ControlsFactory;
    resetValue: (propertyName: string) => void;
    isResettableProperty(propertyName: string): boolean;
    surface: any;
    parentModel: ko.Observable<ElementViewModel>;
    readonly root: ElementViewModel;
    rtl(): boolean;
    onDelete(): void;
    actions: IModelAction[];
    actionProviders: any[];
    update: ko.Observable<boolean>;
}
