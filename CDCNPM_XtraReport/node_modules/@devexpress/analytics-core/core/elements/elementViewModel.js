/**
* DevExpress Analytics (core\elements\elementViewModel.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../../serializer/utils");
var _utils_1 = require("../utils/_utils");
var serializer_1 = require("../../serializer/serializer");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var ElementViewModel = (function (_super) {
    __extends(ElementViewModel, _super);
    function ElementViewModel(model, parent, serializer) {
        var _this = _super.call(this) || this;
        _this.actions = [];
        _this.actionProviders = [];
        _this.update = ko.observable(false);
        _this.controlType = _this.controlType || _this.getControlFactory().getControlType(model);
        _this.preInitProperties(model, parent, serializer);
        _this.parentModel = ko.observable(parent);
        serializer = serializer || new serializer_1.ModelSerializer();
        serializer.deserialize(_this, model);
        _this._disposables.push(_this['displayName'] = ko.pureComputed(function () {
            var result = _this.name && _this.name();
            if (!result) {
                result = 'unnamed ' + _this.controlType;
            }
            return result;
        }));
        _this.resetValue = function (propertyName) {
            _this._resetProperty(propertyName);
        };
        _this.actions.push({
            action: _this.resetValue,
            id: 'dxd-reset',
            title: localization_utils_1.getLocalization('Reset', 'AnalyticsCoreStringId.PropertyGrid_PopupMenu_Reset'), visible: _this.isResettableProperty,
            weight: 1000
        });
        return _this;
    }
    ElementViewModel.prototype._resetProperty = function (propertyName) {
        if (this[propertyName].resetValue) {
            this[propertyName].resetValue();
        }
        else {
            var defaultValue = this.getPropertyDefaultValue(propertyName);
            if (ko.isObservable(this[propertyName])) {
                this[propertyName](defaultValue);
            }
            else {
                _utils_1.copyObservables(defaultValue, this[propertyName]);
            }
        }
    };
    ElementViewModel.prototype.getPropertyDefaultValue = function (propertyName) {
        var info = this.getPropertyInfo(propertyName);
        return ko.unwrap(info && new serializer_1.ModelSerializer().deserializeDefaultValue(info));
    };
    ElementViewModel.prototype.getPropertyInfo = function (propertyName) {
        return this.getInfo().filter(function (info) { return info.propertyName === propertyName; })[0];
    };
    ElementViewModel.prototype.getInfo = function () {
        return this.getControlFactory().controlsMap[this.controlType].info;
    };
    ElementViewModel.prototype.createControl = function (model, serializer) {
        return this.getControlFactory().createControl(model, this, serializer);
    };
    ElementViewModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.surface && this.surface.dispose();
    };
    ElementViewModel.prototype.preInitProperties = function (model, parent, serializer) { };
    ElementViewModel.prototype.getNearestParent = function (target) {
        return target.getMetaData().isContainer ? target : target.getNearestParent(target.parentModel());
    };
    ElementViewModel.prototype.getControlInfo = function () {
        return this.getControlFactory().controlsMap[this.controlType || 'Unknown'];
    };
    ElementViewModel.prototype.getMetaData = function () {
        var controlType = this.controlType ? this.controlType : 'Unknown', data = this.getControlFactory().controlsMap[controlType];
        return {
            isContainer: data.isContainer || false,
            isCopyDeny: data.isCopyDeny || false,
            isDeleteDeny: data.isDeleteDeny || false,
            canDrop: data.canDrop || (function () { return true; }),
            isPasteDeny: data.isPasteDeny || !data.isContainer
        };
    };
    ElementViewModel.prototype._hasModifiedValue = function (name) {
        return this['_' + name] && this['_' + name]() && this.isPropertyModified(name);
    };
    ElementViewModel.prototype.createChild = function (info) {
        var newControl = this.getControlFactory().createControl(info, this);
        this.addChild(newControl);
        return newControl;
    };
    ElementViewModel.prototype.removeChilds = function (controls) {
        if (this['controls']) {
            var childs = this['controls']();
            for (var i = 0; i < controls.length; i++) {
                childs.splice(childs.indexOf(controls[i]), 1);
            }
            this['controls'].valueHasMutated();
        }
    };
    ElementViewModel.prototype.addChilds = function (controls) {
        if (this['controls']) {
            var childs = this['controls']();
            for (var i = 0; i < controls.length; i++) {
                childs.splice(0, 0, controls[i]);
            }
            this['controls'].valueHasMutated();
        }
    };
    ElementViewModel.prototype.removeChild = function (control) {
        if (this['controls']) {
            this['controls'].splice(this['controls']().indexOf(control), 1);
            control.onDelete();
        }
    };
    ElementViewModel.prototype.addChild = function (control) {
        if (this['controls'] && this['controls']().indexOf(control) === -1) {
            control.parentModel(this);
            this['controls'].splice(0, 0, control);
        }
    };
    ElementViewModel.prototype.isPropertyVisible = function (name) {
        return true;
    };
    ElementViewModel.prototype.isPropertyDisabled = function (name) {
        return false;
    };
    ElementViewModel.prototype.isPropertyModified = function (name) {
        var needName = this['_' + name] ? '_' + name : name;
        if (this[needName].isPropertyModified) {
            return this[needName].isPropertyModified();
        }
        else if (this[needName].isEmpty) {
            return !this[needName].isEmpty();
        }
        else {
            var defaultValue = this.getPropertyDefaultValue(name), propertyValue = ko.unwrap(this[needName]);
            if (defaultValue instanceof Object) {
                return !_utils_1.compareObjects(defaultValue, propertyValue);
            }
            else {
                return defaultValue !== propertyValue;
            }
        }
    };
    ElementViewModel.prototype.getControlFactory = function () {
        throw Error('Virtual method getControlFactory');
    };
    ElementViewModel.prototype.isResettableProperty = function (propertyName) {
        return ['name', 'size', 'location'].indexOf(propertyName) === -1;
    };
    Object.defineProperty(ElementViewModel.prototype, "root", {
        get: function () {
            var root = this;
            while (root && root.parentModel()) {
                root = root.parentModel();
            }
            return root;
        },
        enumerable: true,
        configurable: true
    });
    ElementViewModel.prototype.rtl = function () {
        return false;
    };
    ElementViewModel.prototype.onDelete = function () { };
    return ElementViewModel;
}(utils_1.Disposable));
exports.ElementViewModel = ElementViewModel;
