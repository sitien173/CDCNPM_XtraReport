/**
* DevExpress Analytics (core\internal\_controlsHelper.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../../serializer/utils");
var _getNameHelpers_1 = require("./_getNameHelpers");
var _visitors_1 = require("../utils/_visitors");
var DesignControlsHelper = (function (_super) {
    __extends(DesignControlsHelper, _super);
    function DesignControlsHelper(target, handlers, collectionNames) {
        var _this = _super.call(this) || this;
        _this.target = target;
        _this.collectionNames = collectionNames;
        _this._handlers = [];
        _this._setText = false;
        _this._visitedCollections = [];
        _this._subscriptions = [];
        _this.added = function (value) {
            _this._setText = true;
            _this._collectControls(value);
            _this._setText = false;
        };
        _this.deleted = function (value) {
            var allControls = _this.allControls();
            var index = allControls.indexOf(value);
            allControls.splice(index, 1);
            _visitors_1.collectionsVisitor(value, function (collection) {
                collection().forEach(function (item) {
                    allControls.splice(allControls.indexOf(item), 1);
                });
            });
            _this.allControls.valueHasMutated();
        };
        _this.allControls = ko.observableArray();
        var unwrappedTarget = target;
        if (ko.isSubscribable(target)) {
            _this._disposables.push(target.subscribe(function (newTarget) {
                _this._visitedCollections = [];
                for (var i = 0, len = _this._subscriptions.length; i < len; i++) {
                    _this._subscriptions[i].dispose();
                }
                _this._subscriptions = [];
                _this.allControls([]);
                if (newTarget) {
                    _this._collectControls(newTarget);
                }
            }));
            unwrappedTarget = target.peek();
        }
        _this._disposables.push(_this.allControls.subscribe(function (args) {
            var addedItems = args.filter(function (x) { return x.status === 'added'; });
            for (var i = 0; i < addedItems.length; i++) {
                _this._setName(addedItems[i].value);
            }
        }, null, 'arrayChange'));
        unwrappedTarget && _this._collectControls(unwrappedTarget);
        _this._handlers.push.apply(_this._handlers, handlers);
        return _this;
    }
    DesignControlsHelper.prototype.getNameProperty = function (model) {
        return model.name;
    };
    DesignControlsHelper.prototype.getControlByName = function (name) {
        var control = null;
        this.allControls().some(function (x) {
            if (ko.unwrap(x.name) == name) {
                control = x;
                return true;
            }
            return false;
        });
        return control;
    };
    DesignControlsHelper.prototype._setName = function (value) {
        var _this = this;
        var names = this.allControls().map(function (item) { return ko.unwrap(_this.getNameProperty(item)); });
        if (!this.getNameProperty(value)() || names.filter(function (x) { return x === _this.getNameProperty(value)(); }).length > 1) {
            var newName = _getNameHelpers_1.getUniqueNameForNamedObjectsArray(this.allControls(), this._getNamePrefix(value), names);
            this.getNameProperty(value)(newName);
            this._setText && this._setDefaultText(value);
        }
    };
    DesignControlsHelper.prototype._setDefaultText = function (value) {
        var initialText = value.getControlInfo && value.getControlInfo().defaultVal && value.getControlInfo().defaultVal['@Text'];
        if (this._setText && value['text'] && !value['text']() && (initialText === null || initialText === undefined)) {
            value['text'](this.getNameProperty(value)());
        }
    };
    DesignControlsHelper.prototype._getNamePrefix = function (value) {
        var controlType = value.controlType || 'Unknown';
        return controlType.split('.').pop();
    };
    DesignControlsHelper.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._subscriptions.forEach(function (subscription) { return subscription.dispose(); });
        this._subscriptions.splice(0);
        this._visitedCollections.splice(0);
        this._handlers.splice(0);
        this.target = null;
        this.allControls([]);
    };
    DesignControlsHelper.prototype.processCollection = function (collection) { };
    DesignControlsHelper.prototype._collectControls = function (target) {
        var _this = this;
        var array = [target];
        _visitors_1.collectionsVisitor(target, function (collection, owner) {
            if (_this._visitedCollections.indexOf(collection) === -1) {
                _this._visitedCollections.push(collection);
                var subscriptionsArray = _this._subscriptions;
                if (owner instanceof utils_1.Disposable) {
                    subscriptionsArray = owner._disposables;
                }
                var subscription = collection.subscribe(function (args) {
                    args.forEach(function (changeSet) {
                        if (changeSet.moved != undefined)
                            return;
                        _this[changeSet.status] && _this[changeSet.status](changeSet.value);
                        _this._handlers.forEach(function (handler) {
                            handler[changeSet.status] && handler[changeSet.status](changeSet.value);
                        });
                    });
                }, null, 'arrayChange');
                subscriptionsArray.push({
                    dispose: function () {
                        subscription.dispose();
                        subscription = null;
                        _this._visitedCollections.splice(_this._visitedCollections.indexOf(collection), 1);
                    }
                });
            }
            _this.processCollection(collection());
            array.push.apply(array, collection());
        }, this.collectionNames);
        this.allControls.push.apply(this.allControls, array);
    };
    DesignControlsHelper.prototype.getControls = function (target) {
        var controls = ko.observableArray();
        _visitors_1.collectionsVisitor(target, function (collection) {
            controls.push.apply(controls, collection());
        });
        return controls;
    };
    return DesignControlsHelper;
}(utils_1.Disposable));
exports.DesignControlsHelper = DesignControlsHelper;
