/**
* DevExpress Analytics (core\internal\_resizable.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
require("jquery-ui/ui/widgets/draggable");
require("jquery-ui/ui/widgets/resizable");
require("jquery-ui/ui/widgets/selectable");
require("jquery-ui/ui/widgets/mouse");
var _surfaceHelpers_1 = require("./_surfaceHelpers");
var size_1 = require("../elements/size");
var _dragDropHandler_1 = require("../dragDrop/_dragDropHandler");
var _internal_1 = require("../../serializer/_internal");
var _utils_1 = require("../../serializer/_utils");
ko.bindingHandlers['resizable'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var values = valueAccessor(), $element = $(element), $parent = $element.closest('.dx-designer'), currentDirection = null, $selectedNodes = null, resizableDirections = { 'north': 'n', 'east': 'e', 'south': 's', 'west': 'w' }, calculateSizes = [], absolutePosition = null;
        values.handles = ko.unwrap(values.handles);
        var options = _utils_1.extend({
            handles: values.handles || 'all', ghost: false,
            stop: function (event, ui) {
                $selectedNodes.each(function (_, el) {
                    var context = ko.contextFor(el), control = context.$data, surface = context.$root.surface(), $el = $(el);
                    var rect = control.rect();
                    var newRect = _surfaceHelpers_1.getControlRect($el, control, surface);
                    newRect = {
                        top: currentDirection.indexOf(resizableDirections.north) !== -1 ? newRect.top : rect.top,
                        left: currentDirection.indexOf(resizableDirections.west) !== -1 ? newRect.left : rect.left,
                        width: currentDirection.indexOf(resizableDirections.east) !== -1 || currentDirection.indexOf(resizableDirections.west) !== -1 ? newRect.width : rect.width,
                        height: currentDirection.indexOf(resizableDirections.south) !== -1 || currentDirection.indexOf(resizableDirections.north) !== -1 ? newRect.height : rect.height,
                    };
                    calculateSizes.push(function () {
                        if (control.canSetRect && !control.canSetRect(newRect)) {
                            var originalPosition = $el.data('originalPosition');
                            var originalSize = $el.data('originalSize');
                            if (originalPosition) {
                                $el.css('top', originalPosition.top + 'px');
                                $el.css('left', originalPosition.left + 'px');
                            }
                            if (originalSize) {
                                $el.css('width', originalSize.width + 'px');
                                $el.css('height', originalSize.height + 'px');
                            }
                            $el.removeData('originalPosition');
                            $el.removeData('originalSize');
                            return;
                        }
                        control.rect(newRect);
                        if (JSON.stringify(rect) === JSON.stringify(newRect)) {
                            $el.css({
                                left: rect.left,
                                top: rect.top,
                                width: rect.width,
                                height: rect.height
                            });
                        }
                        $el.removeData('originalPosition');
                        $el.removeData('originalSize');
                    });
                });
                calculateSizes.forEach(function (c) { return c(); });
                calculateSizes = [];
                currentDirection = null;
                values.stopped();
                values.started = false;
                if (values.snapHelper) {
                    values.snapHelper.deactivateSnapLines();
                }
            },
            start: function (event) {
                var currentClassList = event.originalEvent.target.classList;
                for (var i = 0; i < currentClassList.length; i++) {
                    if (currentClassList[i] !== 'ui-resizable-handle' && currentClassList[i].indexOf('ui-resizable-') === 0)
                        currentDirection = currentClassList[i].slice('ui-resizable-'.length, currentClassList[i].length);
                }
                values.started = true;
                values.starting();
                $selectedNodes = values.$selectedNodes || $('.dxrd-viewport .dxrd-selected').filter(':visible');
                $selectedNodes
                    .each(function (_, el) {
                    var $el = $(el);
                    var bounds = el.getBoundingClientRect();
                    $el.data('originalPosition', { top: parseFloat($el.css('top')), left: parseFloat($el.css('left')) });
                    $el.data('originalSize', { width: bounds.width, height: bounds.height });
                });
                var elementOffset = $element.offset();
                var ghostContainerOffset = $parent.find('.dxrd-ghost-container').offset();
                if (!ghostContainerOffset) {
                    absolutePosition = elementOffset;
                }
                else {
                    absolutePosition = {
                        top: elementOffset.top - ghostContainerOffset.top,
                        left: elementOffset.left - ghostContainerOffset.left
                    };
                }
                if (values.snapHelper) {
                    values.snapHelper.updateSnapLines(viewModel);
                }
            },
            resize: function (event, ui) {
                var dw = ui.size.width - ui.originalSize.width, dh = ui.size.height - ui.originalSize.height, dx = ui.position.left - ui.originalPosition.left, dy = ui.position.top - ui.originalPosition.top;
                if (values.forceResize) {
                    values.forceResize({ size: new size_1.Size(ui.size.width, ui.size.height), delta: { dx: dx, dy: dy, dw: dw, dh: dh } });
                }
                if (event.altKey) {
                    values.snapHelper && values.snapHelper.deactivateSnapLines();
                }
                else if (values.snapHelper && $selectedNodes.length === 1) {
                    var newAbsolutePosition = _surfaceHelpers_1.getControlNewAbsolutePositionOnResize(values.snapHelper, absolutePosition, ui, { x: dx, y: dy, width: dw, height: dh });
                    values.snapHelper.activateSnapLines(newAbsolutePosition);
                    $element.css({
                        left: ui.originalPosition.left + newAbsolutePosition.left - absolutePosition.left,
                        top: ui.originalPosition.top + newAbsolutePosition.top - absolutePosition.top,
                        width: newAbsolutePosition.right - newAbsolutePosition.left,
                        height: newAbsolutePosition.bottom - newAbsolutePosition.top
                    });
                }
                $selectedNodes
                    .each(function (key, el) {
                    if (el === event.target)
                        return;
                    var $el = $(el);
                    var originalPosition = $el.data('originalPosition'), originalSize = $el.data('originalSize');
                    $el.css({
                        left: originalPosition.left + dx,
                        top: originalPosition.top + dy,
                        width: originalSize.width + dw,
                        height: originalSize.height + dh
                    });
                });
            }
        }, ko.unwrap(values));
        var subscription = null;
        if (!values.disabled) {
            subscription = _dragDropHandler_1.DragDropHandler.started.subscribe(function (newVal) {
                $element['resizable']('option', 'disabled', newVal);
                newVal ? $element.children('.ui-resizable-handle').css('display', 'none') : $element.children('.ui-resizable-handle').css('display', 'block');
            });
        }
        $element['resizable'](options);
        var onResize = function (event) {
            event.stopPropagation();
        };
        $element['resizable']().on('resize', onResize);
        _internal_1.addDisposeCallback(element, function () {
            $element['resizable']().off('resize', onResize);
            if ($element.data('ui-resizable'))
                $element['resizable']('destroy');
            $element = null;
            subscription && subscription.dispose();
        });
    },
    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $element = $(element);
        var disabled = !!(ko.unwrap(valueAccessor().disabled) || false || ko.unwrap(viewModel.locked));
        $element['resizable']('option', 'disabled', disabled);
        $element['resizable']('option', 'minHeight', ko.unwrap(valueAccessor().minimumHeight) || 1);
        $element['resizable']('option', 'minWidth', ko.unwrap(valueAccessor().minimumWidth) || 1);
        if (ko.unwrap(valueAccessor().handles) && $element['resizable']('option', 'handles') !== ko.unwrap(valueAccessor().handles)) {
            $element['resizable']('option', 'handles', ko.unwrap(valueAccessor().handles));
        }
        var maxWidth = ko.unwrap(valueAccessor().maximumWidth);
        if (maxWidth) {
            $element['resizable']('option', 'maxWidth', maxWidth);
        }
        disabled ? $element.children('.ui-resizable-handle').css('display', 'none') : $element.children('.ui-resizable-handle').css('display', 'block');
    }
};
