/**
* DevExpress Analytics (core\internal\_stores.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../serializer/utils");
var array_store_1 = require("devextreme/data/array_store");
var custom_store_1 = require("devextreme/data/custom_store");
var data_source_1 = require("devextreme/data/data_source");
var CustomSortedArrayStore = (function (_super) {
    __extends(CustomSortedArrayStore, _super);
    function CustomSortedArrayStore(items, sortPropertyName) {
        if (sortPropertyName === void 0) { sortPropertyName = 'name'; }
        return _super.call(this, CustomSortedArrayStore._createOptions(items, sortPropertyName)) || this;
    }
    CustomSortedArrayStore._sortItems = function (items, sortPropertyName) {
        return items.sort(function (a, b) {
            var propA = ko.unwrap(a[sortPropertyName]), propB = ko.unwrap(b[sortPropertyName]);
            if (propA && propB) {
                var diff = propA - propB;
                if (!isNaN(diff))
                    return diff;
                propA = propA.toLowerCase ? propA.toLowerCase() : propA;
                propB = propB.toLowerCase ? propB.toLowerCase() : propB;
                return (propA < propB) ? -1 : (propA > propB) ? 1 : 0;
            }
        });
    };
    CustomSortedArrayStore._createOptions = function (items, sortPropertyName) {
        items = this._sortItems(items, sortPropertyName);
        return {
            load: function (options) {
                var result = [].concat(items);
                if (options.take)
                    result = result.splice(options.skip, options.take);
                if (options.filter)
                    result = result.filter(options.filter);
                return $.Deferred().resolve(result).promise();
            },
            byKey: function (key) {
                if (items.some(function (x) { return x === key; }))
                    return key;
            }
        };
    };
    return CustomSortedArrayStore;
}(custom_store_1.default));
exports.CustomSortedArrayStore = CustomSortedArrayStore;
var SortedArrayStore = (function (_super) {
    __extends(SortedArrayStore, _super);
    function SortedArrayStore(options, sortPropertyName) {
        if (sortPropertyName === void 0) { sortPropertyName = 'name'; }
        var _this = this;
        if (options instanceof Array) {
            CustomSortedArrayStore._sortItems(options, sortPropertyName);
        }
        _this = _super.call(this, options) || this;
        return _this;
    }
    return SortedArrayStore;
}(array_store_1.default));
exports.SortedArrayStore = SortedArrayStore;
var ControlsStore = (function (_super) {
    __extends(ControlsStore, _super);
    function ControlsStore(allControls) {
        var _this = _super.call(this) || this;
        _this._filter = ko.observable(null);
        var dataSource = null;
        _this._disposables.push(_this.dataSource = ko.computed(function () {
            dataSource && dataSource.dispose();
            dataSource = new data_source_1.default({
                store: new CustomSortedArrayStore(allControls()),
                paginate: true,
                filter: _this._filter(),
                pageSize: 100
            });
            return dataSource;
        }));
        _this._disposables.push(_this.visible = ko.computed(function () {
            return allControls().length > 0;
        }));
        return _this;
    }
    ControlsStore.prototype.setFilter = function (filter) {
        this._filter(filter);
    };
    ControlsStore.prototype.resetFilter = function () {
        this._filter(null);
    };
    return ControlsStore;
}(utils_1.Disposable));
exports.ControlsStore = ControlsStore;
