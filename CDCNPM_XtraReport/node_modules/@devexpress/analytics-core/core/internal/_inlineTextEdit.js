/**
* DevExpress Analytics (core\internal\_inlineTextEdit.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../serializer/utils");
var _utils_1 = require("../../property-grid/widgets/internal/_utils");
function processTextEditorHotKeys(event, delegates) {
    if (!event || !delegates)
        return;
    if (event.key === _utils_1.KeyboardEnum.Esc && !!delegates['esc']) {
        delegates['esc']();
    }
    if (event.key === _utils_1.KeyboardEnum.Enter && event.ctrlKey && !!delegates['ctrlEnter']) {
        delegates['ctrlEnter']();
    }
}
exports.processTextEditorHotKeys = processTextEditorHotKeys;
var InlineTextEdit = (function (_super) {
    __extends(InlineTextEdit, _super);
    function InlineTextEdit(selection) {
        var _this = _super.call(this) || this;
        _this._showInline = ko.observable(false);
        _this.text = ko.observable();
        var _controlText;
        _this._disposables.push(selection.focused.subscribe(function () {
            if (_this._showInline() && _controlText) {
                _controlText(_this.text());
                _this._showInline(false);
            }
            var controlModel = selection.focused() && selection.focused().getControlModel();
            _controlText = controlModel && (controlModel.textEditableProperty || controlModel.text);
        }));
        _this._disposables.push(_this.visible = ko.pureComputed({
            read: function () {
                return _this._showInline();
            },
            write: function (val) {
                _this._showInline(val);
            }
        }));
        _this.show = function (element) {
            if (_this._showInline()) {
                return;
            }
            var isSingleControlSelected = !!selection.selectedItems ? selection.selectedItems.length === 1 : !!selection.focused();
            if (isSingleControlSelected && _controlText && !selection.focused().locked) {
                _this.text(_controlText());
                _this._showInline(true);
                if (element) {
                    var textarea = $(element).find('textarea')[0];
                    textarea && textarea['select']();
                }
            }
            else {
                _this._showInline(false);
            }
        };
        _this.keypressAction = function (args) {
            processTextEditorHotKeys(args.event, {
                esc: function () { _this._showInline(false); },
                ctrlEnter: function () {
                    _controlText(_this.text());
                    _this._showInline(false);
                }
            });
        };
        return _this;
    }
    return InlineTextEdit;
}(utils_1.Disposable));
exports.InlineTextEdit = InlineTextEdit;
