/**
* DevExpress Analytics (core\internal\_objectStructureProviders.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../serializer/utils");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var ObjectStructureProviderBase = (function (_super) {
    __extends(ObjectStructureProviderBase, _super);
    function ObjectStructureProviderBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectedPath = ko.observable('');
        _this.selectedMember = ko.observable();
        return _this;
    }
    ObjectStructureProviderBase.prototype.getClassName = function (instance) {
        if (instance.className && instance.className()) {
            return instance.className();
        }
        var funcNameRegex = /function (.{1,})\(/;
        var results = (funcNameRegex).exec((instance).constructor.toString());
        return (results && results.length > 1) ? results[1] : '';
    };
    ObjectStructureProviderBase.prototype.createItem = function (currentTarget, propertyName, propertyValue, result) {
        var targetInfo = currentTarget.getInfo && currentTarget.getInfo();
        var propertyInfo = targetInfo && targetInfo.filter(function (propertyInfo) { return propertyInfo.propertyName === propertyName; })[0], unwrapPropertyValue = ko.unwrap(propertyValue);
        if (propertyInfo && unwrapPropertyValue !== null && typeof unwrapPropertyValue === 'object') {
            result.push({
                name: propertyName,
                displayName: localization_utils_1.getLocalization(propertyInfo.displayName, propertyInfo.localizationId),
                specifics: propertyName,
                innerActions: unwrapPropertyValue['innerActions'],
                isList: !!unwrapPropertyValue.push
            });
        }
    };
    ObjectStructureProviderBase.prototype.getMemberByPath = function (target, path) {
        var pathComponents = path.split('.'), currentTarget = target;
        pathComponents.splice(0, 1);
        pathComponents.forEach(function (member) {
            if (currentTarget && currentTarget[member]) {
                currentTarget = ko.unwrap(currentTarget[member]);
            }
        });
        return currentTarget;
    };
    ObjectStructureProviderBase.prototype.getObjectPropertiesForPath = function (target, path, propertyName) {
        var currentTarget = this.getMemberByPath(target, path), result = [];
        if (currentTarget) {
            if (currentTarget.push) {
                this.createArrayItem(currentTarget, result, propertyName);
            }
            else {
                for (var name in currentTarget) {
                    this.createItem(currentTarget, name, currentTarget[name], result);
                }
            }
        }
        return result;
    };
    ObjectStructureProviderBase.prototype.createArrayItem = function (currentTarget, result, propertyName) {
        for (var i = 0; i < currentTarget.length; i++) {
            var unwrapArrayValue = ko.unwrap(currentTarget[i]);
            result.push({
                name: propertyName ? propertyName + '.' + i.toString() : i.toString(),
                displayName: ko.unwrap(unwrapArrayValue['displayName'] || unwrapArrayValue['name']),
                specifics: this.getClassName(unwrapArrayValue),
                innerActions: unwrapArrayValue['innerActions'],
                isList: !!unwrapArrayValue.push
            });
        }
    };
    return ObjectStructureProviderBase;
}(utils_1.Disposable));
exports.ObjectStructureProviderBase = ObjectStructureProviderBase;
var ObjectExplorerProvider = (function (_super) {
    __extends(ObjectExplorerProvider, _super);
    function ObjectExplorerProvider(rootITems, listPropertyNames, member, getPathByMember) {
        var _this = _super.call(this) || this;
        _this.path = ko.observable('');
        _this.getPathByMember = getPathByMember;
        _this.listPropertyNames = listPropertyNames || [];
        _this.getItems = function (pathRequest) {
            var result = $.Deferred();
            if (!pathRequest.fullPath) {
                result.resolve((rootITems || []).map(function (item) {
                    return { name: item.name, displayName: localization_utils_1.getLocalization(item.displayName) || item.name, isList: true, specifics: item.className, dragData: { noDragable: true }, data: ko.unwrap(item.data) };
                }));
            }
            else {
                var target = rootITems.filter(function (item) { return item.name === pathRequest.fullPath.split('.')[0]; })[0];
                result.resolve(_this.getObjectPropertiesForPath(ko.unwrap(target.model), pathRequest.fullPath, target.name));
            }
            return result.promise();
        };
        _this._disposables.push(_this.selectedPath = ko.computed({
            read: function () {
                if (member()) {
                    if (_this.path.peek()) {
                        return _this.getPathByMember(member()).substr(_this.path.peek().length + 1);
                    }
                    else {
                        return _this.getPathByMember(member());
                    }
                }
                else {
                    return null;
                }
            },
            write: function (newVal) {
                if (!!newVal) {
                    var root = !!_this.path() ? _this.path().split('.')[0] : newVal.split('.')[0];
                    var rootItem = rootITems.filter(function (x) { return x.name === root; })[0];
                    if (!!rootItem) {
                        member(_this.getMemberByPath(ko.unwrap(rootItem.model), _this.path() ? [_this.path(), newVal].join('.') : newVal));
                    }
                }
                else {
                    member(null);
                }
            }
        }));
        return _this;
    }
    ObjectExplorerProvider.prototype.createArrayItem = function (currentTarget, result, propertyName) {
        for (var i = 0; i < currentTarget.length; i++) {
            var unwrapArrayValue = ko.unwrap(currentTarget[i]), isList = false;
            this.listPropertyNames.forEach(function (name) {
                if (!isList && unwrapArrayValue[name] && ko.unwrap(unwrapArrayValue[name]).length > 0) {
                    isList = true;
                }
            });
            var specifics = this.getClassName(unwrapArrayValue);
            result.push({
                name: propertyName ? propertyName + '.' + i.toString() : i.toString(),
                displayName: ko.unwrap(unwrapArrayValue['displayName'] || unwrapArrayValue['name']),
                specifics: specifics,
                isList: isList,
                data: unwrapArrayValue,
                dragData: {
                    noDragable: !((propertyName === 'bands' && (specifics === 'groupheaderband' || specifics === 'groupfooterband' || specifics === 'detailreportband' || specifics === 'subband')) ||
                        propertyName === 'controls' ||
                        propertyName === 'rows' ||
                        (propertyName === 'cells' && specifics !== 'xrcrosstabcell') ||
                        propertyName === 'subBands' ||
                        propertyName === 'Styles' ||
                        propertyName === 'Formatting Rules')
                }
            });
        }
    };
    ObjectExplorerProvider.prototype.createItem = function (currentTarget, propertyName, propertyValue, result) {
        var isAvailableListProperty = this.listPropertyNames.length > 0 ? this.listPropertyNames.indexOf(propertyName) > -1 : true;
        if (isAvailableListProperty && propertyValue && propertyValue.push) {
            this.createArrayItem(ko.unwrap(propertyValue), result, propertyName);
        }
    };
    return ObjectExplorerProvider;
}(ObjectStructureProviderBase));
exports.ObjectExplorerProvider = ObjectExplorerProvider;
var ObjectStructureProvider = (function (_super) {
    __extends(ObjectStructureProvider, _super);
    function ObjectStructureProvider(target, displayName, localizationId) {
        var _this = _super.call(this) || this;
        _this.getItems = function (pathRequest) {
            var result = $.Deferred();
            if (!pathRequest.fullPath) {
                result.resolve([{ name: displayName || ko.unwrap(target['name']), displayName: localization_utils_1.getLocalization(displayName || ko.unwrap(target['name']), localizationId), isList: true, specifics: target.className && target.className(), dragData: { noDragable: true } }]);
            }
            else {
                result.resolve(_this.getObjectPropertiesForPath(ko.unwrap(target), pathRequest.fullPath));
            }
            return result.promise();
        };
        _this._disposables.push(_this.selectedPath.subscribe(function (path) {
            _this.selectedMember(ko.unwrap(_this.getMemberByPath(ko.unwrap(target), path)));
        }));
        return _this;
    }
    return ObjectStructureProvider;
}(ObjectStructureProviderBase));
exports.ObjectStructureProvider = ObjectStructureProvider;
