/**
* DevExpress Analytics (core\internal\_scrollProcessor.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var scroll_view_1 = require("devextreme/ui/scroll_view");
var utils_1 = require("../../serializer/utils");
var dxScrollProcessor = (function (_super) {
    __extends(dxScrollProcessor, _super);
    function dxScrollProcessor(_container, _updateTime) {
        if (_updateTime === void 0) { _updateTime = 10; }
        var _this = _super.call(this) || this;
        _this._container = _container;
        _this._updateTime = _updateTime;
        _this._currentOffsetY = 0;
        _this._currentOffsetX = 0;
        _this._scroll = null;
        _this._updateInterval = null;
        _this._scroll = scroll_view_1.default.getInstance(_this._container);
        return _this;
    }
    dxScrollProcessor.prototype.dispose = function () {
        this._scroll = null;
        this._container = null;
        this._updateInterval && clearTimeout(this._updateInterval);
        this._updateInterval = null;
    };
    dxScrollProcessor.prototype._startUpdateScrollPosition = function () {
        var _this = this;
        this._updateInterval && clearInterval(this._updateInterval);
        this._updateInterval = setInterval(function () { return _this._scroll.scrollTo({
            top: _this._scroll.scrollTop() + _this._currentOffsetY,
            left: _this._scroll.scrollLeft() + _this._currentOffsetX
        }); }, this._updateTime);
    };
    dxScrollProcessor.prototype._calculateOffset = function (screenPosition, containerRect, offsetProperty) {
        var sizeProperty = offsetProperty === 'y' ? 'height' : 'width';
        if (screenPosition[offsetProperty] > (containerRect[offsetProperty] + containerRect[sizeProperty] - 50)) {
            return 5;
        }
        else if (screenPosition[offsetProperty] < (containerRect[offsetProperty] + 50)) {
            return -5;
        }
        return 0;
    };
    dxScrollProcessor.prototype.getScrollOffset = function () {
        return this._scroll.scrollOffset();
    };
    dxScrollProcessor.prototype.processOffset = function (screenPosition) {
        var containerRect = this._container.getBoundingClientRect();
        this._currentOffsetY = this._calculateOffset(screenPosition, containerRect, 'y');
        this._currentOffsetX = this._calculateOffset(screenPosition, containerRect, 'x');
        if (!this._currentOffsetX && !this._currentOffsetY) {
            this._updateInterval && clearInterval(this._updateInterval);
            this._updateInterval = null;
        }
        else if (!this._updateInterval) {
            this._startUpdateScrollPosition();
        }
    };
    return dxScrollProcessor;
}(utils_1.Disposable));
exports.dxScrollProcessor = dxScrollProcessor;
