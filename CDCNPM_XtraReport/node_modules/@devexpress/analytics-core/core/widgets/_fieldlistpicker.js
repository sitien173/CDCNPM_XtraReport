/**
* DevExpress Analytics (core\widgets\_fieldlistpicker.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
require("devextreme/ui/drop_down_box");
var _utils_1 = require("../../serializer/_utils");
var _dxtInherit_1 = require("../../widgets/internal/_dxtInherit");
var dxFieldListPicker = (function (_super) {
    __extends(dxFieldListPicker, _super);
    function dxFieldListPicker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._path = ko.observable('');
        _this._value = ko.observable('');
        _this._parentViewport = null;
        _this._itemsProvider = ko.observable(null);
        _this._hasDisplayNameOption = false;
        _this._defaultPosition = null;
        return _this;
    }
    dxFieldListPicker.prototype.updateOptions = function (options) {
        options.showClearButton = true;
    };
    dxFieldListPicker.prototype.ctor = function ($element, options) {
        var _$element = $($element);
        _$element.addClass('dx-fieldlistpicker');
        this.option('path') && this._path(this.option('path'));
        this.option('value') && this._value(this.option('value'));
        this.option('itemsProvider') && this._itemsProvider(this.option('itemsProvider'));
        this.option('valueChangeEvent', 'change');
        this.option('openOnFieldClick', this.option('acceptCustomValue') === false);
        this._parentViewport = _$element.parents('.dx-designer-viewport');
        if ('displayValue' in options) {
            this._hasDisplayNameOption = true;
            this.option('displayValue', options.displayValue);
            this._setTitle(this.option('displayValue'));
        }
    };
    dxFieldListPicker.prototype._showDropDown = function () {
        if (this['_popup']) {
            var $element = $(this.element());
            this['_popup'].option('width', $element.width());
            var popupPosition = _utils_1.extend(true, {}, this._defaultPosition, { boundary: this._parentViewport[0], boundaryOffset: '0 20', collision: 'none flip' });
            this['_popup'].option('position', popupPosition);
            this['_popup'].option('height', 'auto');
            this['_popup'].option('maxHeight', this._getMaxHeight());
            this['_popup'].repaint();
            $(this['_popup'].content())[0].style.height = 'auto';
            this['_popup']._renderPosition();
        }
    };
    dxFieldListPicker.prototype._getMaxHeight = function () {
        var $element = $(this.element()), offset = $element.offset(), windowHeight = $(window).height(), maxHeight = Math.max(offset.top, windowHeight - offset.top - $element.outerHeight());
        return Math.min(.5 * windowHeight, maxHeight);
    };
    dxFieldListPicker.prototype._closeOutsideDropDownHandler = function (e, ignoreContainerClicks) { _dxtInherit_1._getSuper(this)._closeOutsideDropDownHandler.apply(this, [e, true]); };
    dxFieldListPicker.prototype._hideOnBlur = function () { return false; };
    dxFieldListPicker.prototype._popupConfig = function () {
        var dxPolymorphWidget = this.option('integrationOptions').templates['dx-polymorph-widget'];
        var popuConfig = _dxtInherit_1._getSuper(this)._popupConfig.apply(this);
        this._defaultPosition = popuConfig.position;
        return _utils_1.extend(popuConfig, {
            container: this._parentViewport,
            contentTemplate: dxPolymorphWidget && dxPolymorphWidget._template,
            closeOnOutsideClick: true
        });
    };
    dxFieldListPicker.prototype._setTitle = function (text) {
        if (this.option('openOnFieldClick')) {
            $(this.element()).attr('title', text);
        }
    };
    dxFieldListPicker.prototype._renderDisplayText = function (newValue) { _dxtInherit_1._getSuper(this)._renderDisplayText.apply(this, [newValue]); };
    dxFieldListPicker.prototype._optionChanged = function (args) {
        var _this = this;
        var name = args.name, newValue = args.value;
        switch (name) {
            case 'value':
                this._value(newValue);
                if (!this._hasDisplayNameOption)
                    this._renderDisplayText(newValue);
                setTimeout($.proxy(function () {
                    _this.option('opened', false);
                }, this), 50);
                break;
            case 'path':
                this._path(newValue);
                break;
            case 'itemsProvider':
                this._itemsProvider(newValue);
                break;
            case 'displayValue':
                this._renderDisplayText(newValue);
                this._setTitle(newValue);
                break;
            default:
                _dxtInherit_1._getSuper(this)._optionChanged.apply(this, arguments);
                if (name === 'opened' && newValue) {
                    this['_showDropDown']();
                }
        }
    };
    dxFieldListPicker.prototype._clearValueHandler = function () {
        $(this['_input']()).val(null);
        _dxtInherit_1._getSuper(this)._clearValueHandler.apply(this, arguments);
    };
    dxFieldListPicker.prototype._renderPopupContent = function () {
        var _this = this;
        _dxtInherit_1._getSuper(this)._renderPopupContent.apply(this, arguments);
        var selectedPath = ko.pureComputed({
            read: function () {
                return _this._path() ? _this._path() + '.' + _this._value() : _this._value();
            },
            write: function (newVal) {
                if (_this._path() && _this._path().length > 0) {
                    _this._value(newVal.substr(_this._path().length + 1));
                    _this.option('value', _this._value());
                }
                else {
                    _this._value(newVal);
                    _this.option('value', _this._value());
                }
            }
        });
        var element = $('<div>').addClass('dx-treelist-wrapper').get(0);
        var scroll = this['_createComponent'](element, 'dxScrollView', { scrollByThumb: true });
        var self = this;
        var $scrollContent = $(scroll['content']());
        var $element = $(this.element());
        $scrollContent.append($('<div data-bind="treelist: options"></div>')[0]);
        var context = ko.contextFor($element.get(0));
        var treeListController = this.option('treeListController');
        var options = ko.computed(function () {
            return {
                itemsProvider: _this._itemsProvider(), onItemsVisibilityChanged: function () {
                    if (self['_popup']) {
                        self['_popup']._renderPosition();
                    }
                }, selectedPath: selectedPath, treeListController: treeListController, path: _this._path
            };
        });
        var childContext = context.createChildContext({ options: options });
        ko.applyBindingsToDescendants(childContext, $scrollContent.get(0));
        $(this['_popup'].content()).append(element);
    };
    dxFieldListPicker.prototype.getComponentName = function () {
        return 'dxDropDownBox';
    };
    return dxFieldListPicker;
}(_dxtInherit_1._dxtInherit));
exports.dxFieldListPicker = dxFieldListPicker;
_dxtInherit_1._registerDxtComponent('dxFieldListPicker', dxFieldListPicker);
