/**
* DevExpress Analytics (core\widgets\propertygrid\_group.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../../../serializer/utils");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var Group = (function (_super) {
    __extends(Group, _super);
    function Group(name, serializationsInfo, createEditors, collapsed, displayName) {
        if (collapsed === void 0) { collapsed = true; }
        var _this = _super.call(this) || this;
        _this.editors = ko.observableArray([]).extend({ deferred: true });
        _this.editorsCreated = ko.observable(false);
        _this.editorsRendered = ko.observable(false);
        _this._displayName = name;
        _this.displayName = displayName || (function () { return localization_utils_1.getLocalization(name); });
        _this._serializationsInfo = serializationsInfo;
        _this.collapsed = ko.observable(collapsed);
        if (collapsed) {
            var subscription = _this.collapsed.subscribe(function (newVal) {
                subscription.dispose();
                _this.editorsRendered(true);
            });
            _this._disposables.push(subscription);
        }
        _this.recreate = function () {
            _this.editors(createEditors(serializationsInfo));
            if (_this._accessibilityProvider) {
                _this.editors().forEach(function (editor) {
                    editor.registerAccessibilityProvider(_this._accessibilityProvider);
                });
            }
        };
        _this.editors(createEditors(serializationsInfo));
        _this.visible = ko.computed(function () {
            return _this.editors().some(function (editor) { return editor.visible(); });
        });
        _this._disposables.push(_this.visible);
        return _this;
    }
    Group.prototype.resetEditors = function () {
        this.disposeObservableArray(this.editors);
        this.resetObservableArray(this.editors);
    };
    Group.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.disposeObservableArray(this.editors);
        this.resetObservableArray(this.editors);
    };
    Group.prototype.update = function (viewModel) {
        var _this = this;
        this._viewModel = viewModel;
        this.editors().forEach(function (editor) {
            editor.update(_this._viewModel);
        });
    };
    Group.prototype.registerAccessibilityProvider = function (accessibilityProvider) {
        this._accessibilityProvider = accessibilityProvider;
        this.editors().forEach(function (editor) {
            editor.registerAccessibilityProvider(accessibilityProvider);
        });
    };
    return Group;
}(utils_1.Disposable));
exports.Group = Group;
