/**
* DevExpress Analytics (core\widgets\_buttonInlineEditor.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
require("devextreme/ui/button");
var _dxtInherit_1 = require("../../widgets/internal/_dxtInherit");
var editor_template = {
    render: function (options) {
        var $icon = $('<i />').addClass('dx-icon');
        if (!!options.model.iconClass) {
            $icon.addClass(options.model.iconClass);
            $icon.addClass('dx-icon-' + options.model.iconClass);
            $icon.addClass('dx-icon-dxrd');
        }
        else if (!!options.model.icon) {
            $icon.addClass(options.model.icon);
        }
        if (options.model.icon) {
            $icon.attr('data-bind', "template: '" + options.model.icon + "'");
        }
        var icon = $icon.get(0);
        $(options.container).append(icon);
        if (options.model.text) {
            var $span = $('<span />').addClass('dx-button-text');
            $span.text(options.model.text);
            $(options.container).append($span);
        }
        setTimeout(function () {
            if (!ko.dataFor(icon))
                ko.applyBindings(options.model, icon);
        }, 1);
    }
};
var dxButtonWithTemplate = (function (_super) {
    __extends(dxButtonWithTemplate, _super);
    function dxButtonWithTemplate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    dxButtonWithTemplate.prototype.updateOptions = function (options) {
        options['template'] = editor_template;
    };
    dxButtonWithTemplate.prototype._patchOptionValues = function (options) {
        var patchedOptions = _dxtInherit_1._getSuper(this)._patchOptionValues.call(this, options);
        var optionsToExtend = { iconClass: options['iconClass'] };
        ko.utils.extend(patchedOptions.templateData, optionsToExtend);
        return patchedOptions;
    };
    dxButtonWithTemplate.prototype.getComponentName = function () {
        return 'dxButton';
    };
    return dxButtonWithTemplate;
}(_dxtInherit_1._dxtInherit));
exports.dxButtonWithTemplate = dxButtonWithTemplate;
_dxtInherit_1._registerDxtComponent('dxButtonWithTemplate', dxButtonWithTemplate);
