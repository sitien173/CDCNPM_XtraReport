/**
* DevExpress Analytics (core\utils\controlsFactory.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var elementViewModel_1 = require("../elements/elementViewModel");
var _getNameHelpers_1 = require("../internal/_getNameHelpers");
var _utils_1 = require("../../serializer/_utils");
var _localization_1 = require("../../property-grid/localization/_localization");
var ControlsFactory = (function () {
    function ControlsFactory() {
        this.controlsMap = {};
    }
    ControlsFactory.prototype.getControlInfo = function (controlType) {
        var info = this.controlsMap[controlType] || null;
        return info;
    };
    ControlsFactory.prototype.getControlType = function (model) {
        var controlType = _getNameHelpers_1.getTypeNameFromFullName(model['@ControlType'] || '');
        return this.controlsMap[controlType] ? controlType : 'Unknown';
    };
    ControlsFactory.prototype.createControl = function (model, parent, serializer) {
        var controlType = this.getControlType(model);
        return new (this.controlsMap[controlType] && this.controlsMap[controlType].type || elementViewModel_1.ElementViewModel)(model, parent, serializer);
    };
    ControlsFactory.prototype.registerControl = function (typeName, metadata) {
        if (metadata.isToolboxItem !== undefined) {
            metadata.nonToolboxItem = !metadata.isToolboxItem;
        }
        Object.defineProperty(metadata, 'isToolboxItem', {
            get: function () {
                return !metadata.nonToolboxItem;
            },
            set: function (newVal) {
                metadata.nonToolboxItem = !newVal;
            },
            enumerable: true,
            configurable: true
        });
        this.controlsMap[typeName] = metadata;
        this.controlsMap[typeName].info = _utils_1.extend(true, [], metadata.info);
    };
    ControlsFactory.prototype._getPropertyInfo = function (info, path, position) {
        var propertyInfo = info.filter(function (x) { return _localization_1.getLocalization(x.displayName, x.localizationId) === path[position] || x.propertyName === path[position] || x.modelName === '@' + path[position] || x.modelName === path[position]; })[0];
        if (position === path.length - 1) {
            return propertyInfo || null;
        }
        else {
            if (propertyInfo.info) {
                return this._getPropertyInfo(propertyInfo.info, path, position + 1);
            }
            else if (propertyInfo.from) {
                var object = null;
                try {
                    object = propertyInfo.from({});
                }
                catch (e) {
                    return null;
                }
                var newInfo = object.getInfo && object.getInfo();
                if (newInfo) {
                    return this._getPropertyInfo(newInfo, path, position + 1);
                }
            }
        }
        return null;
    };
    ControlsFactory.prototype.getPropertyInfo = function (controlType, path) {
        var properties = path;
        if (!$.isArray(path)) {
            properties = path.split('.');
        }
        return this._getPropertyInfo(this.controlsMap[controlType].info, properties, 0);
    };
    return ControlsFactory;
}());
exports.ControlsFactory = ControlsFactory;
