/**
* DevExpress Analytics (core\utils\_designerCreator.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { UndoEngine } from '../../undo-engine/undoengine';
import { IDisposable, Disposable } from '../../serializer/utils';
import { SurfaceSelection } from '../selection/_selection';
import { SnapLinesHelper } from '../snapLines/_snapLinesHelper';
import { DragHelperContent } from '../dragDrop/_dragHelperContent';
import { SelectionDragDropHandler } from '../dragDrop/_selectionDragDropHandler';
import { ToolboxDragDropHandler } from '../dragDrop/_toolboxDragDropHandler';
import { ToolboxItem } from '../tools/toolbox';
import { ControlProperties } from '../widgets/propertygrid/_controlProperties';
import { ObjectProperties } from '../../property-grid/propertygrid';
import { DesignControlsHelper, IDesignControlsHelper } from '../internal/_controlsHelper';
import { ControlsStore } from '../internal/_stores';
import { TabPanel, TabInfo } from '../tools/tabPanel';
import { IActionsProvider } from '../_actionProvider';
import { IAction } from '../../widgets/utils';
import { InlineTextEdit } from '../internal/_inlineTextEdit';
import { ActionLists } from '../tools/_actionList';
import { IDesignerPart, IGroupedItem } from './_utils';
import { DragDropHandler } from '../dragDrop/_dragDropHandler';
import { GroupObject } from '../widgets/propertygrid/_group';
import { IPropertiesAccessibilityProvider } from '../../property-grid/_propertiesAccessibilityProvider';
export interface IDesignerContext {
    model: ko.Observable | ko.Computed;
    surface?: ko.Observable | ko.Computed;
    undoEngine?: ko.Observable<UndoEngine> | ko.Computed<UndoEngine>;
}
export interface IDesignerModel extends IDisposable {
    model: ko.Observable | ko.Computed;
    rtl: boolean;
    surface: ko.Observable | ko.Computed;
    undoEngine: ko.Observable<UndoEngine> | ko.Computed<UndoEngine>;
    selection: SurfaceSelection;
    snapHelper: SnapLinesHelper;
    editableObject: ko.Observable<any>;
    dragHelperContent: DragHelperContent;
    dragDropStarted: ko.Observable<boolean> | ko.Computed<boolean>;
    dragHandler: SelectionDragDropHandler;
    toolboxDragHandler: ToolboxDragDropHandler;
    resizeHandler: IResizeHandler;
    toolboxItems: ToolboxItem[];
    groupedToolboxItems: IGroupedItem<ToolboxItem>[];
    isLoading: ko.Observable<boolean> | ko.Computed<boolean>;
    propertyGrid: ControlProperties;
    popularProperties: ObjectProperties;
    controlsHelper: DesignControlsHelper;
    controlsStore: ControlsStore;
    tabPanel: TabPanel;
    contextActionProviders: IActionsProvider[];
    contextActions: ko.Observable<IAction[]> | ko.Computed<IAction[]>;
    contextGroupActions: ko.Computed<IGroupedItem<IAction>[]>;
    appMenuVisible: ko.Observable<boolean> | ko.Computed<boolean>;
    toggleAppMenu: () => void;
    getMenuPopupContainer: (el: HTMLElement) => JQuery;
    getMenuPopupTarget: (el: HTMLElement) => JQuery;
    inlineTextEdit: InlineTextEdit;
    actionsGroupTitle: () => string;
    updateFont: (values: {
        [key: string]: string;
    }) => void;
    sortFont: () => void;
    surfaceSize: ko.Observable<number> | ko.Computed<number>;
    popularVisible: ko.Computed<boolean>;
    actionLists: ActionLists;
    parts: IDesignerPart[];
    surfaceClass: (elem: any) => string;
}
export declare class DesignerContextGeneratorInternal<T extends IDesignerContext> {
    private _context;
    private _rtl?;
    constructor(_context: T, _rtl?: boolean);
    addElement(propertyName: string, model: any): this;
    addUndoEngine(undoEngine?: ko.Observable<UndoEngine> | ko.Computed<UndoEngine>): this;
    addSurface(surface: any): this;
    getContext(): T;
}
export declare class DesignerContextGenerator<T extends IDesignerContext> {
    private _rtl?;
    constructor(_rtl?: boolean);
    addModel(model: any): DesignerContextGeneratorInternal<T>;
}
export interface IDesingerGeneratorSettings {
    generate(): any;
}
export interface IResizeHandler {
    starting: () => void;
    stopped: () => void;
    disabled?: ko.Observable<boolean> | ko.Computed<boolean>;
    snapHelper?: SnapLinesHelper;
}
export declare class ResizeSettings extends Disposable implements IDesingerGeneratorSettings {
    private _handler;
    handler: IResizeHandler;
    generate(): {};
}
export declare class ContextActionsSettings extends Disposable implements IDesingerGeneratorSettings {
    private _actionProviders;
    private _actions;
    private _groupActions;
    private _actionUndoEngineWrappingFunction;
    private _collectActions;
    actionProviders: IActionsProvider[];
    actions: ko.Observable<IAction[]> | ko.Computed<IAction[]>;
    groupActions: ko.Computed<IGroupedItem<IAction>[]> | ko.Observable<IGroupedItem<IAction>[]>;
    createDefaultActions(editableObj: any, undoEngine: any): void;
    createDefaultGroupAction(editableObj: any, undoEngine: any): void;
    generate(): {};
}
export declare class DragDropSettings extends Disposable implements IDesingerGeneratorSettings {
    private _model;
    private _dragHelperContent;
    private _dragDropStarted;
    dragHelperContent: DragHelperContent;
    dragDropStarted: boolean | ko.Observable<boolean>;
    addDragDropHandler(propertyName: string, handler: DragDropHandler): void;
    generate(): {};
}
export declare class ControlsHelperSettings extends Disposable implements IDesingerGeneratorSettings {
    private _selection;
    private _context;
    private _model;
    private controlsHelper;
    constructor(_selection: SurfaceSelection, _context: IDesignerContext);
    generate(): {};
    addControlsHelper(helper?: IDesignControlsHelper): this;
    addControlsStore(store?: ControlsStore): this;
}
export declare class MenuSettings extends Disposable implements IDesingerGeneratorSettings {
    generate(): {};
    private _appMenuVisible;
    toggleAppMenu: () => void;
    stopPropagation: boolean;
    getMenuPopupContainer: (el: HTMLElement) => JQuery<Element>;
    getMenuPopupTarget: (el: HTMLElement) => JQuery<Element>;
    appMenuVisible: ko.Observable<boolean> | ko.Computed<boolean>;
}
export declare class SelectionSettings extends Disposable implements IDesingerGeneratorSettings {
    private _selection;
    private _snapHelper;
    private _editableObject;
    private _dragDropSettings;
    private _resizeSettings;
    dispose(): void;
    selection: SurfaceSelection;
    snapHelper: SnapLinesHelper;
    editableObject: any;
    addDragDrop(func: (settings: DragDropSettings) => void): void;
    addResize(func: (settings: ResizeSettings) => void): void;
    generate(): any;
}
export declare class CommonDesignerGenerator<T extends IDesignerModel> extends Disposable {
    private _context?;
    private _rtl?;
    private _model;
    private _selectionSettings;
    private _createPopularProperties;
    private _resetModel;
    protected rtl: boolean;
    dispose(): void;
    constructor(_context?: IDesignerContext, _rtl?: boolean);
    initializeContext(context: IDesignerContext): this;
    getPropertyByName<T>(propertyName: string): T;
    addElement(propertyName: string, elementFunc: () => any): this;
    mapOnContext(): this;
    addSelection(func: (settings: SelectionSettings) => void): this;
    addPropertyGrid(propertyGrid?: () => ObjectProperties, propertyName?: string): this;
    addControlProperties(editors: any, groups: GroupObject, groupLocalizationIDs: any, accessibilityProvider?: IPropertiesAccessibilityProvider): this;
    createControlProperties(editors: any, groups: GroupObject, accessibilityProvider?: IPropertiesAccessibilityProvider): ControlProperties;
    addPopularProperties(controlsFactory: any, accessibilityProvider?: IPropertiesAccessibilityProvider): this;
    addToolboxItems(items?: () => ToolboxItem[]): this;
    addGroupedToolboxItems(): this;
    addTabPanel(panel?: () => TabPanel, addTabInfo?: () => TabInfo[]): this;
    addIsLoading(isLoadingFunc?: () => ko.Observable<boolean>): this;
    addControlsHelper(func: (settings: ControlsHelperSettings) => void): this;
    addMenu(func: (settings: MenuSettings) => void): this;
    addContextActions(func: (contextActions: ContextActionsSettings) => void): this;
    addParts(func?: (parts: any) => IDesignerPart[], useDefaults?: boolean): this;
    getModel(): T;
    addActionList(actionListsFunc?: () => ActionLists): this;
}
