/**
* DevExpress Analytics (core\utils\_designerInitializer.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _selection_1 = require("../selection/_selection");
var _snapLinesHelper_1 = require("../snapLines/_snapLinesHelper");
var _dragHelperContent_1 = require("../dragDrop/_dragHelperContent");
var _selectionDragDropHandler_1 = require("../dragDrop/_selectionDragDropHandler");
var _toolboxDragDropHandler_1 = require("../dragDrop/_toolboxDragDropHandler");
var tabPanel_1 = require("../tools/tabPanel");
var _inlineTextEdit_1 = require("../internal/_inlineTextEdit");
var _dragDropHandler_1 = require("../dragDrop/_dragDropHandler");
var _fonts_1 = require("../../property-grid/widgets/fonteditor/_fonts");
var _snapLinesCollector_1 = require("../snapLines/_snapLinesCollector");
var _combinedObj_1 = require("../selection/_combinedObj");
var _utils_1 = require("../internal/_utils");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var _designerCreator_1 = require("./_designerCreator");
function createDesigner(model, surface, controlsFactory, groups, editors, parts, rtl, selection, designControlsHelper, undoEngine, customMerge, snapLinesCollector, groupLocalizationIDs) {
    if (groups === void 0) { groups = {}; }
    if (editors === void 0) { editors = []; }
    var context = new _designerCreator_1.DesignerContextGenerator(rtl)
        .addModel(model)
        .addSurface(surface)
        .addUndoEngine(undoEngine)
        .getContext();
    var designerGenerator = new _designerCreator_1.CommonDesignerGenerator(context, rtl);
    return designerGenerator
        .mapOnContext()
        .addSelection(function (settings) {
        settings.selection = selection || new _selection_1.SurfaceSelection();
        settings.snapHelper = new _snapLinesHelper_1.SnapLinesHelper(surface, _snapLinesHelper_1.SnapLinesHelper.snapTolerance, snapLinesCollector || new _snapLinesCollector_1.SnapLinesCollector());
        settings.editableObject = _combinedObj_1.CombinedObject.getEditableObject(settings.selection, context.undoEngine, customMerge).extend({ throttle: 1 });
        settings.addDragDrop(function (dragDropSettings) {
            dragDropSettings.dragHelperContent = new _dragHelperContent_1.DragHelperContent(settings.selection);
            dragDropSettings.dragDropStarted = _dragDropHandler_1.DragDropHandler.started;
            dragDropSettings.addDragDropHandler('dragHandler', new _selectionDragDropHandler_1.SelectionDragDropHandler(context.surface, settings.selection, context.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent));
            dragDropSettings.addDragDropHandler('toolboxDragHandler', new _toolboxDragDropHandler_1.ToolboxDragDropHandler(context.surface, settings.selection, context.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent, controlsFactory));
        });
        settings.addResize(function (resizeSettings) {
            resizeSettings.handler = {
                starting: function () {
                    selection.expectClick = true;
                    context.undoEngine().start();
                },
                stopped: function () {
                    context.undoEngine().end();
                    setTimeout(function () { selection.expectClick = false; }, 100);
                },
                disabled: _dragDropHandler_1.DragDropHandler.started,
                snapHelper: settings.snapHelper
            };
        });
    })
        .addToolboxItems(function () { return _utils_1.getToolboxItems(controlsFactory.controlsMap); })
        .addIsLoading()
        .addControlProperties(editors, groups, groupLocalizationIDs)
        .addPopularProperties(controlsFactory)
        .addControlsHelper(function (settings) {
        settings
            .addControlsHelper(designControlsHelper)
            .addControlsStore();
    })
        .addTabPanel(undefined, function () {
        return [
            new tabPanel_1.TabInfo({
                text: 'Properties',
                template: 'dxrd-propertiestab',
                model: designerGenerator.getModel().propertyGrid,
                localizationId: 'AnalyticsCoreStringId.Cmd_Properties',
                visible: ko.pureComputed(function () { return !!model(); }),
                disabled: ko.pureComputed(function () { return designerGenerator.getModel().propertyGrid.focusedItem() instanceof Array; }).extend({ throttle: 100 })
            })
        ];
    })
        .addContextActions(function (settings) {
        settings.actionProviders = [];
        settings.createDefaultActions(designerGenerator.getModel().editableObject, designerGenerator.getModel().undoEngine);
    })
        .addMenu(function (settings) {
        settings.appMenuVisible = ko.observable(false);
        settings.toggleAppMenu = function () {
            settings.appMenuVisible(!settings.appMenuVisible());
        };
        settings.getMenuPopupContainer = function (el) { return $(el).closest('.dxrd-menu-button').prev('.dxrd-menu-container'); };
        settings.getMenuPopupTarget = function (el) { return $(el).closest('.dxrd-menu-button').find('.dxrd-menu-place'); };
    })
        .addElement('inlineTextEdit', function () { return new _inlineTextEdit_1.InlineTextEdit(designerGenerator.getModel().selection); })
        .addElement('actionsGroupTitle', function () { return function () { return localization_utils_1.getLocalization('Actions', 'AnalyticsCoreStringId.Actions'); }; })
        .addElement('updateFont', function () { return function (values) {
        _fonts_1.availableFonts(__assign({}, _fonts_1.availableFonts(), values));
    }; })
        .addElement('sortFont', function () { return function () {
        var sortedObj = {};
        var fonts = _fonts_1.availableFonts.peek();
        Object.keys(fonts).sort(function (a, b) { return a.localeCompare(b); }).forEach(function (key) { return sortedObj[key] = fonts[key]; });
        _fonts_1.availableFonts(sortedObj);
    }; })
        .addElement('surfaceSize', function () { return ko.observable(0); })
        .addElement('popularVisible', function () { return ko.pureComputed(function () {
        return designerGenerator.getModel().popularProperties._editors().some(function (x) { return x.visible(); }) ||
            designerGenerator.getModel().contextActions && designerGenerator.getModel().contextActions().length > 0;
    }); })
        .addActionList()
        .addParts()
        .getModel();
}
exports.createDesigner = createDesigner;
