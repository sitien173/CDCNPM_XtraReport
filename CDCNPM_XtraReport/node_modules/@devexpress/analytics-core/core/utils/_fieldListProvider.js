/**
* DevExpress Analytics (core\utils\_fieldListProvider.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var FieldListProvider = (function () {
    function FieldListProvider(fieldListCallback, rootItems, extenders) {
        var _this = this;
        this._extenders = extenders;
        this.getItems = function (pathRequest) {
            var result = $.Deferred();
            var items = [];
            if (_this._beforeFieldListCallback(pathRequest, items)) {
                result.resolve(items);
            }
            else if (rootItems && !pathRequest.fullPath) {
                items.push.apply(items, $.map(rootItems(), function (item) {
                    return { name: item.id || item.ref, displayName: item.name, isList: true, specifics: item.specifics || 'ListSource', dragData: { noDragable: false } };
                }));
                _this._afterFieldListCallBack(pathRequest, items);
                result.resolve(items);
            }
            else {
                _this._patchRequest(pathRequest, rootItems);
                fieldListCallback(pathRequest).done(function (fields) {
                    items.push.apply(items, fields);
                    _this._afterFieldListCallBack(pathRequest, items);
                    result.resolve(items);
                })
                    .fail(function (error) { return result.reject(error); });
            }
            return result.promise();
        };
    }
    FieldListProvider.prototype._patchRequest = function (request, dataSources) {
        if (!dataSources) {
            return;
        }
        var dss = dataSources.peek();
        for (var i = 0; i < dss.length; i++) {
            if (dss[i].id === request.id && !!request.id) {
                request.ref = undefined;
                return;
            }
            if (dss[i].ref === request.ref && !!request.ref) {
                request.id = undefined;
                return;
            }
        }
    };
    FieldListProvider.prototype._beforeFieldListCallback = function (request, items) {
        return !!this._extenders && this._extenders.some(function (extender) { return extender.beforeItemsFilled(request, items); });
    };
    FieldListProvider.prototype._afterFieldListCallBack = function (request, items) {
        this._extenders && this._extenders.forEach(function (extender) { extender.afterItemsFilled && extender.afterItemsFilled(request, items); });
    };
    return FieldListProvider;
}());
exports.FieldListProvider = FieldListProvider;
