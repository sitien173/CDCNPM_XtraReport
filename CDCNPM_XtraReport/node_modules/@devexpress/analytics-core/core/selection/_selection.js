/**
* DevExpress Analytics (core\selection\_selection.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../serializer/utils");
var _utils_1 = require("../internal/_utils");
var SurfaceSelection = (function (_super) {
    __extends(SurfaceSelection, _super);
    function SurfaceSelection(ignoreMultiSelectProperties) {
        if (ignoreMultiSelectProperties === void 0) { ignoreMultiSelectProperties = ['name']; }
        var _this = _super.call(this) || this;
        _this.ignoreMultiSelectProperties = ignoreMultiSelectProperties;
        _this._focused = ko.observable(null);
        _this._selectedControls = ko.observableArray();
        _this._selectedControlsInner = [];
        _this.focused = ko.pureComputed({
            read: function () {
                return _this._focused();
            },
            write: function (val) {
                if (val !== _this._focused()) {
                    if (!!val) {
                        _this._firstSelected = val;
                    }
                    _this.updateSelection(_this._firstSelected);
                }
            }
        });
        _this.dropTarget = null;
        _this.expectClick = false;
        _this.disabled = ko.observable(false);
        _this._disposables.push(_this.focused);
        return _this;
    }
    SurfaceSelection.prototype.dispose = function () {
        this.reset();
        _super.prototype.dispose.call(this);
    };
    SurfaceSelection.prototype._removeFromSelection = function (control) {
        control.focused(false);
        control.selected(false);
        if (this._selectedControlsInner.indexOf(control) !== -1) {
            this._selectedControlsInner.splice(this._selectedControlsInner.indexOf(control), 1);
        }
    };
    SurfaceSelection.prototype._setFocused = function (control) {
        if (this._focused()) {
            this._removeFromSelection(this._focused());
        }
        this._focused(control);
        if (control) {
            control.focused(true);
            if (this._selectedControlsInner.indexOf(control) === -1) {
                this._selectedControlsInner.push(control);
            }
            control.selected(true);
        }
    };
    SurfaceSelection.prototype._resetTabPanelFocus = function () {
        var isTabPanelFocused = document.activeElement && $(document.activeElement).closest('.dxrd-surface').length === 0;
        if (isTabPanelFocused) {
            _utils_1.blur(document.activeElement);
        }
    };
    Object.defineProperty(SurfaceSelection.prototype, "selectedItems", {
        get: function () {
            return this._selectedControls();
        },
        enumerable: true,
        configurable: true
    });
    SurfaceSelection.prototype.clear = function () {
        this.focused(null);
        this._selectedControls([]);
    };
    SurfaceSelection.prototype.reset = function () {
        this._focused(null);
        this._selectedControlsInner.splice(0);
        this._firstSelected = null;
        this._selectedControls([]);
    };
    SurfaceSelection.prototype.applySelection = function () {
        this._selectedControls(this._selectedControlsInner);
    };
    SurfaceSelection.prototype.selectItems = function (items) {
        this._selectedControlsInner = items;
        this._selectedControlsInner.forEach(function (selectedControl) {
            if (!selectedControl.focused()) {
                selectedControl.selected(true);
            }
        });
        this.applySelection();
    };
    SurfaceSelection.prototype.updateSelection = function (control) {
        this._selectedControlsInner.forEach(function (selectedControl) {
            selectedControl.focused(false);
            selectedControl.selected(false);
        });
        this._selectedControlsInner = [];
        this._setFocused(control);
        this.applySelection();
    };
    SurfaceSelection.prototype.swapFocusedItem = function (control) {
        if (this._focused() !== control) {
            this._focused().focused(false);
            this._focused(control);
            this._focused().focused(true);
        }
    };
    SurfaceSelection.prototype.initialize = function (control) {
        control = control || this.dropTarget;
        this._firstSelected = !!(control && control['focused']) ? control : null;
        this.updateSelection(this._firstSelected);
    };
    SurfaceSelection.prototype.clickHandler = function (control, event) {
        if (event === void 0) { event = { ctrlKey: false, metaKey: false }; }
        if (this.expectClick) {
            this.expectClick = false;
            return;
        }
        control = control || this.dropTarget;
        if (!event.ctrlKey && !event.metaKey) {
            if (this._selectedControlsInner.length > 1 && this._selectedControlsInner.indexOf(control) !== -1) {
                this.swapFocusedItem(control);
            }
            else {
                if (this._focused() !== control) {
                    this.initialize(control);
                }
            }
        }
        else {
            this.selectionWithCtrl(control);
            this.applySelection();
        }
        this._resetTabPanelFocus();
    };
    SurfaceSelection.prototype.selecting = function (event) {
        if (!this._focused()) {
            this._setFocused(event.control);
        }
        else {
            event.cancel = !event.control.checkParent(this._firstSelected);
            if (!event.cancel) {
                if (this._firstSelected && this._firstSelected.focused()) {
                    this._setFocused(event.control);
                }
                else if (this._selectedControlsInner.indexOf(event.control) === -1) {
                    event.control.selected(true);
                    this._selectedControlsInner.push(event.control);
                }
            }
        }
    };
    SurfaceSelection.prototype.unselecting = function (control) {
        if (this._focused() === control) {
            this._setFocused(null);
            if (this._selectedControlsInner.length === 0) {
                this._setFocused(this._firstSelected);
            }
            else {
                this._setFocused(this._selectedControlsInner[0]);
            }
        }
        else {
            this._removeFromSelection(control);
        }
    };
    SurfaceSelection.prototype.selectionWithCtrl = function (control) {
        if (control && control.allowMultiselect) {
            var selectedControls = this._selectedControlsInner;
            if (selectedControls.length === 0 || (selectedControls.length === 1 && (!selectedControls[0].allowMultiselect))) {
                this.initialize(control);
            }
            else {
                if (this._selectedControlsInner.indexOf(control) === -1) {
                    control.selected(true);
                    this._selectedControlsInner.push(control);
                }
                else {
                    if (this._selectedControlsInner.length > 1) {
                        this.unselecting(control);
                    }
                }
            }
        }
    };
    return SurfaceSelection;
}(utils_1.Disposable));
exports.SurfaceSelection = SurfaceSelection;
