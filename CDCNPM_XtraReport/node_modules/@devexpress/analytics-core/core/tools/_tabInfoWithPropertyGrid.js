/**
* DevExpress Analytics (core\tools\_tabInfoWithPropertyGrid.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var propertygrid_1 = require("../../property-grid/propertygrid");
var tabPanel_1 = require("./tabPanel");
var TabInfoWithPropertyGrid = (function (_super) {
    __extends(TabInfoWithPropertyGrid, _super);
    function TabInfoWithPropertyGrid(options) {
        var _this = _super.call(this, options) || this;
        _this.propertyGrid = new propertygrid_1.ObjectProperties(ko.observable(options.model), undefined, undefined, undefined, true);
        _this._disposables.push(ko.computed(function () {
            var someRendered = _this.propertyGrid.getEditors().some(function (editor) { return editor.visible && editor.isRendered(); });
            if (someRendered) {
                _this.keyboardHelper && _this.keyboardHelper.initialize();
                _this.focus();
            }
        }));
        _this._disposables.push(_this.propertyGrid);
        return _this;
    }
    return TabInfoWithPropertyGrid;
}(tabPanel_1.TabInfo));
exports.TabInfoWithPropertyGrid = TabInfoWithPropertyGrid;
