/**
* DevExpress Analytics (core\tools\_actionList.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../serializer/utils");
var _keyboardHelper_1 = require("./_keyboardHelper");
var _copyPaste_1 = require("./_copyPaste");
var actionId_1 = require("./actionId");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var _selectionHelpers_1 = require("../selection/_selectionHelpers");
var _utils_1 = require("../utils/_utils");
var ActionListsBase = (function (_super) {
    __extends(ActionListsBase, _super);
    function ActionListsBase(enabled) {
        var _this = _super.call(this) || this;
        _this.toolbarItems = [];
        _this.enabled = enabled || ko.observable(true);
        return _this;
    }
    ActionListsBase.prototype.processShortcut = function (actions, e) {
        for (var i = 0; i < actions.length; i++) {
            if (actions[i].hotKey && (actions[i].disabled && !actions[i].disabled() || !actions[i].disabled) && ($.isFunction(actions[i].visible) ? actions[i].visible() : actions[i].visible)) {
                if (actions[i].hotKey.ctrlKey === e.ctrlKey && actions[i].hotKey.keyCode === e.keyCode) {
                    actions[i].clickAction();
                    e.preventDefault();
                }
            }
        }
    };
    ActionListsBase.prototype.shouldIgnoreProcessing = function (e) {
        if (e.altKey || !this.enabled.peek())
            return true;
        var activeElement = $(document.activeElement);
        if (activeElement.is('textarea') || activeElement.is(':input') && (['password', 'text', 'number'].indexOf(activeElement.attr('type')) != -1)) {
            return true;
        }
        return false;
    };
    return ActionListsBase;
}(utils_1.Disposable));
exports.ActionListsBase = ActionListsBase;
var ActionLists = (function (_super) {
    __extends(ActionLists, _super);
    function ActionLists(surfaceContext, selection, undoEngine, customizeActions, enabled, copyPasteStrategy, zoomStep, isLocked) {
        if (zoomStep === void 0) { zoomStep = ko.observable(0.01); }
        if (isLocked === void 0) { isLocked = function (item) { return false; }; }
        var _this = _super.call(this, enabled) || this;
        _this.menuItems = [];
        var copyPasteHandler = new _copyPaste_1.CopyPasteHandler(selection, copyPasteStrategy), actions = [];
        if (selection) {
            var selectionControlsLocked = ko.computed(function () {
                return selection.selectedItems.some(function (item) { return item.locked || isLocked(item); });
            });
            _this._disposables.push(selectionControlsLocked);
            _this._keyboardHelper = new _keyboardHelper_1.KeyboardHelper(selection, undoEngine);
            actions.push({
                id: actionId_1.ActionId.Cut,
                text: 'Cut',
                displayText: function () { return localization_utils_1.getLocalization('Cut', 'AnalyticsCoreStringId.EditCut'); },
                imageClassName: 'dxrd-image-cut',
                imageTemplateName: 'dxrd-svg-toolbar-cut',
                disabled: ko.pureComputed(function () {
                    return !surfaceContext() || !copyPasteHandler.canCopy() || selectionControlsLocked();
                }),
                visible: true,
                clickAction: function () {
                    undoEngine().start();
                    copyPasteHandler.cut();
                    undoEngine().end();
                },
                hotKey: { ctrlKey: true, keyCode: 'X'.charCodeAt(0) }
            });
            actions.push({
                id: actionId_1.ActionId.Copy,
                text: 'Copy',
                displayText: function () { return localization_utils_1.getLocalization('Copy', 'AnalyticsCoreStringId.Cmd_Copy'); },
                imageClassName: 'dxrd-image-copy',
                imageTemplateName: 'dxrd-svg-toolbar-copy',
                disabled: ko.pureComputed(function () {
                    return !surfaceContext() || !copyPasteHandler.canCopy() || selectionControlsLocked();
                }),
                visible: true,
                clickAction: function () {
                    copyPasteHandler.copy();
                },
                hotKey: { ctrlKey: true, keyCode: 'C'.charCodeAt(0) }
            });
            actions.push({
                id: actionId_1.ActionId.Paste,
                text: 'Paste',
                displayText: function () { return localization_utils_1.getLocalization('Paste', 'AnalyticsCoreStringId.Cmd_Paste'); },
                imageClassName: 'dxrd-image-paste',
                imageTemplateName: 'dxrd-svg-toolbar-paste',
                disabled: ko.pureComputed(function () {
                    return !surfaceContext() || !copyPasteHandler.canPaste() || selectionControlsLocked();
                }),
                visible: true,
                clickAction: function () {
                    undoEngine().start();
                    copyPasteHandler.paste();
                    undoEngine().end();
                },
                hotKey: { ctrlKey: true, keyCode: 'V'.charCodeAt(0) }
            });
            actions.push({
                id: actionId_1.ActionId.Delete,
                text: 'Delete',
                displayText: function () { return localization_utils_1.getLocalization('Delete', 'AnalyticsCoreStringId.Cmd_Delete'); },
                imageClassName: 'dxrd-image-delete',
                imageTemplateName: 'dxrd-svg-toolbar-delete',
                disabled: ko.pureComputed(function () {
                    if (selection.focused()) {
                        return selection.focused().getControlModel().getMetaData().isDeleteDeny || selectionControlsLocked();
                    }
                    else {
                        return true;
                    }
                }),
                visible: true,
                hotKey: { ctrlKey: false, keyCode: 46 },
                clickAction: function () {
                    undoEngine().start();
                    _selectionHelpers_1.deleteSelection(selection);
                    undoEngine().end();
                }
            });
        }
        actions.push({
            id: actionId_1.ActionId.Undo,
            text: 'Undo',
            displayText: function () { return localization_utils_1.getLocalization('Undo', 'AnalyticsCoreStringId.Undo'); },
            imageClassName: 'dxrd-image-undo',
            imageTemplateName: 'dxrd-svg-toolbar-undo',
            disabled: ko.pureComputed(function () { return !surfaceContext() || !undoEngine() || (undoEngine() && !undoEngine().undoEnabled()); }),
            visible: true,
            clickAction: function () {
                undoEngine().undo();
            },
            hotKey: { ctrlKey: true, keyCode: 'Z'.charCodeAt(0) },
            hasSeparator: true
        });
        actions.push({
            id: actionId_1.ActionId.Redo,
            text: 'Redo',
            displayText: function () { return localization_utils_1.getLocalization('Redo', 'AnalyticsCoreStringId.Redo'); },
            imageClassName: 'dxrd-image-redo',
            imageTemplateName: 'dxrd-svg-toolbar-redo',
            disabled: ko.pureComputed(function () { return !surfaceContext() || !undoEngine() || (undoEngine() && !undoEngine().redoEnabled()); }),
            visible: true,
            clickAction: function () {
                undoEngine().redo();
            },
            hotKey: { ctrlKey: true, keyCode: 'Y'.charCodeAt(0) }
        });
        actions.push({
            id: actionId_1.ActionId.ZoomOut,
            text: 'Zoom Out',
            displayText: function () { return localization_utils_1.getLocalization('Zoom Out', 'AnalyticsCoreStringId.ZoomOut'); },
            imageClassName: 'dxrd-image-zoomout',
            imageTemplateName: 'dxrd-svg-toolbar-zoomout',
            disabled: ko.pureComputed(function () {
                return !surfaceContext();
            }),
            visible: true,
            hotKey: { ctrlKey: true, keyCode: 109 },
            zoomStep: zoomStep,
            clickAction: function () {
                surfaceContext().zoom(Math.max(surfaceContext().zoom() - zoomStep(), 0.01));
            },
            hasSeparator: true
        });
        actions.push({
            id: actionId_1.ActionId.ZoomSelector,
            text: 'Zoom 100%',
            displayText: function () { return localization_utils_1.getLocalization('Zoom 100%'); },
            imageClassName: 'dxrd-image-zoom',
            disabled: ko.pureComputed(function () {
                return !surfaceContext();
            }),
            visible: true,
            hotKey: { ctrlKey: true, keyCode: 187 },
            clickAction: function () {
                surfaceContext().zoom(1);
            },
            templateName: 'dxrd-zoom-select-template',
            zoomLevels: ko.observableArray([5, 2, 1.5, 1, 0.75, 0.5, 0.25]),
            zoom: ko.pureComputed({
                read: function () { return surfaceContext() && surfaceContext().zoom(); },
                write: function (val) { surfaceContext().zoom(val); }
            }),
            onCustomItemCreating: function (e) {
                e.customItem = _utils_1.parseZoom(e.text);
            }
        });
        actions.push({
            id: actionId_1.ActionId.ZoomIn,
            text: 'Zoom In',
            displayText: function () { return localization_utils_1.getLocalization('Zoom In', 'AnalyticsCoreStringId.ZoomIn'); },
            imageClassName: 'dxrd-image-zoomin',
            imageTemplateName: 'dxrd-svg-toolbar-zoomin',
            disabled: ko.pureComputed(function () {
                return !surfaceContext();
            }),
            visible: true,
            hotKey: { ctrlKey: true, keyCode: 107 },
            zoomStep: zoomStep,
            clickAction: function () {
                surfaceContext().zoom(surfaceContext().zoom() + zoomStep());
            }
        });
        if (customizeActions) {
            customizeActions(actions);
        }
        actions.forEach(function (action) {
            Object.keys(action).forEach(function (name) {
                if (ko.isComputed(action[name])) {
                    _this._disposables.push(action[name]);
                }
            });
            _this._registerAction(action['container'] === 'menu' ? _this.menuItems : ko.unwrap(_this.toolbarItems), action);
        });
        return _this;
    }
    ActionLists.prototype._registerAction = function (container, action) {
        if (action['index']) {
            container.splice(action['index'], 0, action);
        }
        else {
            container.push(action);
        }
    };
    ActionLists.prototype.processShortcut = function (actions, e) {
        if (this.shouldIgnoreProcessing(e)) {
            return;
        }
        if (!this._keyboardHelper.processShortcut(e)) {
            _super.prototype.processShortcut.call(this, actions, e);
        }
        else {
            e.preventDefault();
        }
    };
    return ActionLists;
}(ActionListsBase));
exports.ActionLists = ActionLists;
