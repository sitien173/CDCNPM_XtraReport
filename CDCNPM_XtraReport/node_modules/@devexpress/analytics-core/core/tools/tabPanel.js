/**
* DevExpress Analytics (core\tools\tabPanel.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var utils_1 = require("../../serializer/utils");
var _utils_1 = require("../utils/_utils");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var _utils_2 = require("../../serializer/_utils");
var _svgTemplateEngine_1 = require("../../property-grid/widgets/internal/_svgTemplateEngine");
var _internal_1 = require("../../accessibility/_internal");
var _rightPanelKeyboardHelper_1 = require("../../accessibility/_rightPanelKeyboardHelper");
var TabPanel = (function (_super) {
    __extends(TabPanel, _super);
    function TabPanel(options) {
        var _this = _super.call(this) || this;
        _this.tabs = [];
        _this.collapsed = ko.observable(false);
        _this.position = ko.observable(TabPanel.Position.Right);
        _this.toggleCollapsedText = ko.pureComputed(function () {
            var actionString = _this.collapsed() ? 'Open' : 'Collapse';
            return localization_utils_1.getLocalization(actionString, 'ASPxReportsStringId.SidePanel_' + actionString);
        });
        _this.cssClasses = function (extendOptions) {
            return _utils_2.extend({
                'dxrd-tab-panel-left': _this.position() === TabPanel.Position.Left,
                'dxrd-tab-panel-right': _this.position() === TabPanel.Position.Right,
                'dxrd-tab-panel-empty': _this.isEmpty()
            }, extendOptions);
        };
        var tabs = options.tabs;
        var autoSelectTab = options.autoSelectTab;
        if (options.rtl)
            _this.position(TabPanel.Position.Left);
        var zoomFactor = _internal_1.accessibilityFontSizeZoomFactor();
        var _self = _this;
        _this.tabs = tabs;
        if (tabs && tabs.length) {
            _this._disposables.push(_this.isEmpty = ko.computed(function () { return _this.tabs.every(function (tab) { return !tab.visible(); }); }));
            _this.tabs.forEach(function (tab) {
                tab.collapsed = _this.collapsed;
            });
        }
        else
            _this.isEmpty = ko.observable(true);
        _this._disposables.push(ko.computed(function () {
            var visibleTabs = tabs.filter(function (tab) { return tab.visible(); });
            if (visibleTabs.length !== 0) {
                if (visibleTabs.filter(function (tab) { return tab.active.peek(); }).length === 0) {
                    visibleTabs[0].active(true);
                    if (autoSelectTab) {
                        _this.collapsed(true);
                    }
                }
            }
            else {
                _this.collapsed(true);
            }
        }));
        _this._disposables.push(ko.computed(function () {
            var disabledTabs = tabs.filter(function (tab) { return tab.disabled(); });
            if (disabledTabs.length !== 0) {
                if (disabledTabs.filter(function (tab) { return tab.active.peek(); }).length !== 0) {
                    disabledTabs.forEach(function (t) { return t.active(false); });
                    var nextSelectedTab = tabs.filter(function (tab) { return !tab.disabled.peek() && tab.visible.peek(); })[0];
                    if (nextSelectedTab) {
                        _this.selectTab({ model: nextSelectedTab });
                    }
                }
            }
        }));
        if (autoSelectTab) {
            _this.tabs.forEach(function (tab) {
                _this._disposables.push(tab.active.subscribe(function (newVal) {
                    if (newVal) {
                        _this.selectTab({ model: tab });
                    }
                }));
            });
        }
        _this.toggleTabVisibility = function (e) {
            var selectedTab = e.model;
            var activeTab = _this.tabs.filter(function (tab) { return tab.active(); })[0];
            if (selectedTab === activeTab) {
                _this.collapsed(!_this.collapsed());
            }
            else {
                _this.selectTab(e);
            }
        };
        _this.selectTab = function (e) {
            var selectedTab = e.model;
            if (!selectedTab.disabled()) {
                _this.tabs.forEach(function (tab) {
                    tab.active(tab === selectedTab);
                });
                _this.collapsed(false);
            }
        };
        var _width = ko.observable((options.width || 370) * zoomFactor);
        _this._disposables.push(_this.width = ko.pureComputed({
            read: function () { return _this.collapsed() ? 0 : _width(); },
            write: function (newWidth) { _width(newWidth); }
        }));
        _this._disposables.push(_this.headerWidth = ko.pureComputed(function () { return _this.isEmpty() ? 0 : (50 * zoomFactor + (_this.collapsed() ? 0 : _this.width())); }));
        _this.getResizableOptions = function ($element, panelOffset, minWidth) {
            if (!_this._resizableOptions || _this._resizableOptions.$element !== $element) {
                _this._resizableOptions = _utils_1.getResizableOptions($element, zoomFactor * panelOffset, minWidth, _self.position(), TabPanel.Position.Left, _self.width, _self.collapsed);
                _self._disposables.push(_self.position.subscribe(function (newVal) {
                    $($element)['resizable']('option', 'handles', newVal === TabPanel.Position.Left ? 'e' : 'w');
                }));
            }
            return _this._resizableOptions;
        };
        _this._disposables.push({
            dispose: function () {
                _this._resizableOptions = null;
                _this.getResizableOptions = null;
            }
        });
        _this._disposables.push(_this.toggleCollapsedImage = ko.pureComputed(function () {
            var postfix = _this.collapsed() ? '-expand' : '-collapse';
            return { class: 'dxrd-image-propertygrid' + postfix, template: 'dxrd-svg-tabs' + postfix };
        }));
        _this.keyboardHelper = new _rightPanelKeyboardHelper_1.RightPanelKeyboardHelper(_this);
        _this._disposables.push(_this.toggleCollapsedText, _this.keyboardHelper);
        return _this;
    }
    TabPanel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.disposeArray(this.tabs);
    };
    TabPanel.Position = {
        Left: 'Left',
        Right: 'Right'
    };
    return TabPanel;
}(utils_1.Disposable));
exports.TabPanel = TabPanel;
var TabInfo = (function (_super) {
    __extends(TabInfo, _super);
    function TabInfo(options) {
        var _this = _super.call(this) || this;
        _this.active = ko.observable(false);
        _this.visible = ko.observable();
        _this.disabled = ko.observable();
        var imageBaseName = options.imageClassName || options.text.toLowerCase();
        _this._text = options.text;
        _this._localizationId = options.localizationId;
        _this._disposables.push(_this.imageClassName = ko.pureComputed(function () {
            return 'dxrd-image-' + imageBaseName;
        }));
        _this.imageTemplateName = options.imageTemplateName || _svgTemplateEngine_1.SvgTemplatesEngine.getExistingTemplate('dxrd-svg-tabs-' + options.text.toLowerCase());
        _this.template = options.template;
        _this._disposables.push(options.model, options.keyboardHelper);
        var computedVisible = options.visible;
        var computedDisabled = options.disabled;
        _this._disposables.push(_this.visible = ko.pureComputed(function () { return computedVisible !== undefined ? computedVisible() : true; }));
        _this._disposables.push(_this.disabled = ko.pureComputed(function () { return computedDisabled !== undefined ? computedDisabled() : false; }));
        _this._disposables.push(_this.visible.subscribe(function (visibility) {
            if (!visibility) {
                _this.active(false);
            }
        }));
        computedVisible && _this._disposables.push(computedVisible);
        computedDisabled && _this._disposables.push(computedDisabled);
        _this.model = options.model;
        _this.keyboardHelper = options.keyboardHelper;
        if (_this.keyboardHelper)
            _this._disposables.push(ko.computed(function () {
                if (_this.active() && _this.collapsed && !_this.collapsed())
                    _this.focus();
            }).extend({ rateLimit: 0 }));
        return _this;
    }
    TabInfo.prototype.focus = function () {
        this.keyboardHelper && this.keyboardHelper.focus(document.getElementsByClassName('dxrd-tab-item dxd-state-active')[0]);
    };
    Object.defineProperty(TabInfo.prototype, "text", {
        get: function () {
            return localization_utils_1.getLocalization(this._text, this._localizationId);
        },
        enumerable: true,
        configurable: true
    });
    return TabInfo;
}(utils_1.Disposable));
exports.TabInfo = TabInfo;
