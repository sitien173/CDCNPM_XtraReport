/**
* DevExpress Analytics (core\tools\_copyPaste.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var point_1 = require("../elements/point");
var serializer_1 = require("../../serializer/serializer");
var _surfaceHelpers_1 = require("../internal/_surfaceHelpers");
exports.copyPasteStrategy = {
    createChild: function (pasteTarget, info) {
        return pasteTarget.createChild(info);
    },
    calculateDelta: function (selection, pasteTargetSurface, minPoint) {
        return {
            x: selection.rect().left - minPoint.x(),
            y: selection.rect().top - minPoint.y()
        };
    },
    canPaste: function (pasteTarget, info) { return true; }
};
var CopyPasteHandler = (function () {
    function CopyPasteHandler(selectionProvider, _copyPasteStrategy) {
        if (_copyPasteStrategy === void 0) { _copyPasteStrategy = exports.copyPasteStrategy; }
        var _this = this;
        this._copyPasteStrategy = _copyPasteStrategy;
        this._copyInfo = ko.observable(null);
        this.hasPasteInfo = ko.pureComputed(function () { return _this._copyInfo() !== null; });
        this._selectionProvider = selectionProvider;
    }
    CopyPasteHandler.prototype.canCopy = function () {
        return this._selectionProvider.focused() !== null && !this._selectionProvider.focused().getControlModel().getMetaData().isCopyDeny;
    };
    CopyPasteHandler.prototype.canPaste = function () {
        var pasteTargetSurface = this._selectionProvider.focused();
        return pasteTargetSurface !== null
            && this.hasPasteInfo()
            && pasteTargetSurface.canDrop()
            && (!this._copyPasteStrategy.canPaste || this._copyPasteStrategy.canPaste(pasteTargetSurface.getControlModel(), this._copyInfo()))
            && !pasteTargetSurface.getControlModel().getMetaData().isPasteDeny;
    };
    CopyPasteHandler.prototype.copy = function () {
        if (this.canCopy()) {
            var serializer = new serializer_1.ModelSerializer(), copyInfo = {
                focused: this._selectionProvider.focused(),
                objects: $.map(this._selectionProvider.selectedItems, function (item) {
                    return serializer.serialize(item.getControlModel());
                })
            };
            this._copyInfo(copyInfo);
        }
    };
    CopyPasteHandler.prototype.cut = function () {
        var _this = this;
        var serializer = new serializer_1.ModelSerializer(), focused = this._selectionProvider.focused(), objects = [];
        this._selectionProvider.selectedItems.forEach(function (item) {
            var control = item.getControlModel();
            control.parentModel().removeChild(control);
            objects.push(serializer.serialize(control));
            if (_this._copyPasteStrategy.createSelfRestoringItems)
                objects.push.apply(objects, _this._copyPasteStrategy.createSelfRestoringItems(control, serializer));
        });
        var cutInfo = {
            focused: focused,
            objects: objects
        };
        this._copyInfo(cutInfo);
    };
    CopyPasteHandler.prototype.paste = function () {
        var _this = this;
        if (this.canPaste()) {
            var pasteTargetSurface = this._selectionProvider.focused(), pasteTarget = pasteTargetSurface.getControlModel(), newSelection = [];
            if (pasteTargetSurface === this._copyInfo().focused) {
                pasteTargetSurface = pasteTargetSurface.parent;
                pasteTarget = pasteTargetSurface.getControlModel();
            }
            if (!pasteTarget.getMetaData().isContainer) {
                pasteTargetSurface = pasteTargetSurface.parent;
                pasteTarget = pasteTargetSurface.getControlModel();
            }
            var minPoint = new point_1.Point(Number.MAX_VALUE, Number.MAX_VALUE), maxPoint = new point_1.Point(-1, -1);
            for (var i = 0; i < this._copyInfo().objects.length; i++) {
                var newControl = this._copyPasteStrategy.createChild(pasteTarget, this._copyInfo().objects[i]);
                var newControlSurface = _surfaceHelpers_1.findSurface(newControl);
                if (!newControlSurface)
                    continue;
                var posMin = new point_1.Point(newControlSurface.rect().left, newControlSurface.rect().top);
                var posMax = new point_1.Point(newControlSurface.rect().left + newControlSurface.rect().width, newControlSurface.rect().top + newControlSurface.rect().height);
                if (minPoint.x() >= posMin.x())
                    minPoint.x(posMin.x());
                if (maxPoint.x() <= posMax.x())
                    maxPoint.x(posMax.x());
                if (minPoint.y() >= posMin.y())
                    minPoint.y(posMin.y());
                if (maxPoint.y() <= posMax.y())
                    maxPoint.y(posMax.y());
                newSelection.push(newControlSurface);
            }
            var newOriginPoint = new point_1.Point(((pasteTargetSurface.rect().width - pasteTargetSurface['_context'].margins.right()) / 2) - ((maxPoint.x() - minPoint.x()) / 2) + (pasteTargetSurface['rtlLayout']() ? pasteTargetSurface['_context'].margins.right() : 0), (pasteTargetSurface.rect().height / 2) - ((maxPoint.y() - minPoint.y()) / 2));
            for (var i = 0; i < newSelection.length; i++) {
                var delta = this._copyPasteStrategy.calculateDelta(newSelection[i], pasteTargetSurface, minPoint);
                newSelection[i].rect({ left: newOriginPoint.x() + delta.x, top: newOriginPoint.y() + delta.y });
            }
            this._selectionProvider.initialize();
            newSelection.forEach(function (newControlSurface) {
                _this._selectionProvider.selecting({ control: newControlSurface, cancel: false });
            });
        }
    };
    return CopyPasteHandler;
}());
exports.CopyPasteHandler = CopyPasteHandler;
