/**
* DevExpress Analytics (core\dragDrop\_dragHelperContent.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var rectangle_1 = require("../elements/rectangle");
var DragHelperControlRectangle = (function (_super) {
    __extends(DragHelperControlRectangle, _super);
    function DragHelperControlRectangle(position, left, top, width, height) {
        var _this = _super.call(this, left, top, width, height) || this;
        _this.position = position;
        return _this;
    }
    return DragHelperControlRectangle;
}(rectangle_1.Rectangle));
exports.DragHelperControlRectangle = DragHelperControlRectangle;
var DragHelperContent = (function (_super) {
    __extends(DragHelperContent, _super);
    function DragHelperContent(selectionProvider) {
        var _this = _super.call(this) || this;
        _this.controls = ko.observableArray([]);
        _this.customData = ko.observable({});
        _this.template = 'dxrd-drag-helper-source';
        _this.isLocked = ko.observable(false);
        _this._selectionProvider = selectionProvider;
        return _this;
    }
    Object.defineProperty(DragHelperContent.prototype, "_isEmpty", {
        get: function () {
            return this.controls().length === 0;
        },
        enumerable: true,
        configurable: true
    });
    DragHelperContent.prototype.reset = function () {
        this.controls([]);
        this.customData({});
    };
    DragHelperContent.prototype.update = function (surface) {
        var _this = this;
        this.left(surface.absolutePosition.x());
        this.top(surface.absolutePosition.y());
        this.width(surface.rect().width);
        this.height(surface.rect().height);
        if (this._isEmpty) {
            var controls = [];
            this._selectionProvider.selectedItems.forEach(function (item, index) {
                if (!item.locked && item.parent === surface.parent)
                    controls.push(new DragHelperControlRectangle(index));
            });
            this.controls(controls);
        }
        this.controls().forEach(function (item) {
            var surfaceElement = _this._selectionProvider.selectedItems[item.position];
            item.left(surfaceElement.absolutePosition.x() - _this.left());
            item.top(surfaceElement.absolutePosition.y() - _this.top());
            item.width(surfaceElement.rect().width);
            item.height(surfaceElement.rect().height);
        });
    };
    DragHelperContent.prototype.setContent = function (area, customData) {
        if (customData === void 0) { customData = null; }
        if (this._isEmpty)
            this.controls([area]);
        this.left(area.left());
        this.top(area.top());
        this.width(area.width());
        this.height(area.height());
        this.customData(customData);
    };
    return DragHelperContent;
}(rectangle_1.Rectangle));
exports.DragHelperContent = DragHelperContent;
