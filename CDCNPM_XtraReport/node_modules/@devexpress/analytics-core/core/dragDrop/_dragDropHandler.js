/**
* DevExpress Analytics (core\dragDrop\_dragDropHandler.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
require("jquery-ui/ui/widgets/draggable");
require("jquery-ui/ui/widgets/resizable");
require("jquery-ui/ui/widgets/selectable");
require("jquery-ui/ui/widgets/mouse");
var utils_1 = require("../../serializer/utils");
var size_1 = require("../elements/size");
var _surfaceHelpers_1 = require("../internal/_surfaceHelpers");
var _units_1 = require("../utils/_units");
var DragDropHandler = (function (_super) {
    __extends(DragDropHandler, _super);
    function DragDropHandler(surface, selection, undoEngine, snapHelper, dragHelperContent) {
        var _this = _super.call(this) || this;
        _this._size = new size_1.Size(0, 0);
        _this.alwaysAlt = false;
        _this.surface = surface;
        _this.selection = selection;
        _this.snapHelper = snapHelper;
        _this.dragHelperContent = dragHelperContent;
        _this.stopDrag = function (ui, draggable, event) {
            undoEngine() && undoEngine().start();
            _this.doStopDrag(ui, draggable, event);
            undoEngine() && undoEngine().end();
            snapHelper && snapHelper.deactivateSnapLines();
        };
        return _this;
    }
    DragDropHandler.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.surface = null;
        this.selection = null;
        this.snapHelper = null;
        this.dragHelperContent = null;
    };
    DragDropHandler.prototype.getTarget = function (event) {
        return event['toElement'] || (ko.dataFor(event.relatedTarget) && event.relatedTarget) || (event.originalEvent && event.originalEvent.target) || null;
    };
    DragDropHandler.prototype._getAbsoluteSurfacePosition = function (ui) {
        return { left: ui.position.left - ui['delta'].left, top: ui.position.top - ui['delta'].top };
    };
    DragDropHandler.prototype.addControl = function (control, dropTargetSurface, size) {
        var targetWidth = (dropTargetSurface['width'] && dropTargetSurface['width']()) || (dropTargetSurface['_width'] && dropTargetSurface['_width']());
        var underCursor = dropTargetSurface.underCursor();
        if (underCursor.x < targetWidth) {
            dropTargetSurface.getControlModel().addChild(control);
            var controlSurface = _surfaceHelpers_1.findSurface(control);
            if (!controlSurface)
                return;
            var width = size.width(), height = size.height();
            var left = (underCursor.x + width > targetWidth) ? (targetWidth - width - 1) : underCursor.x;
            controlSurface.rect({ left: left, top: Math.max(underCursor.y, 0), width: width, height: height });
            this.selection.initialize(controlSurface);
        }
    };
    DragDropHandler.prototype.recalculateSize = function (size) {
        var surface = ko.unwrap(this.surface);
        this._size.width(_units_1.unitsToPixel(ko.unwrap(size.width) * surface.dpi() / 100, surface.measureUnit(), surface.zoom()));
        this._size.height(_units_1.unitsToPixel(ko.unwrap(size.height) * surface.dpi() / 100, surface.measureUnit(), surface.zoom()));
    };
    DragDropHandler.prototype.helper = function (draggable, event) {
        this.snapHelper && this.snapHelper.updateSnapLines(draggable || null);
    };
    DragDropHandler.prototype.canDrop = function (dropTarget, controlModel, metaData) {
        var locked = dropTarget.locked;
        if (metaData && metaData.canDrop) {
            locked = locked || !metaData.canDrop(dropTarget, controlModel);
        }
        return !locked;
    };
    DragDropHandler.prototype.startDrag = function (draggable) { };
    DragDropHandler.prototype.drag = function (event, ui) {
        var needToActivateSnapLines = event.altKey !== true;
        if (this.selection.dropTarget) {
            var dropTarget = this.selection.dropTarget.getControlModel().getMetaData().isContainer ? this.selection.dropTarget : (this.selection.dropTarget.parent || this.selection.dropTarget), controlModel = ko.dataFor(event.target).getControlModel && ko.dataFor(event.target).getControlModel(), metaData = controlModel && controlModel.getMetaData() || ko.dataFor(event.target).info;
            if (this.canDrop(dropTarget, controlModel, metaData)) {
                this.dragHelperContent && this.dragHelperContent.isLocked(false);
            }
            else {
                this.snapHelper && this.snapHelper.deactivateSnapLines();
                needToActivateSnapLines = false;
                this.dragHelperContent && this.dragHelperContent.isLocked(true);
            }
        }
        if (needToActivateSnapLines) {
            var position = this._getAbsoluteSurfacePosition(ui);
            var snapDelta = this.snapHelper && this.snapHelper.activateSnapLines({
                left: position.left,
                top: position.top,
                right: position.left + this._size.width(),
                bottom: position.top + this._size.height()
            });
            ui.position.left -= snapDelta.left;
            ui.position.top -= snapDelta.top;
        }
    };
    DragDropHandler.prototype.doStopDrag = function (ui, draggable, event) { };
    DragDropHandler.started = ko.observable(false);
    return DragDropHandler;
}(utils_1.Disposable));
exports.DragDropHandler = DragDropHandler;
