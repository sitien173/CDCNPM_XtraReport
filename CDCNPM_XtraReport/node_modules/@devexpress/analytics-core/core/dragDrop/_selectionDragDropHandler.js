/**
* DevExpress Analytics (core\dragDrop\_selectionDragDropHandler.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
require("jquery-ui/ui/widgets/draggable");
require("jquery-ui/ui/widgets/resizable");
require("jquery-ui/ui/widgets/selectable");
require("jquery-ui/ui/widgets/mouse");
var _dragDropHandler_1 = require("./_dragDropHandler");
var _surfaceHelpers_1 = require("../internal/_surfaceHelpers");
var SelectionDragDropHandler = (function (_super) {
    __extends(SelectionDragDropHandler, _super);
    function SelectionDragDropHandler(surface, selection, undoEngine, snapHelper, dragHelperContent) {
        var _this = _super.call(this, surface, selection, undoEngine, snapHelper, dragHelperContent) || this;
        _this.cursor = 'move';
        _this.containment = '.dxrd-ghost-container';
        _this['helper'] = function (draggable) {
            _super.prototype.helper.call(_this, draggable);
            if (_this.selection.selectedItems.indexOf(draggable) === -1) {
                _this.selection.updateSelection(draggable);
            }
            dragHelperContent.update(draggable);
            _this._size.width(dragHelperContent.width());
            _this._size.height(dragHelperContent.height());
        };
        return _this;
    }
    SelectionDragDropHandler.prototype.adjustDropTarget = function (dropTargetSurface) {
        var selectedItemInTree = dropTargetSurface;
        while (selectedItemInTree != null) {
            if (selectedItemInTree.selected && selectedItemInTree.selected()) {
                dropTargetSurface = selectedItemInTree.parent;
                break;
            }
            selectedItemInTree = selectedItemInTree.parent;
        }
        return dropTargetSurface;
    };
    SelectionDragDropHandler.prototype.startDrag = function (control) {
        this.selection.swapFocusedItem(control);
        var focusedSurface = this.selection.focused();
        var baseOffsetX = focusedSurface.rect().left + focusedSurface.underCursor().x;
        var baseOffsetY = focusedSurface.rect().top + focusedSurface.underCursor().y;
        this.selection.selectedItems.filter(function (item) { return !item.locked; }).forEach(function (item) {
            if (item.parent === focusedSurface.parent) {
                item.underCursor().offsetX = item.rect().left - baseOffsetX;
                item.underCursor().offsetY = item.rect().top - baseOffsetY;
            }
        });
    };
    SelectionDragDropHandler.prototype.drag = function (event, ui) {
        ui.position.left += ui['scroll'].left;
        ui.position.top += ui['scroll'].top;
        _super.prototype.drag.call(this, event, ui);
    };
    SelectionDragDropHandler.prototype.getLocation = function (adjustedTarget, item) {
        var left = adjustedTarget.underCursor().x + item.underCursor().offsetX, top = adjustedTarget.underCursor().y + item.underCursor().offsetY;
        return { left: left > 0 ? left : 0, top: top > 0 ? top : 0 };
    };
    SelectionDragDropHandler.prototype.ajustLocation = function (adjustedTarget, item) {
        item.rect(this.getLocation(adjustedTarget, item));
    };
    SelectionDragDropHandler.prototype.doStopDrag = function (ui, _) {
        this.dragHelperContent.reset();
        if (this.dragHelperContent.isLocked())
            return;
        if (this.selection.dropTarget) {
            var dropTarget = this.selection.dropTarget.getControlModel(), dropTargetSurface = dropTarget.getNearestParent(dropTarget)['surface'];
            var focusedSurface = this.selection.focused();
            var adjustedTarget = this.adjustDropTarget(dropTargetSurface), focusedModel = focusedSurface.getControlModel(), parent = focusedModel.getNearestParent(adjustedTarget.getControlModel()), adjustedTarget = parent && _surfaceHelpers_1.findSurface(parent), changeParent = adjustedTarget !== focusedSurface.parent;
            if (!adjustedTarget || !adjustedTarget.canDrop()) {
                return;
            }
            var position = this._getAbsoluteSurfacePosition(ui);
            adjustedTarget.underCursor().x = position.left - (adjustedTarget['absolutePosition'] && adjustedTarget['absolutePosition'].x() || 0) - focusedSurface.underCursor().offsetX;
            adjustedTarget.underCursor().y = position.top - (adjustedTarget['absolutePosition'] && adjustedTarget['absolutePosition'].y() || 0) - focusedSurface.underCursor().offsetY;
            var dropPointRelativeX = ui.position.left;
            var dropPointRelativeY = ui.position.top;
            var itemsToDrop = this.selection.selectedItems
                .filter(function (item) { return !item.locked && item.parent === focusedSurface.parent; })
                .map(function (item) {
                return item.getControlModel();
            })
                .filter(function (item) {
                return item.getMetaData().canDrop(adjustedTarget, item);
            });
            if (changeParent) {
                for (var i = 0; i < itemsToDrop.length; i++) {
                    itemsToDrop[i].surface.rect({ top: 0, left: 0 });
                }
                focusedModel.parentModel().removeChilds(itemsToDrop);
                parent['addChilds'](itemsToDrop);
                for (var i = 0; i < itemsToDrop.length; i++) {
                    this.ajustLocation(adjustedTarget, itemsToDrop[i].surface);
                }
                this.selection.focused(focusedSurface);
                this.selection.selectItems(itemsToDrop.map(function (item) { return item.surface; }));
            }
            else {
                for (var i = 0; i < itemsToDrop.length; i++) {
                    this.ajustLocation(adjustedTarget, itemsToDrop[i].surface);
                }
                this.selection.expectClick = true;
            }
        }
    };
    SelectionDragDropHandler.prototype.create = function (event, ui) {
        if (ko.dataFor(event.target).locked) {
            $(this)['draggable']('disable');
        }
    };
    return SelectionDragDropHandler;
}(_dragDropHandler_1.DragDropHandler));
exports.SelectionDragDropHandler = SelectionDragDropHandler;
