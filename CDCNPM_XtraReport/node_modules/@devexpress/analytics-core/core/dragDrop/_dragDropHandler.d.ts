/**
* DevExpress Analytics (core\dragDrop\_dragDropHandler.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import 'jquery-ui/ui/widgets/draggable';
import 'jquery-ui/ui/widgets/resizable';
import 'jquery-ui/ui/widgets/selectable';
import 'jquery-ui/ui/widgets/mouse';
import { Disposable } from '../../serializer/utils';
import { ISurfaceContext } from '../elements/baseSurface';
import { SurfaceSelection } from '../selection/_selection';
import { SnapLinesHelper } from '../snapLines/_snapLinesHelper';
import { DragHelperContent } from './_dragHelperContent';
import { Size } from '../elements/size';
import { UndoEngine } from '../../undo-engine/undoengine';
export declare class DragDropHandler extends Disposable {
    dispose(): void;
    static started: ko.Observable<boolean>;
    protected getTarget(event: JQueryEventObject): HTMLElement;
    surface: ko.Observable<ISurfaceContext> | ko.Computed<ISurfaceContext>;
    selection: SurfaceSelection;
    snapHelper: SnapLinesHelper;
    dragHelperContent: DragHelperContent;
    _size: Size;
    _getAbsoluteSurfacePosition(ui: any): {
        left: number;
        top: number;
    };
    constructor(surface: ko.Observable<ISurfaceContext> | ko.Computed<ISurfaceContext>, selection: SurfaceSelection, undoEngine: ko.Observable<UndoEngine> | ko.Computed<UndoEngine>, snapHelper?: SnapLinesHelper, dragHelperContent?: DragHelperContent);
    addControl(control: any, dropTargetSurface: any, size: any): void;
    recalculateSize(size: any): void;
    helper(draggable: any, event?: any): void;
    canDrop(dropTarget: any, controlModel: any, metaData: any): boolean;
    startDrag(draggable: any): void;
    drag(event: JQueryEventObject, ui: any): void;
    stopDrag: (ui: any, draggable: any, event?: any) => void;
    doStopDrag(ui: any, draggable: any, event?: any): void;
    parent: () => JQuery<any>;
    cursor: string;
    containment: string;
    alwaysAlt: boolean;
}
