/**
* DevExpress Analytics (property-grid\widgets\collectioneditor\_editor.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../../../serializer/utils");
var _internal_1 = require("../internal/_internal");
var localization_utils_1 = require("../../localization/localization_utils");
var _internal_2 = require("../../../serializer/_internal");
var _listKeyboardHelper_1 = require("../../../accessibility/_listKeyboardHelper");
var CollectionItemWrapper = (function (_super) {
    __extends(CollectionItemWrapper, _super);
    function CollectionItemWrapper(editor, array, index, displayNameField) {
        if (displayNameField === void 0) { displayNameField = ''; }
        var _this = _super.call(this) || this;
        _this.collapsed = ko.observable(true);
        _this.selected = ko.observable(false);
        _this._disposables.push(_this.value = ko.computed({
            read: function () {
                return array.peek()[index()];
            },
            write: function (val) {
                array.peek()[index()] = val;
            }
        }));
        _this.editor = editor;
        _this.index = index;
        _this._disposables.push(_this.name = ko.computed(function () {
            return displayNameField && _this.value() && _this.value()[displayNameField] ? ko.unwrap(_this.value()[displayNameField]) : index();
        }));
        return _this;
    }
    return CollectionItemWrapper;
}(utils_1.Disposable));
exports.CollectionItemWrapper = CollectionItemWrapper;
var CollectionEditorViewModel = (function (_super) {
    __extends(CollectionEditorViewModel, _super);
    function CollectionEditorViewModel(options, disabled) {
        if (disabled === void 0) { disabled = ko.observable(false); }
        var _this = _super.call(this) || this;
        _this.buttonMap = {
            'delete': { text: 'Delete', localizationId: 'AnalyticsCoreStringId.Cmd_Delete' },
            'add': { text: 'Add', localizationId: 'DataAccessUIStringId.Button_Add' },
            'down': { text: 'Move Down', localizationId: 'AnalyticsCoreStringId.Cmd_MoveDown' },
            'up': { text: 'Move Up', localizationId: 'AnalyticsCoreStringId.Cmd_MoveUp' }
        };
        _this.selectedIndex = ko.observable(null);
        _this.alwaysShow = ko.observable(false);
        _this.collapsed = ko.observable(options.collapsed !== false);
        var addHandler = function () { return (options.addHandler || options.info && options.info() && options.info()['addHandler']).call(_this); };
        var hideButtons = options.hideButtons || options.info && options.info() && options.info()['hideButtons'];
        _this._textEmptyArray = options.textEmptyArray || { text: 'To create an item click the Add button.', localizationId: 'AnalyticsCoreStringId.SqlDSWizard_PageConfigureParametersEmpty' };
        _this.displayPropertyName = options.info && options.info() && options.info()['displayPropertyName'] || options.displayName;
        _this._disposables.push(_this.showButtons = ko.computed(function () {
            return !ko.unwrap(hideButtons) && !_this.collapsed();
        }));
        _this.showScroll = !!options.showScroll;
        var _isDisabled = function (selectedIndex, name) {
            if (options.isDisabledButton) {
                return options.isDisabledButton(selectedIndex, name);
            }
            else if (name === 'delete') {
                return selectedIndex === null;
            }
            else if (name === 'add') {
                return false;
            }
            else if (name === 'up') {
                return selectedIndex === null || selectedIndex === 0;
            }
            else if (name === 'down') {
                return selectedIndex === null || selectedIndex === (_this.values().length - 1);
            }
        };
        _this.isDisabledButton = function (name) {
            return disabled() || _isDisabled(_this.selectedIndex(), name);
        };
        _this.isVisibleButton = function (name) {
            if (!_this.showButtons()) {
                return false;
            }
            else
                return options.isVisibleButton ? options.isVisibleButton(_this.selectedIndex(), name) : true;
        };
        _this.padding = options.level !== void 0 ? options.level * _internal_1.propertiesGridEditorsPaddingLeft() : 0;
        _this.displayName = (options.info && options.info()) ? localization_utils_1.getLocalization(options.info().displayName, options.info().localizationId) : options.displayName;
        _this.options = options;
        if (!options.displayName) {
            _this.collapsed(false);
            _this.alwaysShow(true);
        }
        if (options.alwaysShow)
            _this.alwaysShow(true);
        _this._disposables.push(_this.values = ko.computed(function () {
            _this._timeoutItemRendered && clearTimeout(_this._timeoutItemRendered);
            _this._timeoutItemRendered = setTimeout(function () {
                _this.listKeyboardHelper && _this.listKeyboardHelper.initialize();
            }, 100);
            return ko.unwrap(options.values());
        }));
        var selectedItem = ko.unwrap(options.selectedItem);
        if (selectedItem) {
            _this._setSelectedIndex(selectedItem);
            _this._disposables.push(options.selectedItem.subscribe(function (newVal) {
                _this._setSelectedIndex(newVal);
            }));
        }
        _this.add = function (model) {
            model.event.stopPropagation();
            options.undoEngine && options.undoEngine().start();
            var item = addHandler();
            if (!item)
                return;
            var index = options.values().push(item);
            options.undoEngine && options.undoEngine().end();
            if (options.selectedItem) {
                _this.select({ index: function () { return index - 1; } });
            }
        };
        _this.up = function (model) {
            _this._move(options.values(), -1);
            model.event.stopPropagation();
        };
        _this.down = function (model) {
            _this._move(options.values(), 1);
            model.event.stopPropagation();
        };
        _this.remove = function (model) {
            model.event.stopPropagation();
            if (_this.selectedIndex() < 0)
                return;
            options.values().splice(_this.selectedIndex(), 1);
            var valuesCount = options.values()().length;
            if (valuesCount > 0) {
                _this.select({
                    index: function () { return _this.selectedIndex() >= valuesCount ? valuesCount - 1 : _this.selectedIndex(); }
                }, true);
            }
            else {
                _this.select({ index: function () { return null; } }, true);
            }
        };
        _this.select = function (model, force) {
            if (force === void 0) { force = false; }
            if (_this.selectedIndex() === model.index() && !force)
                return;
            _this.selectedIndex(model.index());
            if (options.selectedItem) {
                options.selectedItem(_this.selectedIndex() !== null ? _this.values()[_this.selectedIndex()] : null);
            }
        };
        _this.disabled = disabled;
        _this.listKeyboardHelper = new _listKeyboardHelper_1.ListKeyboardHelper();
        return _this;
    }
    CollectionEditorViewModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.removeProperties();
    };
    CollectionEditorViewModel.prototype._move = function (array, offset) {
        if (this.selectedIndex() >= 0) {
            var old_index = this.selectedIndex(), new_index = old_index + offset;
            if ((new_index >= array().length) || (new_index < 0)) {
                return;
            }
            array.splice(new_index, 0, array.splice(old_index, 1)[0]);
            this.selectedIndex(new_index);
        }
    };
    CollectionEditorViewModel.prototype._setSelectedIndex = function (selectedItem) {
        var index = this.values().indexOf(selectedItem);
        this.selectedIndex(index === -1 ? null : index);
    };
    CollectionEditorViewModel.prototype.getDisplayTextButton = function (key) {
        return localization_utils_1.getLocalization(this.buttonMap[key].text, this.buttonMap[key].localizationId);
    };
    CollectionEditorViewModel.prototype.getDisplayTextEmptyArray = function () {
        return localization_utils_1.getLocalization(this._textEmptyArray.text, this._textEmptyArray.localizationId);
    };
    CollectionEditorViewModel.prototype.createCollectionItemWrapper = function (grandfather, index, element) {
        var wrapper = new CollectionItemWrapper(grandfather, this.values, index, this.displayPropertyName);
        _internal_2.addDisposeCallback(element, function () { return wrapper.dispose(); });
        return wrapper;
    };
    return CollectionEditorViewModel;
}(utils_1.Disposable));
exports.CollectionEditorViewModel = CollectionEditorViewModel;
