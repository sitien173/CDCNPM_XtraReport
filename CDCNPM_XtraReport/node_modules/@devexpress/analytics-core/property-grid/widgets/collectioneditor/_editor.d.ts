/**
* DevExpress Analytics (property-grid\widgets\collectioneditor\_editor.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { Disposable } from '../../../serializer/utils';
import { IUndoEngine, ILocalizationInfo } from '../internal/_utils';
import { ISerializationInfo } from '../../../serializer/serializationInfo';
import { ListKeyboardHelper } from '../../../accessibility/_listKeyboardHelper';
export declare class CollectionItemWrapper extends Disposable {
    constructor(editor: any, array: any, index: ko.Observable<number> | ko.Computed<number>, displayNameField?: string);
    editor: any;
    index: ko.Observable<number> | ko.Computed<number>;
    value: ko.Observable | ko.Computed;
    collapsed: ko.Observable<boolean> | ko.Computed<boolean>;
    name: ko.Observable<string> | ko.Computed<string>;
    selected: ko.Observable<boolean> | ko.Computed<boolean>;
}
export interface ICollectionEditorOptions {
    values: ko.Observable<ko.ObservableArray<any>> | ko.Computed<ko.ObservableArray<any>>;
    addHandler: () => any;
    displayName?: string;
    displayPropertyName?: string;
    hideButtons?: any;
    showScroll?: boolean;
    selectedItem?: ko.Observable<any>;
    collapsed?: boolean;
    alwaysShow?: boolean;
    undoEngine?: ko.Observable<IUndoEngine> | ko.Computed<IUndoEngine>;
    level?: number;
    info?: ko.Observable<ISerializationInfo> | ko.Computed<ISerializationInfo>;
    template?: string;
    editorTemplate?: string;
    textEmptyArray?: ILocalizationInfo;
    isVisibleButton?: (index: any, buttonName: any) => boolean;
    isDisabledButton?: (index: any, buttonName: any) => boolean;
}
export declare class CollectionEditorViewModel extends Disposable {
    dispose(): void;
    private _textEmptyArray;
    private _timeoutItemRendered;
    private _move;
    private _setSelectedIndex;
    options: any;
    displayPropertyName: string;
    showScroll: boolean;
    constructor(options: ICollectionEditorOptions, disabled?: ko.Observable<boolean>);
    getDisplayTextButton(key: string): any;
    getDisplayTextEmptyArray(): any;
    createCollectionItemWrapper(grandfather: any, index: any, element: any): CollectionItemWrapper;
    buttonMap: {
        [keyname: string]: ILocalizationInfo;
    };
    isVisibleButton: (buttonName: any) => boolean;
    isDisabledButton: (buttonName: any) => boolean;
    listKeyboardHelper: ListKeyboardHelper;
    padding: number;
    values: ko.Observable<any[]> | ko.Computed<any[]>;
    add: (model: any) => void;
    up: (model: any) => void;
    down: (model: any) => void;
    remove: (model: any) => void;
    select: (event: any, force?: boolean) => void;
    selectedIndex: ko.Observable<number>;
    collapsed: ko.Observable<boolean> | ko.Computed<boolean>;
    displayName: string;
    alwaysShow: ko.Observable<boolean>;
    showButtons: ko.Computed<boolean>;
    disabled: ko.Observable<boolean> | ko.Computed<boolean>;
}
