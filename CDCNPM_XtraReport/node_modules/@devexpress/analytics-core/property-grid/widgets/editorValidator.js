/**
* DevExpress Analytics (property-grid\widgets\editorValidator.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../../serializer/utils");
var validation_engine_1 = require("devextreme/ui/validation_engine");
var _utils_1 = require("../../serializer/_utils");
var EditorValidator = (function (_super) {
    __extends(EditorValidator, _super);
    function EditorValidator(_editor) {
        var _this_1 = _super.call(this) || this;
        _this_1._editor = _editor;
        _this_1._lastValidatorOptions = null;
        _this_1._lastModelOverridableRules = null;
        _this_1._onValidatedHandler = undefined;
        return _this_1;
    }
    EditorValidator.prototype.dispose = function () {
        this.onValidatedHandler = null;
        this.validatorInstance && this.validatorInstance.dispose();
        this.validatorInstance = null;
        _super.prototype.dispose.call(this);
    };
    EditorValidator.prototype._isValid = function (validationRules, newValue) {
        var _this_1 = this;
        this.onValidatedHandler = undefined;
        if (this.validatorInstance) {
            (validationRules || []).forEach(function (rule) { return rule && (rule.validator = _this_1.validatorInstance); });
            return this.validatorInstance.validate();
        }
        else {
            return validation_engine_1.default['validate'](newValue, validationRules, this._editor.displayName());
        }
    };
    Object.defineProperty(EditorValidator.prototype, "validatorInstance", {
        get: function () {
            return this._validatorInstance;
        },
        set: function (newValue) {
            if (this._validatorInstance && this.onValidatedHandler) {
                this._validatorInstance.off('validated', this._onValidatedHandler);
            }
            this._validatorInstance = newValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorValidator.prototype, "onValidatedHandler", {
        get: function () {
            return this._onValidatedHandler;
        },
        set: function (newValue) {
            if (this._onValidatedHandler && this.validatorInstance) {
                this.validatorInstance.off('validated', this._onValidatedHandler);
                this._onValidatedHandler = newValue;
                if (newValue) {
                    this.validatorInstance.on('validated', this._onValidatedHandler);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    EditorValidator.prototype.getValidationRules = function () {
        var options = this.getValidatorOptions();
        var resultRules = (options || {}).validationRules;
        return resultRules || (resultRules === null ? null : []);
    };
    EditorValidator.prototype.getValidatorOptions = function (templateValidatorOptions) {
        if (templateValidatorOptions === void 0) { templateValidatorOptions = {}; }
        var info = this._editor.info.peek();
        if (!info)
            return;
        var options = this._lastValidatorOptions;
        var modelOverridableRules = this._editor._getEditorValidationRules();
        if (options && !this.areRulesChanged(modelOverridableRules)) {
            return options;
        }
        this._lastModelOverridableRules = modelOverridableRules;
        var extendedValidationRules = this._concatValidationRules(info.validatorOptions, modelOverridableRules);
        var extendedValidatorOptions = info.editor.extendedOptions && info.editor.extendedOptions.validatorOptions;
        var options = _utils_1.extend({}, templateValidatorOptions, info.validatorOptions, { validationRules: extendedValidationRules }, extendedValidatorOptions);
        this._wrapValidatorEvents(options);
        this._lastValidatorOptions = options;
        return options;
    };
    EditorValidator.prototype.areRulesChanged = function (overridableRuleSet) {
        var _this_1 = this;
        if (!(this._lastModelOverridableRules && this._lastModelOverridableRules.length)) {
            return overridableRuleSet && overridableRuleSet.length;
        }
        else if (!overridableRuleSet || !overridableRuleSet.length) {
            return true;
        }
        else {
            return !overridableRuleSet.every(function (newRule) {
                return _this_1._lastModelOverridableRules.some(function (rule) {
                    return newRule.message === rule.message && newRule.validationCallback === rule.validationCallback && newRule.type === rule.type;
                });
            });
        }
    };
    EditorValidator.prototype.wrapOnValidatorInitialized = function (options) {
        var onInitializedHandler = options.onInitialized;
        var _this = this;
        options.onInitialized = function (e) {
            _this._onValidatorInitialized(e);
            onInitializedHandler && onInitializedHandler.apply(this, arguments);
        };
    };
    EditorValidator.prototype._onValidatorInitialized = function (e) {
        this.validatorInstance = e && e.component;
    };
    EditorValidator.prototype._concatValidationRules = function (validatorOptions, validationRules) {
        if ((!validatorOptions || !validatorOptions.validationRules) && !validationRules) {
            return null;
        }
        return ((validatorOptions || {}).validationRules || []).concat(validationRules || []);
    };
    EditorValidator.prototype._wrapValidatorEvents = function (validatorOptions) {
        if (!validatorOptions || !validatorOptions.validationRules || !validatorOptions.validationRules.length) {
            return;
        }
        this.wrapOnValidatorInitialized(validatorOptions);
        return validatorOptions;
    };
    EditorValidator.prototype.assignWithValidation = function (newValue, assignValueFunc) {
        var _this_1 = this;
        var validationRules = this.getValidationRules();
        var assignValueFirst = !validationRules || validationRules.some(function (x) { return x.assignValueFirst; });
        if (assignValueFirst) {
            assignValueFunc();
        }
        var validationResult = this._isValid(validationRules, newValue);
        if (!validationResult.isValid) {
            if (validationResult.brokenRule && validationResult.brokenRule['isDeferred']) {
                this.onValidatedHandler = function (result) {
                    _this_1.onValidatedHandler = undefined;
                    if (!result.isValid)
                        return;
                    assignValueFunc();
                };
            }
            return;
        }
        if (!assignValueFirst) {
            assignValueFunc();
        }
    };
    return EditorValidator;
}(utils_1.Disposable));
exports.EditorValidator = EditorValidator;
