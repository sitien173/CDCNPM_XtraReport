/**
* DevExpress Analytics (property-grid\widgets\editor.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { Disposable } from '../../serializer/utils';
import { IControlPropertiesViewModel, IModelAction } from './internal/_utils';
import { IPropertiesAccessibilityProvider } from '../_propertiesAccessibilityProvider';
import { ISerializationInfo } from '../../serializer/serializationInfo';
export declare class Editor extends Disposable {
    _setPadding(position: string, value: any): {};
    _model: ko.Observable<IControlPropertiesViewModel>;
    _parent: ko.Observable<Editor>;
    isSearchedProperty: ko.Observable<boolean> | ko.Computed<boolean>;
    isParentSearched: ko.Observable<boolean>;
    rtl: boolean;
    protected _accessibilityProvider: ko.Observable<IPropertiesAccessibilityProvider>;
    private _validator;
    dispose(): void;
    constructor(modelPropertyInfo: ISerializationInfo, level: any, parentDisabled?: ko.Observable<boolean> | ko.Computed<boolean>, textToSearch?: any);
    protected _shouldSkipHighlighting(propertyName: string): boolean;
    private _cachedValue;
    private _assignValue;
    private _roundTwoDesemialsForUnitProperties;
    private _init;
    private _getInfoFromModel;
    update(viewModel: IControlPropertiesViewModel): void;
    getOptions(templateOptions: any): any;
    getValidatorOptions(templateValidatorOptions: any): any;
    registerAccessibilityProvider(accessibilityProvider: IPropertiesAccessibilityProvider): void;
    assingParent(parent: Editor): void;
    _getEditorValidationRules(): any[];
    getValidationRules(): any;
    readonly validationRules: any;
    padding: any;
    level: any;
    textToSearch: ko.Observable<string> | ko.Computed<string>;
    info: ko.Observable<ISerializationInfo>;
    name: string;
    displayName: ko.Computed<string>;
    templateName: string;
    contentTemplateName: string;
    editorTemplate: string;
    viewmodel: any;
    values: ko.Computed<{
        displayValue: string;
        value: string;
    }[]>;
    value: ko.Computed<any>;
    isEditorSelected: ko.Observable<boolean>;
    isRequired: boolean;
    isPropertyModified: ko.Computed<boolean>;
    isPropertyHighlighted: ko.Computed<boolean>;
    disabled: ko.Computed<boolean>;
    visible: ko.Computed<boolean>;
    isRendered: ko.Observable<boolean>;
    getIdByDisplayName(preffix: string): string;
    getPopupServiceActions(): IModelAction[];
    editorOptions: any;
    validatorOptions: any;
    defaultValue: any;
    readonly isComplexEditor: boolean;
    collapsed: ko.Observable<boolean>;
}
