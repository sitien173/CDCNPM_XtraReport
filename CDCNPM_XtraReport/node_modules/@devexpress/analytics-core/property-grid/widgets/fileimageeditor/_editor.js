/**
* DevExpress Analytics (property-grid\widgets\fileimageeditor\_editor.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var _editor_1 = require("../ellipsiseditor/_editor");
var localization_utils_1 = require("../../localization/localization_utils");
var _utils_1 = require("../internal/_utils");
var _dxtInherit_1 = require("../../../widgets/internal/_dxtInherit");
var editor_prefix = 'dx-fileimage', EDITOR_INPUT_WRAPPER_CLASS = editor_prefix + '-input-wrapper';
var dxFileImagePicker = (function (_super) {
    __extends(dxFileImagePicker, _super);
    function dxFileImagePicker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    dxFileImagePicker.prototype.updateOptions = function (options) {
        options['placeholder'] = options['placeholder'] || localization_utils_1.getLocalization('(none)', 'DxDesignerStringId.None');
        _super.prototype.updateOptions.call(this, options);
    };
    dxFileImagePicker.prototype._getDisplayValue = function () {
        var knownPlaceholders = {
            'Image': 'AnalyticsCoreStringId.ImagePicker_Placeholder',
            'File': 'AnalyticsCoreStringId.FilePicker_Placeholder'
        };
        var placeholderId = this.option('placeholderId');
        if (this.option('value') && placeholderId)
            return localization_utils_1.getLocalization(placeholderId, knownPlaceholders[placeholderId]);
        else
            return this.option('value');
    };
    dxFileImagePicker.prototype._handleResult = function (result) {
        if (this.option('useFormat')) {
            this.option('format', result.format);
        }
        this.option('value', result.content);
    };
    dxFileImagePicker.prototype._renderInput = function (inputContainer) {
        var $inputContainer = inputContainer && $(inputContainer) || $('<div />');
        $inputContainer.addClass(EDITOR_INPUT_WRAPPER_CLASS);
        this['_inputContainer'] = $inputContainer.get(0);
        $(this.element()).append(this['_inputContainer']);
        _dxtInherit_1._getSuper(this)['_renderInput'].apply(this, [inputContainer]);
    };
    dxFileImagePicker.prototype._attachButtonEvents = function () {
        var _this = this;
        this._$button.off('click');
        if (!this.option('disabled')) {
            this._$button.on('click', function (e) {
                e.stopPropagation();
                e.preventDefault();
                _utils_1.uploadFile({
                    accept: _this.option('accept') || 'image/*',
                    readMode: _this.option('readMode')
                }).done(function (result) {
                    _this._handleResult(result);
                });
            });
        }
    };
    dxFileImagePicker.prototype._renderValue = function () {
        this.option('text', this._getDisplayValue());
        _dxtInherit_1._getSuper(this)['_renderValue'].apply(this);
    };
    return dxFileImagePicker;
}(_editor_1.dxEllipsisEditor));
exports.dxFileImagePicker = dxFileImagePicker;
_dxtInherit_1._registerDxtComponent('dxFileImagePicker', dxFileImagePicker);
