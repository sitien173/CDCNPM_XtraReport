/**
* DevExpress Analytics (property-grid\propertygrid.d.ts)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { Disposable } from '../serializer/utils';
import { IPropertiesAccessibilityProvider } from './_propertiesAccessibilityProvider';
import { Editor } from './widgets/editor';
import { IControlPropertiesViewModel } from './widgets/internal/_utils';
import { ISerializationInfo, ISerializationInfoArray } from '../serializer/serializationInfo';
import { PopupService } from './internal/_popupService';
import { IEditorAddon } from './internal/_addon';
export declare class ObjectProperties extends Disposable {
    private _viewModelSubscription;
    private _infoSubscription;
    private _getInfoComputed;
    protected _accessibilityProvider: IPropertiesAccessibilityProvider;
    protected _parent: Editor;
    update(viewModel: IControlPropertiesViewModel): void;
    private _cleanEditorsSubscriptions;
    dispose(): void;
    cleanSubscriptions(): void;
    cleanEditors(): void;
    findEditorByInfo(serializationInfo: ISerializationInfo): Editor;
    createEditor(modelPropertyInfo: ISerializationInfo): any;
    createEditors(serializationInfo: ISerializationInfoArray): any[];
    registerAccessibilityProvider(accessibilityProvider: IPropertiesAccessibilityProvider): void;
    assignParent(parent: Editor): void;
    private _createEditors;
    protected _update(viewModel: IControlPropertiesViewModel, editorsInfo: any, recreateEditors: any): void;
    private _recreateEditors;
    constructor(viewModel: ko.Observable<any> | ko.Computed<any>, editorsInfo?: {
        editors?: ISerializationInfoArray | ko.Observable<ISerializationInfoArray> | ko.Computed<ISerializationInfoArray>;
    }, level?: number, parentDisabled?: ko.Observable<boolean> | ko.Computed<boolean>, recreateEditors?: boolean, textToSearch?: any, popupService?: PopupService);
    level: number;
    popupService: PopupService;
    createEditorAddOn: (editor: Editor) => IEditorAddon;
    rtl: boolean;
    getEditors(): Editor[];
    _textToSearch: any;
    visible: ko.Observable<boolean> | ko.Computed<boolean>;
    _editors: ko.ObservableArray<Editor>;
    private _parentDisabled;
}
export declare class PropertyGridEditor extends Editor {
    private _popupService?;
    constructor(info: ISerializationInfo, level: any, parentDisabled?: ko.Computed<boolean>, textToSearch?: any, _popupService?: PopupService);
    createObjectProperties(): ObjectProperties;
    registerAccessibilityProvider(accessibilityProvider: IPropertiesAccessibilityProvider): void;
    visibleByName: ko.Computed<boolean>;
    editorCreated: ko.Observable<boolean>;
}
export declare class PropertyGridEditorFlat extends PropertyGridEditor {
    createObjectProperties(): ObjectProperties;
}
