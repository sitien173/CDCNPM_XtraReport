/**
* DevExpress Analytics (property-grid\propertygrid.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../serializer/utils");
var _propertiesAccessibilityProvider_1 = require("./_propertiesAccessibilityProvider");
var editor_1 = require("./widgets/editor");
var _utils_1 = require("./widgets/internal/_utils");
var _addon_1 = require("./internal/_addon");
var config_1 = require("devextreme/core/config");
var _utils_2 = require("../serializer/_utils");
var ObjectProperties = (function (_super) {
    __extends(ObjectProperties, _super);
    function ObjectProperties(viewModel, editorsInfo, level, parentDisabled, recreateEditors, textToSearch, popupService) {
        if (level === void 0) { level = 0; }
        if (parentDisabled === void 0) { parentDisabled = ko.observable(false); }
        if (recreateEditors === void 0) { recreateEditors = false; }
        var _this = _super.call(this) || this;
        _this._viewModelSubscription = null;
        _this._infoSubscription = null;
        _this._getInfoComputed = null;
        _this._accessibilityProvider = _propertiesAccessibilityProvider_1.defaultAccessibilityProvider;
        _this.level = 0;
        _this.rtl = config_1.default()['rtlEnabled'];
        if (popupService) {
            _this.createEditorAddOn = function (editor) {
                var editorAddOn = new _addon_1.EditorAddOn(editor, _this.popupService);
                editor._disposables.push(editorAddOn);
                return {
                    templateName: editorAddOn.templateName,
                    data: [editorAddOn]
                };
            };
            _this.popupService = popupService;
        }
        _this._editors = ko.observableArray([]).extend({ deferred: true });
        _this.level = level;
        _this._parentDisabled = parentDisabled;
        _this._textToSearch = textToSearch;
        _this._disposables.push(_this.visible = ko.computed(function () {
            return _this._editors().some(function (editor) { return editor.visible(); });
        }));
        _this._viewModelSubscription = viewModel.subscribe(function (newVal) {
            _this._infoSubscription && _this._infoSubscription.dispose();
            _this._getInfoComputed && _this._getInfoComputed.dispose();
            _this._update(newVal, editorsInfo, recreateEditors);
        });
        _this._update(viewModel(), editorsInfo, recreateEditors);
        return _this;
    }
    ObjectProperties.prototype.update = function (viewModel) {
        if (viewModel) {
            this._editors().forEach(function (editor) {
                editor.update(viewModel);
            });
        }
    };
    ObjectProperties.prototype._cleanEditorsSubscriptions = function () {
        this._editors().forEach(function (editor) {
            editor.dispose();
            Object.keys(editor).forEach(function (name) {
                if (ko.isComputed(editor[name])) {
                    editor[name].dispose();
                }
            });
        });
    };
    ObjectProperties.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.disposeObservableArray(this._editors);
        this.resetObservableArray(this._editors);
        this.cleanSubscriptions();
    };
    ObjectProperties.prototype.cleanSubscriptions = function () {
        this._infoSubscription && this._infoSubscription.dispose();
        this._getInfoComputed && this._getInfoComputed.dispose();
        this._viewModelSubscription && this._viewModelSubscription.dispose();
        this._cleanEditorsSubscriptions();
    };
    ObjectProperties.prototype.cleanEditors = function () {
        this._cleanEditorsSubscriptions();
        this.resetObservableArray(this._editors);
    };
    ObjectProperties.prototype.findEditorByInfo = function (serializationInfo) {
        return this._editors().filter(function (editor) { return editor.name === serializationInfo.propertyName && _utils_1.compareEditorInfo(editor.info().editor, serializationInfo.editor); })[0];
    };
    ObjectProperties.prototype.createEditor = function (modelPropertyInfo) {
        var editorType = modelPropertyInfo.editor && modelPropertyInfo.editor.editorType || editor_1.Editor;
        var editor = new editorType(modelPropertyInfo, this.level, this._parentDisabled, this._textToSearch, this.popupService);
        editor.assingParent(this._parent);
        editor.registerAccessibilityProvider(this._accessibilityProvider);
        return editor;
    };
    ObjectProperties.prototype.createEditors = function (serializationInfo) {
        var _this = this;
        var self = this;
        return (serializationInfo || [])
            .filter(function (info) { return !!info.editor && !_this.findEditorByInfo(info); })
            .map(function (info) { return _this.createEditor(info); });
    };
    ObjectProperties.prototype.registerAccessibilityProvider = function (accessibilityProvider) {
        this._accessibilityProvider = accessibilityProvider;
        this._editors().forEach(function (editor) {
            editor.registerAccessibilityProvider(accessibilityProvider);
        });
    };
    ObjectProperties.prototype.assignParent = function (parent) {
        this._parent = parent;
        this._editors().forEach(function (editor) {
            editor.assingParent(parent);
        });
    };
    ObjectProperties.prototype._createEditors = function (serializationInfo) {
        if (!serializationInfo || serializationInfo.length === 0)
            return false;
        var newEditors = this.createEditors(serializationInfo);
        if (!newEditors.length)
            return;
        var currentEditors = this._editors();
        if (currentEditors.length === 0) {
            currentEditors = newEditors;
        }
        else {
            newEditors.forEach(function (editor) {
                var existEditorIndex = currentEditors.map(function (_editor) { return _editor.name; }).indexOf(editor.name);
                if (existEditorIndex !== -1)
                    currentEditors.splice(existEditorIndex, 0, editor);
                else
                    currentEditors.push(editor);
            });
        }
        this._editors(currentEditors);
    };
    ObjectProperties.prototype._update = function (viewModel, editorsInfo, recreateEditors) {
        var _this = this;
        if (recreateEditors) {
            this.cleanEditors();
        }
        this._getInfoComputed = ko.computed(function () {
            return (editorsInfo && editorsInfo.editors && ko.unwrap(editorsInfo.editors))
                || (viewModel && viewModel['getInfo'] && viewModel['getInfo']());
        });
        this._infoSubscription = this._getInfoComputed.subscribe(function (newInfo) {
            if (recreateEditors) {
                _this.cleanEditors();
            }
            _this._recreateEditors(viewModel, newInfo);
        });
        this._recreateEditors(viewModel, this._getInfoComputed());
    };
    ObjectProperties.prototype._recreateEditors = function (viewModel, serializationInfo) {
        this._createEditors(serializationInfo);
        this.update(viewModel);
    };
    ObjectProperties.prototype.getEditors = function () {
        return this._editors();
    };
    return ObjectProperties;
}(utils_1.Disposable));
exports.ObjectProperties = ObjectProperties;
var PropertyGridEditor = (function (_super) {
    __extends(PropertyGridEditor, _super);
    function PropertyGridEditor(info, level, parentDisabled, textToSearch, _popupService) {
        var _this = _super.call(this, info, level, parentDisabled, textToSearch) || this;
        _this._popupService = _popupService;
        _this.editorCreated = ko.observable(false);
        _this.viewmodel = _this.createObjectProperties();
        if (!_utils_2.isEmptyObject(_this.viewmodel)) {
            _this.viewmodel.assignParent(_this);
        }
        _this._disposables.push(_this.viewmodel);
        var subscription = _this.collapsed.subscribe(function (newVal) {
            if (!newVal) {
                subscription.dispose();
                _this.editorCreated(true);
            }
        });
        _this._disposables.push(subscription);
        if (textToSearch) {
            _this._disposables.push(_this.visibleByName = ko.computed(function () {
                var visible = !!_utils_1.findMatchesInString(_this.displayName(), textToSearch());
                if (!_utils_2.isEmptyObject(_this.viewmodel)) {
                    _this.viewmodel._editors().forEach(function (editor) { return editor.isParentSearched(visible); });
                }
                return visible;
            }));
            _this.isSearchedProperty['dispose'] && _this.isSearchedProperty['dispose']();
            _this._disposables.push(_this.isSearchedProperty = ko.computed(function () {
                if (_this.visibleByName())
                    return true;
                var visibleByEditors = _this.viewmodel.visible();
                visibleByEditors && _this.collapsed(false);
                return visibleByEditors;
            }));
        }
        return _this;
    }
    PropertyGridEditor.prototype.createObjectProperties = function () {
        var _this = this;
        return new ObjectProperties(this.value, { editors: ko.computed(function () { return _this.info().info; }) }, this.level + 1, this.disabled, undefined, this.textToSearch, this._popupService);
    };
    PropertyGridEditor.prototype.registerAccessibilityProvider = function (accessibilityProvider) {
        _super.prototype.registerAccessibilityProvider.call(this, accessibilityProvider);
        this.viewmodel.registerAccessibilityProvider(accessibilityProvider);
    };
    return PropertyGridEditor;
}(editor_1.Editor));
exports.PropertyGridEditor = PropertyGridEditor;
var PropertyGridEditorFlat = (function (_super) {
    __extends(PropertyGridEditorFlat, _super);
    function PropertyGridEditorFlat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorFlat.prototype.createObjectProperties = function () {
        this.collapsed(false);
        this.editorCreated(true);
        this.level = -1;
        return _super.prototype.createObjectProperties.call(this);
    };
    return PropertyGridEditorFlat;
}(PropertyGridEditor));
exports.PropertyGridEditorFlat = PropertyGridEditorFlat;
