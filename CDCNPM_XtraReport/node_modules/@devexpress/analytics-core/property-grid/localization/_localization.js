/**
* DevExpress Analytics (property-grid\localization\_localization.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var utils_1 = require("../../serializer/utils");
var localization = require("devextreme/localization");
var _utils_1 = require("../../serializer/_utils");
function loadMessages(_messages) {
    _utils_1.extend(exports.messages, _messages);
}
exports.loadMessages = loadMessages;
function _processLocalization(id, _removeWinSymbols) {
    if (_removeWinSymbols === void 0) { _removeWinSymbols = exports.removeWinSymbols; }
    var text = localize(id);
    if (text && _removeWinSymbols) {
        if (text.indexOf('&') !== -1 ||
            text.indexOf('<u>') !== -1 ||
            text.indexOf('</u>') !== -1) {
            var obj = {};
            obj[id] = text.replace('&', '').replace('<u>', '').replace('</u>', '');
            loadMessages(obj);
            return obj[id];
        }
    }
}
function _getLocalization(text) {
    return localize(text) || text;
}
function getLocalization(text, id, _removeWinSymbols) {
    if (id === void 0) { id = null; }
    if (_removeWinSymbols === void 0) { _removeWinSymbols = exports.removeWinSymbols; }
    var _localizedText = id && localize(id) || _getLocalization(text);
    _localizedText = id && _processLocalization(id, _removeWinSymbols) || _localizedText;
    if (isCustomizedWithUpdateLocalizationMethod(_localizedText)) {
        text = _localizedText;
    }
    if (!isCustomizedWithUpdateLocalizationMethod(text)) {
        return _localizedText;
    }
    return _getLocalization(text);
}
exports.getLocalization = getLocalization;
exports.removeWinSymbols = true;
exports.Globalize = exports.Globalize || window['Globalize'];
exports.messages = {};
exports.custom_localization_values = {};
function selectPlaceholder() {
    return getLocalization('Select...', 'AnalyticsCoreStringId.PropertyGrid_Editor_EmptyText');
}
exports.selectPlaceholder = selectPlaceholder;
function noDataText() {
    return getLocalization('No data to display', 'AnalyticsCoreStringId.DataPreview_Empty');
}
exports.noDataText = noDataText;
function searchPlaceholder() {
    return getLocalization('Enter text to search...', 'AnalyticsCoreStringId.QueryBuilder_SearchBox_EmptyText');
}
exports.searchPlaceholder = searchPlaceholder;
function resolveFromPromises(promises, createModel) {
    var deferred = $.Deferred();
    if (promises.length > 0) {
        $.when.apply($, promises).done(function () {
            var messages = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                messages[_i] = arguments[_i];
            }
            messages.forEach(function (x) { return loadMessages(x[0]); });
        }).always(function () { return deferred.resolve(createModel()); });
    }
    else {
        deferred.resolve(createModel());
    }
    return deferred;
}
exports.resolveFromPromises = resolveFromPromises;
function isCustomizedWithUpdateLocalizationMethod(text) {
    return !!exports.custom_localization_values[text];
}
exports.isCustomizedWithUpdateLocalizationMethod = isCustomizedWithUpdateLocalizationMethod;
function localize(val) {
    return exports.messages[val];
}
exports.localize = localize;
function formatDate(val) {
    return localization.formatDate(val, 'shortDate');
}
exports.formatDate = formatDate;
function parseDate(val, useDefault, format) {
    if (useDefault === void 0) { useDefault = true; }
    if (!useDefault)
        return format ? localization.parseDate(val, format) : localization.parseDate(val, undefined);
    if (val) {
        if (val instanceof Date)
            return val;
        return utils_1.deserializeDate(val);
    }
    return null;
}
exports.parseDate = parseDate;
