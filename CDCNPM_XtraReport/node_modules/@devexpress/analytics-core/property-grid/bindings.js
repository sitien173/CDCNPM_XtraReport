/**
* DevExpress Analytics (property-grid\bindings.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var propertygrid_1 = require("./propertygrid");
var _internal_1 = require("../serializer/_internal");
var _codeResolver_1 = require("./internal/_codeResolver");
var _localization_1 = require("./localization/_localization");
var localization_utils_1 = require("./localization/localization_utils");
var scroll_view_1 = require("devextreme/ui/scroll_view");
var events = require("devextreme/events");
var templateUtils_1 = require("./widgets/templateUtils");
ko.bindingHandlers['dxPropertyGrid'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        $(element).children().remove();
        var templateHtml = templateUtils_1.getTemplate('dx-propertieseditor'), $element = $(element).append(templateHtml);
        var value = valueAccessor();
        var model = new propertygrid_1.ObjectProperties(value.target, value.editorsInfo, value.level, value.parentDisabled, value.recreateEditors, value.textToSearch);
        ko.applyBindings(bindingContext.createChildContext(model), $element.children()[0]);
        _internal_1.addDisposeCallback(element, function () {
            model.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};
ko.virtualElements.allowedBindings['lazy'] = true;
ko.bindingHandlers['lazy'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var parsedBindings = valueAccessor();
        var resolver = parsedBindings.resolver || _codeResolver_1.globalResolver;
        var isResolved = parsedBindings.isResolved || ko.observable(false);
        if (parsedBindings.innerBindings) {
            parsedBindings = parsedBindings.innerBindings;
        }
        var isDisposed = false;
        var tasks = [];
        $.each(parsedBindings, function (innerBindingKey, innerBindingParameters) {
            var innerBinding = ko.bindingHandlers[innerBindingKey];
            tasks.push(resolver.execute(function () {
                if (!isDisposed) {
                    var isInitialized = false;
                    ko.computed({
                        read: function () {
                            if (!isInitialized && innerBinding.init) {
                                innerBinding.init(element, function () { return innerBindingParameters; }, allBindings, viewModel, bindingContext);
                                isInitialized = true;
                            }
                            if (innerBinding.update) {
                                innerBinding.update(element, function () { return innerBindingParameters; }, allBindings, viewModel, bindingContext);
                            }
                        },
                        disposeWhenNodeIsRemoved: element
                    });
                    isResolved(true);
                }
            }, 1));
        });
        _internal_1.addDisposeCallback(element, function () {
            isDisposed = true;
            tasks.forEach(function (x) { return x.dispose(); });
            tasks = [];
        });
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers['dxdAccordion'] = {
    init: function (element, valueAccessor) {
        var options = valueAccessor(), $element = $(element), $accordionContent = $element.find('.dx-accordion-content').first(), scrollUpdateCallback = function () {
            var $scroll = $element.parents('.dx-scrollview');
            if ($scroll.length > 0) {
                var scrollView = scroll_view_1.default.getInstance($scroll.get(0));
                scrollView && scrollView['update']();
            }
        };
        var accordionButton = $element
            .find('.dx-accordion-header,.dx-accordion-button').get(0);
        events.off(accordionButton, 'dxclick');
        events.on(accordionButton, 'dxclick', function () {
            options.collapsed(ko.unwrap(options.alwaysShow) ? false : !options.collapsed());
        });
        options.collapsed() ? $accordionContent.hide() : $accordionContent.show();
        var subscription = options.collapsed.subscribe(function (newVal) {
            $accordionContent.slideToggle(options.timeout, function () { return scrollUpdateCallback(); });
        });
        _internal_1.addDisposeCallback(element, function () { return subscription.dispose(); });
    }
};
ko.bindingHandlers['dxdAccordionExt'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var options = valueAccessor(), $element = $(element), scrollUpdateCallback = function () {
            var $scroll = $element.parents('.dx-scrollview');
            if ($scroll.length > 0) {
                var scrollView = scroll_view_1.default.getInstance($scroll.get(0));
                scrollView && scrollView['update']();
            }
        }, $accordionContent = $element.find('.dx-accordion-content').first(), accordionContentHTML = null;
        if (options.collapsed() && options.lazyContentRendering === true) {
            accordionContentHTML = $accordionContent.html();
            $accordionContent.empty();
        }
        options.collapsed.subscribe(function (newVal) {
            if (newVal) {
                $accordionContent.slideUp(options.timeout, function () {
                    scrollUpdateCallback();
                });
            }
            else {
                if (accordionContentHTML) {
                    $accordionContent.html(accordionContentHTML);
                    ko.applyBindingsToDescendants(bindingContext, $accordionContent.get(0));
                    accordionContentHTML = null;
                }
                $accordionContent.slideDown(options.timeout, function () {
                    scrollUpdateCallback();
                });
            }
        });
        options.collapsed() ? $accordionContent.hide() : $accordionContent.show();
    }
};
ko.bindingHandlers['dxLocalizedSelectBox'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var options = valueAccessor();
        var prevDisplayExpr = options.displayExpr;
        options['placeholder'] = options['placeholder'] || _localization_1.selectPlaceholder();
        options['noDataText'] = options['noDataText'] || _localization_1.noDataText();
        options.displayExpr = function (value) {
            if (!value)
                return value;
            if (!prevDisplayExpr)
                return localization_utils_1.getLocalization(value, value.localizationId);
            return localization_utils_1.getLocalization($.isFunction(prevDisplayExpr) ? prevDisplayExpr(value) : value[prevDisplayExpr], value.localizationId);
        };
        options.itemTemplate = function (itemData, itemIndex, itemElement) {
            var context = bindingContext.createChildContext({
                display: options.displayExpr(itemData)
            });
            $(itemElement).children().remove();
            var templateHtml = templateUtils_1.getTemplate('item-with-title'), $element = $(itemElement).append(templateHtml);
            ko.applyBindingsToDescendants(context, $element[0]);
            return itemElement;
        };
        var extendedOptions = viewModel.getOptions ? viewModel.getOptions(options) : options;
        ko.bindingHandlers['dxSelectBox'].init(element, function () { return extendedOptions; }, allBindings, viewModel, bindingContext);
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers['styleunit'] = {
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor() || {});
        $.each(value, function (styleName, styleValue) {
            styleValue = ko.utils.unwrapObservable(styleValue) || 0;
            element.style[styleName] = styleValue + 'px';
        });
    }
};
ko.bindingHandlers['service'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var value = ko.unwrap(valueAccessor() || {}), findService = function (serviceName) {
            var context = bindingContext.$parents.filter(function (item) { return item[serviceName] !== undefined; })[0];
            if (context) {
                return context[serviceName];
            }
            return null;
        }, service = findService(value.name), entity = service && service(viewModel);
        if (entity) {
            var childContext = bindingContext.createChildContext(entity.data);
            ko.renderTemplate(entity.templateName, childContext, {}, element, 'replaceNode');
        }
    }
};
