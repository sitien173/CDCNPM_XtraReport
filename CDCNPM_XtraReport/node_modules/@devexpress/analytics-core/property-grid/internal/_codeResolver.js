/**
* DevExpress Analytics (property-grid\internal\_codeResolver.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var _utils_1 = require("../../undo-engine/_utils");
var CodeResolver = (function () {
    function CodeResolver() {
        this._queue = [];
        this._queueObj = {};
        this._done = [];
        this._doneOnce = [];
    }
    CodeResolver.prototype.clear = function () {
        this._queue = [];
        this._queueObj = {};
    };
    CodeResolver.prototype.done = function (callback) {
        this._done.push(callback);
    };
    CodeResolver.prototype.doneOnce = function (callback) {
        this._doneOnce.push(callback);
    };
    CodeResolver.prototype._executeNext = function (id) {
        if (id === void 0) { id = this._queue[0]; }
        delete this._queueObj[id];
        while (this._queue.length > 0 && !this._queueObj[this._queue[0]]) {
            this._queue.splice(0, 1);
        }
        if (this._queue.length !== 0) {
            this._queueObj[this._queue[0]]();
        }
        else {
            for (var i = 0; i < this._done.length; i++) {
                this._done[i]();
            }
            do {
                var doOnceCallback = this._doneOnce.pop();
                doOnceCallback && doOnceCallback();
            } while (this._doneOnce.length);
        }
    };
    CodeResolver.prototype.execute = function (func, time) {
        var _this = this;
        if (time === void 0) { time = 0; }
        var id = _utils_1.guid();
        var $deferred = $.Deferred();
        if (time) {
            this._queue.push(id);
            this._queueObj[id] = function () {
                if (!_this._queueObj[id])
                    return _this._executeNext(id);
                setTimeout(function () {
                    _this._queueObj[id] && $deferred.resolve(func());
                    _this._executeNext(id);
                }, time);
            };
            if (this._queue.length === 1) {
                this._queueObj[this._queue[0]]();
            }
        }
        else {
            $deferred.resolve(func());
        }
        return {
            dispose: function () { return (delete _this._queueObj[id], $deferred.reject()); },
            force: function () { return (delete _this._queueObj[id], $deferred.resolve(func())); },
            doNext: function () { return (_this._queue.splice(0, 0, id)); },
            $promise: $deferred.promise()
        };
    };
    return CodeResolver;
}());
exports.CodeResolver = CodeResolver;
exports.globalResolver = new CodeResolver();
