/**
* DevExpress Analytics (property-grid\internal\_addon.js)
* Version:  21.2.7
* Build date: Apr 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../../serializer/utils");
var EditorAddOn = (function (_super) {
    __extends(EditorAddOn, _super);
    function EditorAddOn(editor, popupService) {
        var _this = _super.call(this) || this;
        _this.templateName = 'dx-editor-addons';
        _this._editor = editor;
        _this._popupService = popupService;
        _this._disposables.push(_this._actions = ko.pureComputed(function () {
            return (editor.getPopupServiceActions() || []).filter(function (x) { return _this.actionFilter(x); });
        }));
        _this._disposables.push(_this.visible = ko.pureComputed(function () {
            return _this._actions().length > 0;
        }));
        _this._disposables.push(_this.hint = ko.pureComputed(function () {
            var acc = [];
            _this._actions().forEach(function (x) { return _this._getTitles(x, [], acc); });
            return acc.join('\n');
        }));
        _this._disposables.push(_this.editorMenuButtonCss = ko.pureComputed(function () {
            var editorModel = editor._model();
            return editorModel && editorModel['getActionClassName'] && editorModel['getActionClassName'](editor.name) || '';
        }));
        _this._disposables.push(_this.imageTemplateName = ko.pureComputed(function () {
            var editorModel = editor._model();
            return editorModel && editorModel['getMenuBoxTemplate'] && editorModel['getMenuBoxTemplate'](editor.name) || '';
        }));
        return _this;
    }
    EditorAddOn.prototype._updateActions = function (actions) {
        var _this = this;
        this._popupService.actions([]);
        if (!actions || !actions.length)
            return;
        actions
            .sort(function (x, y) { return (x.title < y.title ? -1 : x.title > y.title ? 1 : 0); })
            .sort(function (x, y) { return (x.weight || 0) - (y.weight || 0); });
        this._wrapVisibleItems(actions, this._editor.name).forEach(function (visibleItem) {
            _this._popupService.actions.push(visibleItem);
        });
    };
    EditorAddOn.prototype._getTitles = function (item, currentItemPath, acc) {
        var _this = this;
        if (currentItemPath === void 0) { currentItemPath = []; }
        if (acc === void 0) { acc = []; }
        var title = ko.unwrap(item.title);
        (item.items || []).forEach(function (x) {
            var nextPath = title ? currentItemPath.concat([title]) : currentItemPath;
            _this._getTitles(x, nextPath, acc);
        });
        var hint = ko.unwrap(item.hint);
        if (!hint || !title)
            return;
        var resultTitle = currentItemPath.concat([title]).join('. ');
        acc.push(resultTitle + ':\n' + hint + '\n');
        return acc;
    };
    EditorAddOn.prototype._wrapVisibleItems = function (actions, editorName) {
        var _this = this;
        if (!actions)
            return undefined;
        return actions.map(function (modelAction) { return _this._wrapActionClick(modelAction, editorName); }).filter(function (x) { return !!x; });
    };
    EditorAddOn.prototype._wrapActionClick = function (modelAction, editorName) {
        var _this = this;
        if (this.actionFilter(modelAction)) {
            return {
                id: modelAction.id,
                items: this._wrapVisibleItems(modelAction.items, editorName),
                customTemplate: modelAction.customTemplate,
                action: function () {
                    modelAction.action(editorName);
                    _this._popupService.visible(false);
                },
                title: modelAction.title,
                hint: modelAction.hint,
                visible: function () { return true; }
            };
        }
        else {
            return null;
        }
    };
    EditorAddOn.prototype.showPopup = function (_, element) {
        this._popupService.title(this._editor.displayName());
        this._updateActions(this._editor.getPopupServiceActions());
        this._popupService.target(element);
        this._popupService.visible(true);
    };
    EditorAddOn.prototype.actionFilter = function (action) {
        return action.visible(this._editor.name);
    };
    return EditorAddOn;
}(utils_1.Disposable));
exports.EditorAddOn = EditorAddOn;
